{"version":3,"sources":["common/Header.js","common/Sidebar.js","common/Table.js","pages/CheckInOut.js","pages/Users.js","pages/Inventory.js","pages/Staff.js","pages/Transactions.js","App.js","serviceWorker.js","index.js"],"names":["trigger","Icon","name","Header","Row","className","Col","Dropdown","icon","direction","Menu","Item","text","as","Link","to","Component","Sidebar","Navbar","variant","Nav","href","tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","style","color","Search","size","SortArrow","ThirdStateCheck","ViewColumn","Table","flexGrow","components","Toolbar","toolbarComponents","icons","title","this","columns","data","localization","toolbar","nRowsSelected","itemType","options","search","paging","rowStyle","rowData","backgroundColor","tableData","id","searchFieldStyle","onRowClick","onSelectionChange","CheckInOut","handleSearchResult","bind","handleTransactionsChanges","handleDataChanges","state","error","userFound","setState","onUpdateData","page","onDoneClick","selectedUser","users","onSuccessfulSearchResult","Container","handleChange","e","searchInput","target","value","handleSearchButtonClick","filter","user","uid","length","handleKeyDown","key","isError","Input","onChange","onKeyPress","fluid","iconPosition","placeholder","Button","animated","onClick","Content","visible","hidden","React","CheckInOutViewUser","getTransactionsToShow","preSetTransactions","transactions","Array","from","item","checkedInDate","forEach","transaction","result","fname","lname","items","iid","category","Date","dueDate","getTime","getItemsToShow","preSetItems","atid","courses","some","course","includes","handleDoneClick","handleOpSelectClick","op","checked","isCheckoutModalOpen","close","selectedItemId","userProp","val","prevState","selectedItem","Object","assign","handleRowItemClick","rowClick","index","indexOf","find","tid","handleReturnSelectedItemsClick","map","handleCheckOutCartButtonClick","itemsToCheckOut","newTransactions","newAtid","Math","max","concat","t","toString","push","checkedOutDate","handleConfirmCheckOutButtonClick","formatDate","dateString","date","getMonth","getDate","getFullYear","selectedItemsToReturn","isCheckoutModalAllDateSelectorOpen","currentlyHeldColumnSet","field","render","itemsColumnSet","cartColumnSet","checkOutColumnSet","autoOk","inputVariant","label","format","InputAdornmentProps","position","handleDateChange","itemPanes","menuItem","event","selection","Set","sort","cartPanes","JSON","parse","stringify","Tab","panes","Modal","centered","selectedUserId","show","onHide","bsPrefix","Title","Body","IconButton","DatePicker","open","onClose","handleAllCheckoutDateChange","display","Footer","closeButton","Form","Field","nameError","defaultValue","readOnly","categoryError","notesError","notes","serialError","serial","Users","firstNameError","lastNameError","idError","emailError","editable","submitName","submitIcon","isChangesMadeToModal","handleUserEditClick","handleUserSelectClick","handleAddUserClick","email","phone","creationDate","tranactions","checkErrorUpdateDataSet","handleSubmitClick","handleDropdownChange","formatUserDate","hours","getHours","daynnite","getMinutes","getSeconds","columnSet","defaultSort","reduce","table","courseOptions","apply","basic","Divider","clearing","multiple","allowAdditions","disabled","toggle","active","Inventory","isItemIdUnavailable","handleItemIdVerify","generateInitialNextItemId","expected","iidError","formatDateForSearchBar","formatItemDate","handleCourseDropdownChange","handleBrandDropdownChange","brand","handleCategoryDropdownChange","isNaN","fullID","repeat","i","ids","parseInt","a","b","newId","headerStyleGrey","fontSize","headerStyle","customFilterAndSearch","term","inventoryTablePanes","brandOptions","categoryOptions","clearable","maxLength","Staff","dataSet","roles","handleDropdownAdditionRoles","roleOptions","handleDropdownAdditionCourses","handleDropdownChangeCourses","handleDropdownChangeRoles","onAddItem","type","Transactions","handleDropdownAddition","console","log","App","handleDataUpdate","utils","DateFnsUtils","md","exact","path","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6c961c1f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport { Dropdown, Icon } from \"semantic-ui-react\";\r\n\r\n// const sampleUser = { firstName: \"User\", lastName: \"Name\" };\r\n\r\nconst trigger = (\r\n  <h3>\r\n    User Name <Icon name=\"chevron down\" />\r\n  </h3>\r\n);\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <Row className=\"header\">\r\n        <Col>\r\n          <h2>\r\n            <Icon name=\"camera\" />\r\n            CageIMS\r\n          </h2>\r\n        </Col>\r\n        <Col>\r\n          <Dropdown\r\n            className=\"header-dropdown\"\r\n            trigger={trigger}\r\n            icon={null}\r\n            direction=\"left\"\r\n          >\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item icon=\"settings\" text=\"Settings\" />\r\n              <Dropdown.Item\r\n                icon=\"sign-out\"\r\n                text=\"Sign Out\"\r\n                as={Link}\r\n                to=\"/logout\"\r\n              />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport { Icon } from \"semantic-ui-react\";\r\nimport { Nav, Navbar } from \"react-bootstrap\";\r\n\r\nclass Sidebar extends Component {\r\n  render() {\r\n    return (\r\n      <Navbar variant=\"dark\" className=\"sidebar flex-column\">\r\n        <Nav className=\"flex-column\">\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#/\">\r\n              <h4>\r\n                <Icon name=\"sync\" />\r\n                Check In/Out\r\n              </h4>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#/users\">\r\n              <h4>\r\n                <Icon name=\"users\" />\r\n                Users\r\n              </h4>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#/inventory\">\r\n              <h4>\r\n                <Icon name=\"camera\" />\r\n                Inventory\r\n              </h4>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#/staff\">\r\n              <h4>\r\n                <Icon name=\"user\" />\r\n                Staff\r\n              </h4>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#/transactions\">\r\n              <h4>\r\n                <Icon name=\"history\" />\r\n                Transactions\r\n              </h4>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { Component } from \"react\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport { Icon } from \"semantic-ui-react\";\nimport { forwardRef } from \"react\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => (\n    <Clear style={{ color: \"#12558f\" }} {...props} ref={ref} />\n  )),\n  Search: forwardRef((props, ref) => (\n    <Icon\n      name=\"search\"\n      size=\"large\"\n      style={{ color: \"#12558f\" }}\n      {...props}\n      ref={ref}\n    />\n  )),\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\nclass Table extends Component {\n  render() {\n    return (\n      <MaterialTable\n        style={{ flexGrow: 1 }}\n        components={{\n          Toolbar: (props) => (\n            <div>\n              <div className=\"table-header MuiPaper-rounded MuiPaper-elevation2\">\n                <MTableToolbar {...props} />\n              </div>\n              {this.props.toolbarComponents}\n            </div>\n          ),\n        }}\n        icons={tableIcons}\n        title={this.props.title}\n        columns={this.props.columns}\n        data={this.props.data}\n        localization={{\n          toolbar: {\n            nRowsSelected:\n              \"{0} \" +\n              (this.props.itemType ? this.props.itemType : \"row\") +\n              \"(s) selected\",\n          },\n        }}\n        options={{\n          ...{\n            search: true,\n            paging: false,\n            rowStyle: (rowData) => ({\n              backgroundColor: rowData.backgroundColor\n                ? rowData.backgroundColor\n                : rowData.tableData.id % 2 === 0\n                ? \"#FAFAFA\"\n                : \"#FFFFFF\",\n            }),\n            searchFieldStyle: { backgroundColor: \"white\", color: \"black\" },\n          },\n          ...this.props.options,\n        }}\n        onRowClick={this.props.onRowClick}\n        onSelectionChange={this.props.onSelectionChange}\n      ></MaterialTable>\n    );\n  }\n}\n\nexport default Table;\n","import React, { Component } from \"react\";\nimport { Input, Button, Icon, Form, Tab } from \"semantic-ui-react\";\nimport { Container, Col, Row, Modal } from \"react-bootstrap\";\nimport Table from \"../common/Table\";\nimport { KeyboardDatePicker, DatePicker } from \"@material-ui/pickers\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DateRange from \"@material-ui/icons/DateRange\";\n\nclass CheckInOut extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSearchResult = this.handleSearchResult.bind(this);\n    this.handleTransactionsChanges = this.handleDataChanges.bind(this);\n    this.state = {\n      error: false,\n      userFound: \"\",\n      // {\n      //     fname: \"Greg\",\n      //     lname: \"Smelkov\",\n      //     uid: \"12345\",\n      //     courses: [\"Photography I\", \"Photography II\"],\n      // },\n    };\n  }\n\n  handleSearchResult(userFound) {\n    // console.log(userFound);\n    this.setState({ userFound });\n  }\n\n  handleDataChanges(data) {\n    this.props.onUpdateData(data);\n  }\n\n  render() {\n    const userFound = this.state.userFound;\n    let page;\n    if (!userFound)\n      page = (\n        <Search\n          users={this.props.data.users}\n          onSuccessfulSearchResult={this.handleSearchResult}\n        />\n      );\n    else\n      page = (\n        <CheckInOutViewUser\n          data={this.props.data}\n          onDoneClick={this.handleSearchResult}\n          selectedUser={this.state.userFound}\n          onUpdateData={this.handleTransactionsChanges}\n        />\n      );\n    return <Container className=\"checkinout\">{page}</Container>;\n  }\n}\n\nexport default CheckInOut;\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: false,\n    };\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchInput: e.target.value });\n  };\n\n  handleSearchButtonClick = () => {\n    const users = this.props.users.filter(\n      (user) => user.uid === this.state.searchInput\n    );\n    if (users.length > 0) {\n      this.props.onSuccessfulSearchResult(users[0]);\n    } else {\n      this.setState({ error: true });\n    }\n  };\n\n  handleKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      this.handleSearchButtonClick();\n    }\n  };\n\n  render() {\n    const isError = this.state.error;\n    return (\n      <div className=\"checkinout-search\">\n        <h1>Check In/Out</h1>\n        <Input\n          error={this.state.error}\n          onChange={this.handleChange}\n          onKeyPress={this.handleKeyDown}\n          size=\"huge\"\n          fluid\n          icon=\"users\"\n          iconPosition=\"left\"\n          placeholder=\"Search by exact ID...\"\n        />\n        {isError && (\n          <div className=\"error-text\">\n            <p>Error: ID is invalid.</p>\n          </div>\n        )}\n        <Button size=\"big\" animated onClick={this.handleSearchButtonClick}>\n          <Button.Content visible>Search</Button.Content>\n          <Button.Content hidden>\n            <Icon name=\"search\" />\n          </Button.Content>\n        </Button>\n      </div>\n    );\n  }\n}\n\nclass CheckInOutViewUser extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      op: \"\",\n\n      selectedItemId: null,\n      selectedItem: {},\n\n      selectedItemsToReturn: [],\n\n      transactions: [],\n      items: [],\n\n      newTransactions: [],\n\n      isCheckoutModalOpen: false,\n      isCheckoutModalAllDateSelectorOpen: false,\n    };\n  }\n\n  getTransactionsToShow = (preSetTransactions) => {\n    let transactions = Array.from(\n      (preSetTransactions\n        ? preSetTransactions\n        : this.props.data.transactions\n      ).filter(\n        (item) =>\n          item.uid === this.props.selectedUser.uid && !item.checkedInDate\n      )\n    );\n    transactions.forEach((transaction) => {\n      let result = this.props.data.users.filter(\n        (user) => transaction.uid === user.uid\n      );\n      transaction.fname = result[0] ? result[0].fname : \"\";\n      transaction.lname = result[0] ? result[0].lname : \"\";\n      result = this.props.data.items.filter(\n        (item) => transaction.iid === item.iid\n      );\n      transaction.name = result[0] ? result[0].name : \"\";\n      transaction.category = result[0] ? result[0].category : \"\";\n\n      transaction.backgroundColor =\n        !transaction.checkedInDate &&\n        new Date(transaction.dueDate).getTime() < new Date().getTime()\n          ? \"mistyrose\"\n          : \"\";\n    });\n    return transactions;\n  };\n\n  getItemsToShow = (preSetItems) => {\n    let items = Array.from(\n      (preSetItems ? preSetItems : this.props.data.items).filter(\n        (item) =>\n          !item.atid &&\n          this.props.selectedUser.courses.some((course) =>\n            item.courses.includes(course)\n          )\n      )\n    );\n    return items;\n  };\n\n  componentDidMount() {\n    this.setState({\n      transactions: this.getTransactionsToShow(),\n      items: this.getItemsToShow(),\n    });\n  }\n\n  handleDoneClick = () => {\n    this.props.onDoneClick(\"\");\n  };\n\n  handleOpSelectClick = (e, op) => {\n    this.state.transactions.forEach((transaction) => {\n      if (transaction.tableData) transaction.tableData.checked = false;\n    });\n    this.state.items.forEach((item) => {\n      if (item.tableData) item.tableData.checked = false;\n    });\n    this.setState({ op, isCheckoutModalOpen: false });\n  };\n\n  close = () =>\n    this.setState({\n      selectedItemId: null,\n      isCheckoutModalOpen: false,\n    });\n\n  handleChange = (e, userProp) => {\n    const val = e.target.value;\n    this.setState((prevState) => {\n      let selectedItem = Object.assign({}, prevState.selectedItem);\n      selectedItem[userProp] = val;\n      return { selectedItem };\n    });\n  };\n\n  handleRowItemClick = (e, rowData, rowClick = true) => {\n    if (this.state.op === \"checkin\") {\n      let transactions = this.state.transactions;\n      const index = transactions.indexOf(rowData);\n      transactions[index].tableData.checked = !transactions[index].tableData\n        .checked;\n      this.setState({ transactions });\n    } else if (this.state.op === \"checkout\") {\n      let items = this.state.items;\n      const item = items.find((item) => item.iid === rowData.iid);\n      if (rowClick) item.tableData.checked = !item.tableData.checked;\n      this.setState({ items });\n    } else {\n      this.setState({\n        selectedItemId: rowData.tid,\n        selectedItem: rowData,\n      });\n    }\n  };\n\n  handleReturnSelectedItemsClick = (e) => {\n    let data = Object.assign({}, this.props.data);\n    const completedTransactionIds = this.state.transactions\n      .filter((transaction) => transaction.tableData?.checked)\n      .map((transaction) => transaction.tid);\n    completedTransactionIds.forEach((id) => {\n      let transaction = data.transactions.find(\n        (transaction) => transaction.tid === id\n      );\n      transaction.checkedInDate = new Date().getTime();\n      let item = data.items.find((item) => item.iid === transaction.iid);\n      item.atid = \"\";\n    });\n\n    this.props.onUpdateData(data);\n\n    this.setState(\n      {\n        transactions: this.getTransactionsToShow(),\n        items: this.getItemsToShow(),\n      },\n      this.handleOpSelectClick(e, \"\")\n    );\n  };\n\n  handleCheckOutCartButtonClick = (e) => {\n    let data = Object.assign({}, this.props.data);\n    const itemsToCheckOut = this.state.items.filter(\n      (item) => item.tableData?.checked\n    );\n    let newTransactions = [];\n    itemsToCheckOut.forEach((item) => {\n      let newAtid = (\n        Math.max(\n          ...data.transactions.concat(newTransactions).map((t) => t.tid)\n        ) + 1\n      ).toString();\n      newTransactions.push({\n        tid: newAtid,\n        uid: this.props.selectedUser.uid,\n        iid: item.iid,\n        checkedOutDate: new Date().getTime(),\n        dueDate: null,\n        checkedInDate: \"\",\n      });\n    });\n\n    this.setState({ newTransactions, isCheckoutModalOpen: true });\n  };\n\n  handleConfirmCheckOutButtonClick = (e) => {\n    if (this.state.newTransactions.some((transaction) => !transaction.dueDate))\n      return;\n\n    let data = Object.assign({}, this.props.data);\n    data.transactions = data.transactions.concat(this.state.newTransactions);\n    this.state.newTransactions.forEach(\n      (transaction) =>\n        (data.items.find((item) => item.iid === transaction.iid).atid =\n          transaction.tid)\n    );\n\n    this.props.onUpdateData(data);\n    this.setState(\n      {\n        transactions: this.getTransactionsToShow(data.transactions),\n        items: this.getItemsToShow(),\n      },\n      this.handleOpSelectClick(e, \"\")\n    );\n  };\n\n  formatDate = (dateString) => {\n    if (!dateString) return \"\";\n    const date = new Date(dateString);\n    return (\n      date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear()\n    );\n  };\n\n  render() {\n    const selectedItemId = this.state.selectedItemId;\n    const selectedItem = this.state.selectedItem;\n\n    const handleDateChange = (date, iid) => {\n      let newTransactions = Array.from(this.state.newTransactions);\n      newTransactions.find(\n        (transaction) => transaction.iid === iid\n      ).dueDate = date.getTime();\n      this.setState({ newTransactions });\n    };\n\n    const handleAllCheckoutDateChange = (date) => {\n      let newTransactions = Array.from(this.state.newTransactions);\n      newTransactions.forEach(\n        (transaction) => (transaction.dueDate = date.getTime())\n      );\n      this.setState({\n        newTransactions,\n        isCheckoutModalAllDateSelectorOpen: false,\n      });\n    };\n\n    const currentlyHeldColumnSet = [\n      { title: \"Item Name\", field: \"name\" },\n      { title: \"Category\", field: \"category\" },\n      { title: \"Transaction Notes\", field: \"notes\" },\n      {\n        title: \"Checked Out\",\n        field: \"checkedOutDate\",\n        render: (rowData) => this.formatDate(rowData.checkedOutDate),\n      },\n      {\n        title: \"Due Date\",\n        field: \"dueDate\",\n        render: (rowData) => this.formatDate(rowData.dueDate),\n      },\n    ];\n\n    const itemsColumnSet = [\n      { title: \"Item Name\", field: \"name\" },\n      { title: \"Category\", field: \"category\" },\n      { title: \"Notes\", field: \"notes\" },\n    ];\n\n    const cartColumnSet = [\n      { title: \"Item Name\", field: \"name\" },\n      { title: \"Category\", field: \"category\" },\n    ];\n\n    const checkOutColumnSet = [\n      { title: \"Item Name\", field: \"name\" },\n      { title: \"Category\", field: \"category\" },\n      {\n        title: \"Due Date\",\n        field: \"dueDate\",\n        render: (rowData) => (\n          <KeyboardDatePicker\n            autoOk\n            error={\n              !this.state.newTransactions.find(\n                (transaction) => rowData.iid === transaction.iid\n              ).dueDate\n            }\n            variant=\"inline\"\n            inputVariant=\"outlined\"\n            label=\"Select due date\"\n            format=\"MM/dd/yyyy\"\n            value={\n              this.state.newTransactions.find(\n                (transaction) => rowData.iid === transaction.iid\n              ).dueDate\n                ? new Date(\n                    this.state.newTransactions.find(\n                      (transaction) => rowData.iid === transaction.iid\n                    ).dueDate\n                  )\n                : null\n            }\n            InputAdornmentProps={{ position: \"end\" }}\n            onChange={(date) => handleDateChange(date, rowData.iid)}\n          />\n        ),\n      },\n    ];\n\n    let itemPanes = [\n      {\n        menuItem: \"All\",\n        render: () => (\n          <Table\n            data={this.state.items}\n            itemType={\"item\"}\n            columns={itemsColumnSet}\n            title={<h3>All</h3>}\n            onRowClick={(event, rowData) =>\n              this.handleRowItemClick(event, rowData)\n            }\n            onSelectionChange={(event, rowData) => {\n              this.handleRowItemClick(event, rowData, false);\n            }}\n            options={{ selection: true }}\n          />\n        ),\n      },\n    ];\n\n    const categories = [\n      ...new Set(this.state.items.map((item) => item.category)),\n    ].sort();\n    categories.forEach((category) => {\n      itemPanes.push({\n        menuItem: category,\n        render: () => (\n          <Table\n            data={this.state.items.filter((item) => item.category === category)}\n            itemType={\"item\"}\n            columns={itemsColumnSet}\n            title={<h3>{category}</h3>}\n            onRowClick={(event, rowData) =>\n              this.handleRowItemClick(event, rowData)\n            }\n            onSelectionChange={(event, rowData) => {\n              this.handleRowItemClick(event, rowData, false);\n            }}\n            options={{ selection: true }}\n          />\n        ),\n      });\n    });\n\n    const cartPanes = [\n      {\n        menuItem: \"\",\n        render: () => (\n          <Table\n            data={JSON.parse(\n              JSON.stringify(\n                this.state.items.filter((item) => item.tableData?.checked)\n              )\n            )}\n            itemType={\"item\"}\n            columns={cartColumnSet}\n            title={<h3>Cart</h3>}\n            onRowClick={(event, rowData) =>\n              this.handleRowItemClick(event, rowData)\n            }\n            onSelectionChange={(event, rowData) => {\n              this.handleRowItemClick(event, rowData, false);\n            }}\n            options={{ selection: true, search: false }}\n          />\n        ),\n      },\n    ];\n\n    let pageOp;\n    if (this.state.op === \"checkin\") {\n      pageOp = (\n        <div className=\"checkinout-viewuser\">\n          <Row className=\"page-menu\">\n            <h1>\n              {this.props.selectedUser.fname +\n                \" \" +\n                this.props.selectedUser.lname}{\" \"}\n              -- Check In/Return\n            </h1>\n            <Button\n              onClick={(e) => {\n                this.handleOpSelectClick(e, \"\");\n              }}\n              size=\"big\"\n              animated\n              color=\"green\"\n            >\n              <Button.Content visible>Back</Button.Content>\n              <Button.Content hidden>\n                <Icon name=\"arrow circle left\" />\n              </Button.Content>\n            </Button>\n          </Row>\n          <Row>\n            <div className=\"current-table-container\">\n              <Table\n                data={this.state.transactions}\n                itemType={\"item\"}\n                columns={currentlyHeldColumnSet}\n                title={<h3>Currently held items:</h3>}\n                onRowClick={(event, rowData) =>\n                  this.handleRowItemClick(event, rowData)\n                }\n                options={{ selection: true }}\n              />\n            </div>\n          </Row>\n          <Row className=\"flex-end\">\n            <Button\n              onClick={(e) => {\n                this.handleOpSelectClick(e, \"\");\n              }}\n              color=\"red\"\n              size=\"big\"\n            >\n              <Button.Content visible>Cancel</Button.Content>\n            </Button>\n            <Button\n              onClick={(e) => {\n                this.handleReturnSelectedItemsClick(e);\n              }}\n              color=\"orange\"\n              size=\"big\"\n            >\n              <Button.Content visible>Return Selected Items</Button.Content>\n            </Button>\n          </Row>\n        </div>\n      );\n    } else if (this.state.op === \"checkout\") {\n      pageOp = (\n        <div className=\"checkinout-viewuser\">\n          <Row className=\"page-menu\">\n            <h1>\n              {this.props.selectedUser.fname +\n                \" \" +\n                this.props.selectedUser.lname}{\" \"}\n              -- Check Out/Borrow\n            </h1>\n            <Button\n              onClick={(e) => {\n                this.handleOpSelectClick(e, \"\");\n              }}\n              size=\"big\"\n              animated\n              color=\"green\"\n            >\n              <Button.Content visible>Back</Button.Content>\n              <Button.Content hidden>\n                <Icon name=\"arrow circle left\" />\n              </Button.Content>\n            </Button>\n          </Row>\n          <Row>\n            <div className=\"checkout-table-wrapper\">\n              <Tab className=\"checkout-inv-table\" panes={itemPanes} />\n              <Tab className=\"checkout-cart-table\" panes={cartPanes} />\n              <Modal\n                centered\n                size={this.state.selectedUserId >= 0 ? \"xl\" : \"lg\"}\n                show={this.state.isCheckoutModalOpen}\n                onHide={this.close}\n              >\n                <Modal.Header bsPrefix=\"modal-header\">\n                  <Modal.Title>Check Out</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                  <Row>\n                    <Col>\n                      <Table\n                        data={JSON.parse(\n                          JSON.stringify(\n                            this.state.items.filter(\n                              (item) => item.tableData?.checked\n                            )\n                          )\n                        )}\n                        itemType={\"item\"}\n                        columns={checkOutColumnSet}\n                        title={<h3>Cart</h3>}\n                        options={{ selection: false, search: false }}\n                        toolbarComponents={\n                          <div className=\"toolbarSetAllDate\">\n                            <div>\n                              Set all due dates:\n                              <IconButton\n                                onClick={() =>\n                                  this.setState({\n                                    isCheckoutModalAllDateSelectorOpen: true,\n                                  })\n                                }\n                              >\n                                <DateRange />\n                              </IconButton>\n                              <DatePicker\n                                autoOk\n                                variant=\"inline\"\n                                // ERROR: issue with open not finding correct render location,\n                                //   seems like it might be resolved in next datepicker update\n                                //   update plugin when possible\n                                //   otherwise will work temporarily\n                                open={\n                                  this.state.isCheckoutModalAllDateSelectorOpen\n                                }\n                                onClose={() =>\n                                  this.setState({\n                                    isCheckoutModalAllDateSelectorOpen: false,\n                                  })\n                                }\n                                format=\"MM/dd/yyyy\"\n                                onChange={(date) =>\n                                  handleAllCheckoutDateChange(date)\n                                }\n                                value={null}\n                                style={{ display: \"none\" }}\n                              />\n                            </div>\n                          </div>\n                        }\n                      />\n                    </Col>\n                  </Row>\n                </Modal.Body>\n                <Modal.Footer>\n                  <Button\n                    onClick={(e) => {\n                      this.close();\n                    }}\n                    color=\"red\"\n                    size=\"big\"\n                  >\n                    <Button.Content visible>Cancel</Button.Content>\n                  </Button>\n                  <Button\n                    onClick={(e) => {\n                      this.handleConfirmCheckOutButtonClick(e);\n                    }}\n                    color=\"blue\"\n                    size=\"big\"\n                  >\n                    <Button.Content visible>Confirm Check Out</Button.Content>\n                  </Button>\n                </Modal.Footer>\n              </Modal>\n            </div>\n          </Row>\n          <Row className=\"flex-end\">\n            <Button\n              onClick={(e) => {\n                this.handleOpSelectClick(e, \"\");\n              }}\n              color=\"red\"\n              size=\"big\"\n            >\n              <Button.Content visible>Cancel</Button.Content>\n            </Button>\n            <Button\n              onClick={(e) => {\n                this.handleCheckOutCartButtonClick(e);\n              }}\n              color=\"blue\"\n              size=\"big\"\n            >\n              <Button.Content visible>Check Out Selected Items</Button.Content>\n            </Button>\n          </Row>\n        </div>\n      );\n    } else {\n      pageOp = (\n        <div className=\"checkinout-viewuser\">\n          <Row className=\"page-menu\">\n            <h1>\n              {this.props.selectedUser.fname +\n                \" \" +\n                this.props.selectedUser.lname}\n            </h1>\n            <Button\n              onClick={this.handleDoneClick}\n              size=\"big\"\n              animated\n              color=\"green\"\n            >\n              <Button.Content visible>Complete Transactions</Button.Content>\n              <Button.Content hidden>\n                <Icon name=\"check\" />\n              </Button.Content>\n            </Button>\n          </Row>\n          <Row>\n            <div className=\"current-table-container\">\n              <Table\n                data={this.state.transactions}\n                itemType={\"item\"}\n                columns={currentlyHeldColumnSet}\n                title={<h3>Currently held items:</h3>}\n                onRowClick={(event, rowData) =>\n                  this.handleRowItemClick(event, rowData)\n                }\n              />\n              <Modal\n                centered\n                size={this.state.selectedItemId >= 0 ? \"lg\" : \"lg\"}\n                show={selectedItemId != null}\n                onHide={this.close}\n              >\n                <Modal.Header closeButton bsPrefix=\"modal-header\">\n                  <Modal.Title>Item</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                  <Row>\n                    <Col>\n                      <Form>\n                        <Form.Field>\n                          <label>\n                            First Name:\n                            {this.state.nameError && (\n                              <span className=\"error-text modal-label-error-text\">\n                                Error: Field cannot be empty.\n                              </span>\n                            )}\n                          </label>\n                          <Form.Input\n                            error={this.state.nameError}\n                            name=\"fname\"\n                            placeholder=\"First Name\"\n                            defaultValue={selectedItem.fname}\n                            readOnly\n                          ></Form.Input>\n                        </Form.Field>\n                        <Form.Field>\n                          <label>\n                            Last Name:\n                            {this.state.nameError && (\n                              <span className=\"error-text modal-label-error-text\">\n                                Error: Field cannot be empty.\n                              </span>\n                            )}\n                          </label>\n                          <Form.Input\n                            error={this.state.nameError}\n                            name=\"lname\"\n                            placeholder=\"Last Name\"\n                            defaultValue={selectedItem.lname}\n                            readOnly\n                          ></Form.Input>\n                        </Form.Field>\n                        <Form.Field>\n                          <label>\n                            Item Name:\n                            {this.state.categoryError && (\n                              <span className=\"error-text modal-label-error-text\">\n                                Error: Field cannot be empty.\n                              </span>\n                            )}\n                          </label>\n                          <Form.Input\n                            error={this.state.categoryError}\n                            name=\"name\"\n                            placeholder=\"name\"\n                            defaultValue={selectedItem.category}\n                            readOnly\n                          ></Form.Input>\n                        </Form.Field>\n                        <Form.Field>\n                          <label>\n                            Category:\n                            {this.state.notesError && (\n                              <span className=\"error-text modal-label-error-text\">\n                                Error: Field cannot be empty.\n                              </span>\n                            )}\n                          </label>\n                          <Form.Input\n                            name=\"category\"\n                            error={this.state.notesError}\n                            placeholder=\"Category\"\n                            defaultValue={selectedItem.notes}\n                            readOnly\n                          ></Form.Input>\n                        </Form.Field>\n                        <Form.Field>\n                          <label>\n                            Serial:\n                            {this.state.serialError && (\n                              <span className=\"error-text modal-label-error-text\">\n                                Error: Field cannot be empty.\n                              </span>\n                            )}\n                          </label>\n                          <Form.Input\n                            name=\"serial\"\n                            error={this.state.serialError}\n                            placeholder=\"Serial\"\n                            defaultValue={selectedItem.serial}\n                            onChange={(e) => {\n                              this.handleChange(e, \"serial\");\n                            }}\n                            readOnly\n                          ></Form.Input>\n                        </Form.Field>\n                        <Form.Field>\n                          <label>\n                            Notes:\n                            {this.state.notesError && (\n                              <span className=\"error-text modal-label-error-text\">\n                                Error: Field cannot be empty.\n                              </span>\n                            )}\n                          </label>\n                          <Form.Input\n                            name=\"notes\"\n                            error={this.state.notesError}\n                            placeholder=\"Notes\"\n                            defaultValue={selectedItem.notes}\n                            onChange={(e) => {\n                              this.handleChange(e, \"notes\");\n                            }}\n                            readOnly\n                          ></Form.Input>\n                        </Form.Field>\n                        <Form.Field>\n                          <label>Checked Out:</label>\n                          <Form.Input\n                            name=\"checkedOut\"\n                            placeholder=\"Checked Out\"\n                            defaultValue={selectedItem.checkedOutDate}\n                            onChange={(e) => {\n                              this.handleChange(e, \"checkedOutDate\");\n                            }}\n                            readOnly\n                          ></Form.Input>\n                        </Form.Field>\n                        <Form.Field>\n                          <label>Checked In:</label>\n                          <Form.Input\n                            name=\"checkedIn\"\n                            placeholder=\"Checked In\"\n                            error={!selectedItem.checkedInDate}\n                            defaultValue={selectedItem.checkedInDate}\n                            onChange={(e) => {\n                              this.handleChange(e, \"checkedInDate\");\n                            }}\n                            readOnly\n                          ></Form.Input>\n                        </Form.Field>\n                        <Form.Field>\n                          <label>Due Date:</label>\n                          <Form.Input\n                            name=\"due\"\n                            placeholder=\"Due Date\"\n                            defaultValue={selectedItem.dueDate}\n                            onChange={(e) => {\n                              this.handleChange(e, \"dueDate\");\n                            }}\n                            readOnly\n                          ></Form.Input>\n                        </Form.Field>\n                      </Form>\n                    </Col>\n                  </Row>\n                </Modal.Body>\n                <Modal.Footer></Modal.Footer>\n              </Modal>\n            </div>\n          </Row>\n          <Row className=\"checkinout-buttons\">\n            <Button\n              onClick={(e) => {\n                this.handleOpSelectClick(e, \"checkin\");\n              }}\n              color=\"orange\"\n              size=\"big\"\n            >\n              <Button.Content visible>Return Items</Button.Content>\n            </Button>\n            <Button\n              onClick={(e) => {\n                this.handleOpSelectClick(e, \"checkout\");\n              }}\n              color=\"blue\"\n              size=\"big\"\n            >\n              <Button.Content visible>Check Out Items</Button.Content>\n            </Button>\n          </Row>\n        </div>\n      );\n    }\n\n    return pageOp;\n  }\n}\n","import React, { Component } from \"react\";\r\nimport { Divider, Button, Form, Dropdown, Tab, Icon } from \"semantic-ui-react\";\r\nimport { Col, Row, Modal } from \"react-bootstrap\";\r\nimport Table from \"../common/Table\";\r\n\r\nclass Users extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.state = {\r\n      columnSet: [\r\n        { title: \"Last Name\", field: \"lname\", defaultSort: \"asc\" },\r\n        { title: \"First Name\", field: \"fname\" },\r\n        {\r\n          title: \"Courses\",\r\n          field: \"courses\",\r\n          render: (rowData) => {\r\n            return rowData.courses.length > 0\r\n              ? rowData.courses.reduce((result, item) => (\r\n                  <>\r\n                    {result}\r\n                    {\", \"}\r\n                    {item}\r\n                  </>\r\n                ))\r\n              : \"\";\r\n          },\r\n        },\r\n      ],\r\n      open: false,\r\n\r\n      firstNameError: false,\r\n      lastNameError: false,\r\n      idError: false,\r\n      emailError: false,\r\n      editable: true,\r\n      isChangesMadeToModal: false,\r\n\r\n      selectedUserId: null,\r\n      selectedUser: {\r\n        fname: \"\",\r\n        lname: \"\",\r\n        courses: [],\r\n        uid: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        notes: \"\",\r\n        transactions: [],\r\n        creationDate: \"\",\r\n      },\r\n    };\r\n  }\r\n\r\n  close = () =>\r\n    this.setState({\r\n      selectedUserId: null,\r\n      firstNameError: false,\r\n      lastNameError: false,\r\n      idError: false,\r\n      emailError: false,\r\n      editable: true,\r\n      submitName: \"Close\",\r\n      submitIcon: null,\r\n      isChangesMadeToModal: false,\r\n    });\r\n\r\n  handleChange = (e, userProp) => {\r\n    const val = e.target.value;\r\n    this.setState((prevState) => {\r\n      let selectedUser = Object.assign({}, prevState.selectedUser);\r\n      selectedUser[userProp] = val;\r\n      return { selectedUser, isChangesMadeToModal: true };\r\n    });\r\n  };\r\n\r\n  handleUserEditClick = () => {\r\n    this.setState({\r\n      editable: !this.state.editable,\r\n    });\r\n  };\r\n\r\n  handleUserSelectClick = (e, rowData) => {\r\n    this.setState({\r\n      selectedUserId: rowData.tableData.id,\r\n      selectedUser: this.props.data.users[rowData.tableData.id],\r\n    });\r\n    this.setState((prevState) => {\r\n      let selectedUser = Object.assign({}, prevState.selectedUser);\r\n      let transactions = Array.from(\r\n        this.props.data.transactions.filter(\r\n          (name) => name.uid === selectedUser.uid\r\n        )\r\n      );\r\n      transactions.forEach((transaction) => {\r\n        transaction.backgroundColor =\r\n          !transaction.checkedInDate &&\r\n          new Date(transaction.dueDate).getTime() < new Date().getTime()\r\n            ? \"mistyrose\"\r\n            : \"\";\r\n      });\r\n      selectedUser[\"transactions\"] = transactions;\r\n      return { selectedUser };\r\n    });\r\n  };\r\n\r\n  handleAddUserClick = () => {\r\n    this.setState({\r\n      selectedUserId: -1,\r\n      selectedUser: {\r\n        fname: \"\",\r\n        lname: \"\",\r\n        courses: [],\r\n        uid: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        notes: \"\",\r\n        creationDate: new Date().getTime(),\r\n        tranactions: [],\r\n      },\r\n      editable: false,\r\n    });\r\n  };\r\n\r\n  checkErrorUpdateDataSet = () => {\r\n    if (\r\n      !this.state.firstNameError &&\r\n      !this.state.lastNameError &&\r\n      !this.state.idError &&\r\n      !this.state.emailError\r\n    ) {\r\n      let data = Object.assign({}, this.props.data);\r\n      if (this.state.selectedUserId >= 0) {\r\n        data.users[this.state.selectedUserId] = this.state.selectedUser;\r\n      } else {\r\n        data.users.push(this.state.selectedUser);\r\n      }\r\n      this.props.onUpdateData(data);\r\n      this.close();\r\n    }\r\n  };\r\n\r\n  handleSubmitClick = () => {\r\n    this.setState(\r\n      {\r\n        firstNameError: this.state.selectedUser.fname === \"\",\r\n        lastNameError: this.state.selectedUser.lname === \"\",\r\n        idError: this.state.selectedUser.uid === \"\",\r\n        emailError: this.state.selectedUser.email === \"\",\r\n      },\r\n      this.checkErrorUpdateDataSet\r\n    );\r\n  };\r\n\r\n  handleDropdownChange = (e, { value }) => {\r\n    const val = value;\r\n    this.setState((prevState) => {\r\n      let selectedUser = Object.assign({}, prevState.selectedUser);\r\n      selectedUser.courses = val;\r\n      return { selectedUser, isChangesMadeToModal: true };\r\n    });\r\n  };\r\n\r\n  formatDate = (dateString) => {\r\n    if (!dateString) return \"\";\r\n    const date = new Date(dateString);\r\n    return (\r\n      date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear()\r\n    );\r\n  };\r\n\r\n  formatUserDate = (dateString) => {\r\n    if (!dateString) return \"\";\r\n    const date = new Date(dateString);\r\n    let hours = date.getHours();\r\n    let daynnite = \"\";\r\n    if (hours > 12) {\r\n      hours = hours - 12;\r\n      daynnite = \"PM\";\r\n    } else if (hours === 0) {\r\n      hours = 12;\r\n      daynnite = \"AM\";\r\n    } else if (hours < 12) {\r\n      daynnite = \"AM\";\r\n    }\r\n    return (\r\n      date.getMonth() +\r\n      1 +\r\n      \"/\" +\r\n      date.getDate() +\r\n      \"/\" +\r\n      date.getFullYear() +\r\n      \" \" +\r\n      hours +\r\n      \":\" +\r\n      (date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes()) +\r\n      \":\" +\r\n      (date.getSeconds() < 10 ? \"0\" + date.getSeconds() : date.getSeconds()) +\r\n      \" \" +\r\n      daynnite\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const selectedUserId = this.state.selectedUserId;\r\n    const selectedUser = this.state.selectedUser;\r\n    let table;\r\n    if (this.state.selectedUserId != null) {\r\n      if (this.state.selectedUserId >= 0) {\r\n        const panes = [\r\n          {\r\n            menuItem: \"Due Items\",\r\n            render: () => (\r\n              <Table\r\n                title={\r\n                  this.state.selectedUser.fname +\r\n                  \" \" +\r\n                  this.state.selectedUser.lname\r\n                }\r\n                columns={[\r\n                  { title: \"Item ID\", field: \"iid\" },\r\n                  { title: \"Transaction ID\", field: \"tid\" },\r\n                  {\r\n                    title: \"Checked Out Date\",\r\n                    field: \"checkedOutDate\",\r\n                    render: (rowData) =>\r\n                      this.formatDate(rowData.checkedOutDate),\r\n                  },\r\n                  {\r\n                    title: \"Due Date\",\r\n                    field: \"dueDate\",\r\n                    render: (rowData) => this.formatDate(rowData.dueDate),\r\n                  },\r\n                ]}\r\n                data={Array.from(\r\n                  this.state.selectedUser.transactions.filter(\r\n                    (name) => name.checkedInDate === \"\"\r\n                  )\r\n                )}\r\n              ></Table>\r\n            ),\r\n          },\r\n          {\r\n            menuItem: \"Completed Transactions\",\r\n            render: () => (\r\n              <Table\r\n                title={\r\n                  this.state.selectedUser.fname +\r\n                  \" \" +\r\n                  this.state.selectedUser.lname\r\n                }\r\n                columns={[\r\n                  { title: \"Item ID\", field: \"iid\" },\r\n                  { title: \"Transaction ID\", field: \"tid\" },\r\n                  {\r\n                    title: \"Checked Out Date\",\r\n                    field: \"checkedOutDate\",\r\n                    render: (rowData) =>\r\n                      this.formatDate(rowData.checkedOutDate),\r\n                  },\r\n                  {\r\n                    title: \"Checked In Date\",\r\n                    field: \"checkedInDate\",\r\n                    render: (rowData) => this.formatDate(rowData.checkedInDate),\r\n                  },\r\n                ]}\r\n                data={Array.from(\r\n                  this.state.selectedUser.transactions.filter(\r\n                    (name) => !(name.checkedInDate === \"\")\r\n                  )\r\n                )}\r\n              ></Table>\r\n            ),\r\n          },\r\n        ];\r\n        table = (\r\n          <Col>\r\n            <Tab panes={panes} className=\"stretch-h flex-col\" />\r\n          </Col>\r\n        );\r\n      }\r\n    }\r\n\r\n    const courseOptions = Array.from(\r\n      new Set(\r\n        [].concat.apply(\r\n          [],\r\n          [\r\n            this.state.selectedUser,\r\n            ...this.props.data.items,\r\n            ...this.props.data.users,\r\n          ]\r\n            .filter((item) => item.courses)\r\n            .map((item) => item.courses)\r\n        )\r\n      )\r\n    )\r\n      .sort()\r\n      .map((item) => ({ text: item, value: item }));\r\n\r\n    return (\r\n      <Col className=\"stretch-h flex-col\">\r\n        <div className=\"top-bar\">\r\n          <Button basic onClick={this.handleAddUserClick}>\r\n            Create New User\r\n          </Button>\r\n          <Divider clearing />\r\n        </div>\r\n        <div className=\"page-content stretch-h\">\r\n          <Col className=\"stretch-h flex-col\">\r\n            <Table\r\n              data={Array.from(this.props.data.users)}\r\n              columns={this.state.columnSet}\r\n              title={<h2>Users</h2>}\r\n              onRowClick={(event, rowData) =>\r\n                this.handleUserSelectClick(event, rowData)\r\n              }\r\n            />\r\n            <Modal\r\n              centered\r\n              size={selectedUserId >= 0 ? \"xl\" : \"lg\"}\r\n              show={selectedUserId != null}\r\n              onHide={this.close}\r\n            >\r\n              <Modal.Header closeButton bsPrefix=\"modal-header\">\r\n                <Modal.Title>User</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <Row>\r\n                  <Col>\r\n                    <Form>\r\n                      <Form.Field>\r\n                        <label>\r\n                          First Name:\r\n                          {this.state.firstNameError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          error={this.state.firstNameError}\r\n                          name=\"fname\"\r\n                          placeholder=\"First Name\"\r\n                          defaultValue={selectedUser.fname}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"fname\");\r\n                          }}\r\n                          readOnly={this.state.editable}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>\r\n                          Last Name:\r\n                          {this.state.lastNameError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          error={this.state.lastNameError}\r\n                          name=\"lname\"\r\n                          placeholder=\"Last Name\"\r\n                          defaultValue={selectedUser.lname}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"lname\");\r\n                          }}\r\n                          readOnly={this.state.editable}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Courses:</label>\r\n                        <Dropdown\r\n                          placeholder=\"Courses\"\r\n                          name=\"courses\"\r\n                          fluid\r\n                          multiple\r\n                          search\r\n                          selection\r\n                          allowAdditions\r\n                          options={courseOptions}\r\n                          value={selectedUser.courses}\r\n                          onChange={this.handleDropdownChange}\r\n                          disabled={this.state.editable}\r\n                        />\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>\r\n                          UML ID:\r\n                          {this.state.idError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          name=\"id\"\r\n                          error={this.state.idError}\r\n                          placeholder=\"UML ID\"\r\n                          defaultValue={selectedUser.uid}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"uid\");\r\n                          }}\r\n                          readOnly={this.state.editable}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>\r\n                          Email:\r\n                          {this.state.emailError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          name=\"email\"\r\n                          error={this.state.emailError}\r\n                          placeholder=\"Email\"\r\n                          defaultValue={selectedUser.email}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"email\");\r\n                          }}\r\n                          readOnly={this.state.editable}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Phone Number:</label>\r\n                        <Form.Input\r\n                          name=\"phone\"\r\n                          placeholder=\"Phone Number\"\r\n                          defaultValue={selectedUser.phone}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"phone\");\r\n                          }}\r\n                          readOnly={this.state.editable}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Notes:</label>\r\n                        <Form.Input\r\n                          name=\"notes\"\r\n                          placeholder=\"Notes\"\r\n                          defaultValue={selectedUser.notes}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"notes\");\r\n                          }}\r\n                          readOnly={this.state.editable}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      {selectedUserId >= 0 ? (\r\n                        <Form.Field>\r\n                          <label>Date Created:</label>\r\n                          <Form.Input\r\n                            name=\"creationDate\"\r\n                            placeholder=\"creationDate\"\r\n                            defaultValue={this.formatUserDate(\r\n                              selectedUser.creationDate\r\n                            )}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                      ) : null}\r\n                    </Form>\r\n                  </Col>\r\n                  {table}\r\n                </Row>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                {this.state.selectedUserId >= 0 ? (\r\n                  <Button\r\n                    className=\"btn btn-primary mr-auto\"\r\n                    toggle\r\n                    active={!this.state.editable}\r\n                    onClick={this.handleUserEditClick}\r\n                  >\r\n                    <Icon name=\"pencil\" />\r\n                    Edit\r\n                  </Button>\r\n                ) : null}\r\n                <Button\r\n                  id=\"add-icon-handler\"\r\n                  variant=\"primary\"\r\n                  onClick={this.handleSubmitClick}\r\n                >\r\n                  {this.state.isChangesMadeToModal ? (\r\n                    <Icon name=\"save\"></Icon>\r\n                  ) : null}\r\n                  {this.state.isChangesMadeToModal ? \"Save\" : \"Close\"}\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </Col>\r\n        </div>\r\n      </Col>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Users;\r\n","import React, { Component } from \"react\";\r\nimport { Divider, Button, Form, Dropdown, Icon, Tab } from \"semantic-ui-react\";\r\nimport { Col, Row, Modal } from \"react-bootstrap\";\r\nimport Table from \"../common/Table\";\r\n\r\nclass Inventory extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    const headerStyleGrey = {\r\n      backgroundColor: \"#E2E2E2\",\r\n      color: \"black\",\r\n      fontSize: \"24\",\r\n    };\r\n    this.state = {\r\n      columnSet: [\r\n        {\r\n          title: \"Item Name\",\r\n          field: \"name\",\r\n          headerStyle: headerStyleGrey,\r\n        },\r\n        {\r\n          title: \"Brand\",\r\n          field: \"brand\",\r\n          headerStyle: headerStyleGrey,\r\n        },\r\n        {\r\n          title: \"Category\",\r\n          field: \"category\",\r\n          headerStyle: headerStyleGrey,\r\n        },\r\n        {\r\n          title: \"Item ID\",\r\n          field: \"iid\",\r\n          defaultSort: \"asc\",\r\n          headerStyle: headerStyleGrey,\r\n        },\r\n        {\r\n          title: \"Serial\",\r\n          field: \"serial\",\r\n          headerStyle: headerStyleGrey,\r\n        },\r\n        {\r\n          title: \"Availablity\",\r\n          field: \"atid\",\r\n          headerStyle: headerStyleGrey,\r\n          render: (rowData) => {\r\n            return rowData.atid === \"\" ? \"Available\" : \"Unavailable\";\r\n          },\r\n        },\r\n        {\r\n          title: \"Notes\",\r\n          field: \"notes\",\r\n          headerStyle: headerStyleGrey,\r\n        },\r\n        {\r\n          title: \"Courses\",\r\n          field: \"courses\",\r\n          headerStyle: headerStyleGrey,\r\n          render: (rowData) => {\r\n            return rowData.courses.length > 0\r\n              ? rowData.courses.reduce((result, item) => (\r\n                  <>\r\n                    {result}\r\n                    {\", \"}\r\n                    {item}\r\n                  </>\r\n                ))\r\n              : \"\";\r\n          },\r\n        },\r\n        {\r\n          title: \"Expected Return Date\",\r\n          field: \"expected\",\r\n          headerStyle: headerStyleGrey,\r\n          render: (rowData) => this.formatDate(rowData.expected),\r\n          customFilterAndSearch: (term, rowData) =>\r\n            this.formatDateForSearchBar(rowData.expected).indexOf(term) !==\r\n              -1 || this.formatDate(rowData.expected).indexOf(term) !== -1,\r\n        },\r\n      ],\r\n      open: false,\r\n\r\n      nameError: false,\r\n      categoryError: false,\r\n      iidError: false,\r\n      serialError: false,\r\n      editable: true,\r\n      isChangesMadeToModal: false,\r\n      isItemIdUnavailable: false,\r\n\r\n      selectedItemId: null,\r\n      selectedItem: {\r\n        name: \"\",\r\n        iid: \"\",\r\n        serial: \"\",\r\n        category: \"\",\r\n        notes: \"\",\r\n        atid: \"\",\r\n        courses: [],\r\n        expected: \"\",\r\n        creationDate: \"\",\r\n      },\r\n    };\r\n  }\r\n\r\n  close = () =>\r\n    this.setState({\r\n      selectedItemId: null,\r\n      nameError: false,\r\n      categoryError: false,\r\n      serialError: false,\r\n      editable: true,\r\n      submitName: \"Close\",\r\n      submitIcon: null,\r\n      isChangesMadeToModal: false,\r\n      isItemIdUnavailable: false,\r\n    });\r\n\r\n  handleChange = (e, userProp) => {\r\n    let val = e.target.value;\r\n    if (userProp === \"iid\") {\r\n      val = this.handleItemIdVerify(val);\r\n    }\r\n    this.setState((prevState) => {\r\n      let selectedItem = Object.assign({}, prevState.selectedItem);\r\n      selectedItem[userProp] = val;\r\n      return { selectedItem, isChangesMadeToModal: true };\r\n    });\r\n  };\r\n\r\n  handleUserSelectClick = (e, rowData) => {\r\n    this.setState({\r\n      selectedItemId: rowData.tableData.id,\r\n      selectedItem: this.props.data.items[rowData.tableData.id],\r\n    });\r\n  };\r\n\r\n  handleAddUserClick = () => {\r\n    this.setState({\r\n      selectedItemId: -1,\r\n      selectedItem: {\r\n        name: \"\",\r\n        iid: this.generateInitialNextItemId(),\r\n        serial: \"\",\r\n        category: \"\",\r\n        notes: \"\",\r\n        atid: \"\",\r\n        courses: [],\r\n        creationDate: new Date().getTime(),\r\n        expected: \"\",\r\n      },\r\n      editable: false,\r\n      isChangesMadeToModal: false,\r\n    });\r\n  };\r\n\r\n  handleUserEditClick = () => {\r\n    this.setState({\r\n      editable: !this.state.editable,\r\n    });\r\n  };\r\n\r\n  checkErrorUpdateDataSet = () => {\r\n    if (\r\n      !this.state.nameError &&\r\n      !this.state.categoryError &&\r\n      !this.state.serialError &&\r\n      !this.state.isItemIdUnavailable &&\r\n      !this.state.iidError\r\n    ) {\r\n      let data = Object.assign({}, this.props.data);\r\n      if (this.state.selectedItemId >= 0) {\r\n        data.items[this.state.selectedItemId] = this.state.selectedItem;\r\n      } else {\r\n        data.items.push(this.state.selectedItem);\r\n      }\r\n      this.props.onUpdateData(data);\r\n      this.close();\r\n    }\r\n  };\r\n\r\n  handleSubmitClick = () => {\r\n    if (!this.state.isChangesMadeToModal) {\r\n      this.close();\r\n      return;\r\n    }\r\n    this.setState(\r\n      {\r\n        nameError: this.state.selectedItem.name === \"\",\r\n        categoryError: this.state.selectedItem.category === \"\",\r\n        iidError: this.state.selectedItem.iid === \"\",\r\n        serialError: this.state.selectedItem.serial === \"\",\r\n      },\r\n      this.checkErrorUpdateDataSet\r\n    );\r\n  };\r\n\r\n  formatDate = (dateString) => {\r\n    if (!dateString) return \"\";\r\n    const date = new Date(dateString);\r\n    return (\r\n      date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear()\r\n    );\r\n  };\r\n\r\n  formatDateForSearchBar = (dateString) => {\r\n    let monthNames = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    if (!dateString) return \"\";\r\n    const date = new Date(dateString);\r\n    return (\r\n      monthNames[date.getMonth()] +\r\n      \" \" +\r\n      date.getDate() +\r\n      \" \" +\r\n      date.getFullYear()\r\n    );\r\n  };\r\n\r\n  formatItemDate = (dateString) => {\r\n    if (!dateString) return \"\";\r\n    const date = new Date(dateString);\r\n    let hours = date.getHours();\r\n    let daynnite = \"\";\r\n    if (hours > 12) {\r\n      hours = hours - 12;\r\n      daynnite = \"PM\";\r\n    } else if (hours === 0) {\r\n      hours = 12;\r\n      daynnite = \"AM\";\r\n    } else if (hours < 12) {\r\n      daynnite = \"AM\";\r\n    }\r\n    return (\r\n      date.getMonth() +\r\n      1 +\r\n      \"/\" +\r\n      date.getDate() +\r\n      \"/\" +\r\n      date.getFullYear() +\r\n      \" \" +\r\n      hours +\r\n      \":\" +\r\n      (date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes()) +\r\n      \":\" +\r\n      (date.getSeconds() < 10 ? \"0\" + date.getSeconds() : date.getSeconds()) +\r\n      \" \" +\r\n      daynnite\r\n    );\r\n  };\r\n\r\n  handleCourseDropdownChange = (e, { value }) => {\r\n    const val = value;\r\n    this.setState((prevState) => {\r\n      let selectedItem = Object.assign({}, prevState.selectedItem);\r\n      selectedItem.courses = val;\r\n      return { selectedItem, isChangesMadeToModal: true };\r\n    });\r\n  };\r\n\r\n  handleBrandDropdownChange = (e, { value }) => {\r\n    const val = value;\r\n    this.setState((prevState) => {\r\n      let selectedItem = Object.assign({}, prevState.selectedItem);\r\n      selectedItem.brand = val;\r\n      return { selectedItem, isChangesMadeToModal: true };\r\n    });\r\n  };\r\n\r\n  handleCategoryDropdownChange = (e, { value }) => {\r\n    const val = value;\r\n    this.setState((prevState) => {\r\n      let selectedItem = Object.assign({}, prevState.selectedItem);\r\n      selectedItem.category = val;\r\n      return { selectedItem, isChangesMadeToModal: true };\r\n    });\r\n  };\r\n\r\n  handleItemIdVerify = (iid) => {\r\n    if (iid === \"\") return \"\";\r\n    if (isNaN(iid)) {\r\n      this.setState({ isItemIdUnavailable: true });\r\n      return iid;\r\n    }\r\n    let fullID = \"0\".repeat(4 - iid.length) + iid;\r\n    this.setState({\r\n      isItemIdUnavailable: this.props.data.items.some(\r\n        (item, i) => item.iid === fullID && this.state.selectedItemId !== i\r\n      ),\r\n    });\r\n    return fullID;\r\n  };\r\n\r\n  generateInitialNextItemId = () => {\r\n    if (this.props.data.items.length === 0) return \"0001\";\r\n    const ids = this.props.data.items\r\n      .map((item) => parseInt(item.iid))\r\n      .sort((a, b) => a - b);\r\n    const newId = (ids.find((id) => !ids.includes(id + 1)) + 1).toString();\r\n    return \"0\".repeat(4 - newId.length) + newId;\r\n  };\r\n\r\n  render() {\r\n    const selectedItemId = this.state.selectedItemId;\r\n    const selectedItem = this.state.selectedItem;\r\n\r\n    let items = Array.from(this.props.data.items);\r\n    items.forEach((items) => {\r\n      let result = this.props.data.transactions.filter(\r\n        (transaction) => items.atid === transaction.tid\r\n      );\r\n      items.expected = !(items.atid === \"\") ? result[0].dueDate : \"\";\r\n      items.backgroundColor = !(items.atid === \"\") ? \"mistyrose\" : \"\";\r\n    });\r\n\r\n    const inventoryTablePanes = [\r\n      {\r\n        menuItem: \"All\",\r\n        render: () => (\r\n          <Table\r\n            data={Array.from(this.props.data.items)}\r\n            columns={this.state.columnSet}\r\n            title={<h2>Inventory</h2>}\r\n            onRowClick={(event, rowData) =>\r\n              this.handleUserSelectClick(event, rowData)\r\n            }\r\n          />\r\n        ),\r\n      },\r\n      {\r\n        menuItem: \"Available\",\r\n        render: () => (\r\n          <Table\r\n            data={Array.from(\r\n              this.props.data.items.filter(\r\n                (name) => name.backgroundColor !== \"mistyrose\"\r\n              )\r\n            )}\r\n            columns={this.state.columnSet}\r\n            title={<h2>Inventory</h2>}\r\n            onRowClick={(event, rowData) =>\r\n              this.handleUserSelectClick(event, rowData)\r\n            }\r\n          />\r\n        ),\r\n      },\r\n      {\r\n        menuItem: \"Unavailable\",\r\n        render: () => (\r\n          <Table\r\n            data={Array.from(\r\n              this.props.data.items.filter(\r\n                (name) => name.backgroundColor === \"mistyrose\"\r\n              )\r\n            )}\r\n            columns={this.state.columnSet}\r\n            title={<h2>Inventory</h2>}\r\n            onRowClick={(event, rowData) =>\r\n              this.handleUserSelectClick(event, rowData)\r\n            }\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n\r\n    const courseOptions = Array.from(\r\n      new Set(\r\n        [].concat.apply(\r\n          [],\r\n          [\r\n            this.state.selectedItem,\r\n            ...this.props.data.items,\r\n            ...this.props.data.users,\r\n          ]\r\n            .filter((item) => item.courses)\r\n            .map((item) => item.courses)\r\n        )\r\n      )\r\n    )\r\n      .sort()\r\n      .map((item) => ({ text: item, value: item }));\r\n    const brandOptions = Array.from(\r\n      new Set(\r\n        [this.state.selectedItem, ...this.props.data.items]\r\n          .filter((item) => item.brand)\r\n          .map((item) => item.brand)\r\n      )\r\n    )\r\n      .sort()\r\n      .map((item) => ({ text: item, value: item }));\r\n    const categoryOptions = Array.from(\r\n      new Set(\r\n        [this.state.selectedItem, ...this.props.data.items]\r\n          .filter((item) => item.category)\r\n          .map((item) => item.category)\r\n      )\r\n    )\r\n      .sort()\r\n      .map((item) => ({ text: item, value: item }));\r\n\r\n    return (\r\n      <Col className=\"stretch-h flex-col\">\r\n        <div className=\"top-bar\">\r\n          <Button basic onClick={this.handleAddUserClick}>\r\n            Create New Item\r\n          </Button>\r\n          <Divider clearing />\r\n        </div>\r\n        <div className=\"page-content stretch-h\">\r\n          <Col className=\"stretch-h flex-col\">\r\n            <Tab panes={inventoryTablePanes} className=\"stretch-h flex-col\" />\r\n            <Modal\r\n              centered\r\n              size={this.state.selectedItemId >= 0 ? \"lg\" : \"lg\"}\r\n              show={selectedItemId != null}\r\n              onHide={this.close}\r\n            >\r\n              <Modal.Header closeButton bsPrefix=\"modal-header\">\r\n                <Modal.Title>Item</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <Row>\r\n                  <Col>\r\n                    <Form>\r\n                      <Form.Field>\r\n                        <label>\r\n                          Name:\r\n                          {this.state.nameError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          error={this.state.nameError}\r\n                          name=\"name\"\r\n                          placeholder=\"Name\"\r\n                          defaultValue={selectedItem.name}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"name\");\r\n                          }}\r\n                          readOnly={this.state.editable}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Brand:</label>\r\n                        <Dropdown\r\n                          placeholder=\"Brand\"\r\n                          name=\"brand\"\r\n                          fluid\r\n                          search\r\n                          selection\r\n                          allowAdditions\r\n                          clearable\r\n                          options={brandOptions}\r\n                          value={selectedItem.brand}\r\n                          onChange={this.handleBrandDropdownChange}\r\n                          disabled={this.state.editable}\r\n                        />\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>\r\n                          Category:\r\n                          {this.state.categoryError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Dropdown\r\n                          placeholder=\"Category\"\r\n                          name=\"category\"\r\n                          fluid\r\n                          error={this.state.categoryError}\r\n                          search\r\n                          selection\r\n                          allowAdditions\r\n                          options={categoryOptions}\r\n                          value={selectedItem.category}\r\n                          onChange={this.handleCategoryDropdownChange}\r\n                          disabled={this.state.editable}\r\n                        />\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Courses:</label>\r\n                        <Dropdown\r\n                          placeholder=\"Courses\"\r\n                          name=\"courses\"\r\n                          fluid\r\n                          multiple\r\n                          search\r\n                          selection\r\n                          allowAdditions\r\n                          options={courseOptions}\r\n                          value={selectedItem.courses}\r\n                          onChange={this.handleCourseDropdownChange}\r\n                          disabled={this.state.editable}\r\n                        />\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>\r\n                          Item ID:\r\n                          {(this.state.iidError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )) ||\r\n                            (this.state.isItemIdUnavailable && (\r\n                              <span className=\"error-text modal-label-error-text\">\r\n                                Error: Item ID is Taken or Incorrect\r\n                              </span>\r\n                            ))}\r\n                          {}\r\n                        </label>\r\n                        <Form.Input\r\n                          name=\"iid\"\r\n                          error={\r\n                            this.state.iidError ||\r\n                            this.state.isItemIdUnavailable\r\n                          }\r\n                          maxLength=\"4\"\r\n                          placeholder=\"Item ID\"\r\n                          defaultValue={selectedItem.iid}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"iid\");\r\n                          }}\r\n                          readOnly={this.state.editable}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>\r\n                          Serial ID:\r\n                          {this.state.serialError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          name=\"serial\"\r\n                          error={this.state.serialError}\r\n                          placeholder=\"Serial\"\r\n                          defaultValue={selectedItem.serial}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"serial\");\r\n                          }}\r\n                          readOnly={this.state.editable}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Notes:</label>\r\n                        <Form.Input\r\n                          name=\"notes\"\r\n                          error={this.state.notesError}\r\n                          placeholder=\"Notes\"\r\n                          defaultValue={selectedItem.notes}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"notes\");\r\n                          }}\r\n                          readOnly={this.state.editable}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      {this.state.selectedItemId >= 0 ? (\r\n                        <Form.Field>\r\n                          <label>Date Created:</label>\r\n                          <Form.Input\r\n                            name=\"creationDate\"\r\n                            placeholder=\"creationDate\"\r\n                            defaultValue={this.formatItemDate(\r\n                              selectedItem.creationDate\r\n                            )}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                      ) : null}\r\n                      {!(this.state.selectedItem.expected === \"\") ? (\r\n                        <div>\r\n                          <Form.Field>\r\n                            <label>Transaction ID:</label>\r\n                            <Form.Input\r\n                              name=\"atid\"\r\n                              placeholder=\"Transaction ID\"\r\n                              defaultValue={selectedItem.atid}\r\n                              readOnly\r\n                            ></Form.Input>\r\n                          </Form.Field>\r\n                          <Form.Field>\r\n                            <label>Expected Return Date:</label>\r\n                            <Form.Input\r\n                              name=\"expected\"\r\n                              placeholder=\"Expected Return Date\"\r\n                              defaultValue={this.formatDate(\r\n                                selectedItem.expected\r\n                              )}\r\n                              readOnly\r\n                            ></Form.Input>\r\n                          </Form.Field>\r\n                        </div>\r\n                      ) : null}\r\n                    </Form>\r\n                  </Col>\r\n                </Row>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                {this.state.selectedItemId >= 0 ? (\r\n                  <Button\r\n                    className=\"btn btn-primary mr-auto\"\r\n                    toggle\r\n                    active={!this.state.editable}\r\n                    onClick={this.handleUserEditClick}\r\n                  >\r\n                    <Icon name=\"pencil\" />\r\n                    Edit\r\n                  </Button>\r\n                ) : null}\r\n                <Button\r\n                  id=\"add-icon-handler\"\r\n                  variant=\"primary\"\r\n                  onClick={this.handleSubmitClick}\r\n                >\r\n                  {this.state.isChangesMadeToModal ? (\r\n                    <Icon name=\"save\"></Icon>\r\n                  ) : null}\r\n                  {this.state.isChangesMadeToModal ? \"Save\" : \"Close\"}\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </Col>\r\n        </div>\r\n      </Col>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Inventory;\r\n","import React, { Component } from \"react\";\r\nimport { Divider, Button, Form, Dropdown } from \"semantic-ui-react\";\r\nimport { Col, Row, Modal } from \"react-bootstrap\";\r\nimport Table from \"../common/Table\";\r\n\r\nclass Staff extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.state = {\r\n      dataSet: [\r\n        {\r\n          fname: \"Seamus\",\r\n          lname: \"Rioux\",\r\n          courses: [\"Photography I\", \"Photography II\"],\r\n          roles: [\"Admin\", \"Staff\"],\r\n          id: \"54321\",\r\n          email: \"seamus.rioux3@gmail.com\",\r\n          phone: \"123-456-7890\",\r\n        },\r\n        {\r\n          fname: \"Greg\",\r\n          lname: \"Smelkov\",\r\n          courses: [\"Photography I\"],\r\n          roles: [\"Admin\"],\r\n          id: \"12345\",\r\n          email: \"greg@gmail.com\",\r\n          phone: \"123-456-7890\",\r\n        },\r\n      ],\r\n      columnSet: [\r\n        { title: \"First Name\", field: \"fname\" },\r\n        { title: \"Last Name\", field: \"lname\" },\r\n        {\r\n          title: \"Courses\",\r\n          field: \"courses\",\r\n          render: (rowData) => {\r\n            return rowData.courses.length > 0\r\n              ? rowData.courses.reduce((result, item) => (\r\n                  <>\r\n                    {result}\r\n                    {\", \"}\r\n                    {item}\r\n                  </>\r\n                ))\r\n              : \"\";\r\n          },\r\n        },\r\n        {\r\n          title: \"Roles\",\r\n          field: \"roles\",\r\n          render: (rowData) => {\r\n            return rowData.roles.length > 0\r\n              ? rowData.roles.reduce((result, item) => (\r\n                  <>\r\n                    {result}\r\n                    {\", \"}\r\n                    {item}\r\n                  </>\r\n                ))\r\n              : \"\";\r\n          },\r\n        },\r\n      ],\r\n      open: false,\r\n\r\n      firstNameError: false,\r\n      lastNameError: false,\r\n      idError: false,\r\n      emailError: false,\r\n\r\n      selectedUserId: null,\r\n      selectedUser: {\r\n        fname: \"\",\r\n        lname: \"\",\r\n        courses: [],\r\n        roles: [],\r\n        id: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n      },\r\n      courseOptions: [\r\n        { text: \"Photography I\", value: \"Photography I\" },\r\n        { text: \"Photography II\", value: \"Photography II\" },\r\n        { text: \"Documentary Image\", value: \"Documentary Image\" },\r\n      ],\r\n      roleOptions: [\r\n        { text: \"Admin\", value: \"Admin\" },\r\n        { text: \"Staff\", value: \"Staff\" },\r\n      ],\r\n    };\r\n  }\r\n\r\n  close = () =>\r\n    this.setState({\r\n      selectedUserId: null,\r\n      firstNameError: false,\r\n      lastNameError: false,\r\n      idError: false,\r\n      emailError: false,\r\n    });\r\n\r\n  handleChange = (e, userProp) => {\r\n    const val = e.target.value;\r\n    this.setState((prevState) => {\r\n      let selectedUser = Object.assign({}, prevState.selectedUser);\r\n      selectedUser[userProp] = val;\r\n      return { selectedUser };\r\n    });\r\n  };\r\n\r\n  handleUserSelectClick = (e, rowData) => {\r\n    this.setState({\r\n      selectedUserId: rowData.tableData.id,\r\n      selectedUser: this.state.dataSet[rowData.tableData.id],\r\n    });\r\n  };\r\n\r\n  handleAddUserClick = () => {\r\n    this.setState({\r\n      selectedUserId: -1,\r\n      selectedUser: {\r\n        fname: \"\",\r\n        lname: \"\",\r\n        courses: [],\r\n        roles: [],\r\n        id: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n      },\r\n    });\r\n  };\r\n\r\n  checkErrorUpdateDataSet = () => {\r\n    if (\r\n      !this.state.firstNameError &&\r\n      !this.state.lastNameError &&\r\n      !this.state.idError &&\r\n      !this.state.emailError\r\n    ) {\r\n      this.setState((prevState) => {\r\n        let dataSet = Array.from(prevState.dataSet);\r\n        if (this.state.selectedUserId >= 0) {\r\n          dataSet[this.state.selectedUserId] = this.state.selectedUser;\r\n        } else {\r\n          dataSet.push(this.state.selectedUser);\r\n        }\r\n        return { dataSet };\r\n      }, this.close);\r\n    }\r\n  };\r\n\r\n  handleSubmitClick = () => {\r\n    this.setState(\r\n      {\r\n        firstNameError: this.state.selectedUser.fname === \"\",\r\n        lastNameError: this.state.selectedUser.lname === \"\",\r\n        idError: this.state.selectedUser.id === \"\",\r\n        emailError: this.state.selectedUser.email === \"\",\r\n      },\r\n      this.checkErrorUpdateDataSet\r\n    );\r\n  };\r\n\r\n  handleDropdownAdditionRoles = (e, { value }) => {\r\n    this.setState((prevState) => ({\r\n      roleOptions: [{ text: value, value }, ...prevState.roleOptions],\r\n    }));\r\n  };\r\n\r\n  handleDropdownAdditionCourses = (e, { value }) => {\r\n    this.setState((prevState) => ({\r\n      courseOptions: [{ text: value, value }, ...prevState.courseOptions],\r\n    }));\r\n  };\r\n\r\n  handleDropdownChangeCourses = (e, { value }) => {\r\n    const val = value;\r\n    this.setState((prevState) => {\r\n      let selectedUser = Object.assign({}, prevState.selectedUser);\r\n      selectedUser.courses = val;\r\n      return { selectedUser };\r\n    });\r\n  };\r\n\r\n  handleDropdownChangeRoles = (e, { value }) => {\r\n    const val = value;\r\n    this.setState((prevState) => {\r\n      let selectedUser = Object.assign({}, prevState.selectedUser);\r\n      selectedUser.roles = val;\r\n      return { selectedUser };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const selectedUserId = this.state.selectedUserId;\r\n    const selectedUser = this.state.selectedUser;\r\n    const courseOptions = this.state.courseOptions;\r\n    const roleOptions = this.state.roleOptions;\r\n    return (\r\n      <Col className=\"stretch-h flex-col\">\r\n        <div className=\"top-bar\">\r\n          <Button basic onClick={this.handleAddUserClick}>\r\n            Create New Staff\r\n          </Button>\r\n          <Divider clearing />\r\n        </div>\r\n        <div className=\"page-content stretch-h\">\r\n          <Col className=\"stretch-h flex-col\">\r\n            <Table\r\n              data={Array.from(this.state.dataSet)}\r\n              columns={this.state.columnSet}\r\n              title={<h2>Staff</h2>}\r\n              onRowClick={(event, rowData) =>\r\n                this.handleUserSelectClick(event, rowData)\r\n              }\r\n            />\r\n            <Modal\r\n              centered\r\n              size={\"lg\"}\r\n              show={selectedUserId != null}\r\n              onHide={this.close}\r\n            >\r\n              <Modal.Header closeButton bsPrefix=\"modal-header\">\r\n                <Modal.Title>Staff</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <Row>\r\n                  <Col>\r\n                    <Form>\r\n                      <Form.Field>\r\n                        <label>\r\n                          First Name:\r\n                          {this.state.firstNameError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          error={this.state.firstNameError}\r\n                          name=\"fname\"\r\n                          placeholder=\"First Name\"\r\n                          defaultValue={selectedUser.fname}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"fname\");\r\n                          }}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>\r\n                          Last Name:\r\n                          {this.state.lastNameError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          error={this.state.lastNameError}\r\n                          name=\"lname\"\r\n                          placeholder=\"Last Name\"\r\n                          defaultValue={selectedUser.lname}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"lname\");\r\n                          }}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Courses:</label>\r\n                        <Dropdown\r\n                          placeholder=\"Courses\"\r\n                          name=\"courses\"\r\n                          fluid\r\n                          multiple\r\n                          search\r\n                          selection\r\n                          allowAdditions\r\n                          options={courseOptions}\r\n                          value={selectedUser.courses}\r\n                          onAddItem={this.handleDropdownAdditionCourses}\r\n                          onChange={this.handleDropdownChangeCourses}\r\n                        />\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Roles:</label>\r\n                        <Dropdown\r\n                          placeholder=\"Roles\"\r\n                          name=\"roles\"\r\n                          fluid\r\n                          multiple\r\n                          search\r\n                          selection\r\n                          allowAdditions\r\n                          options={roleOptions}\r\n                          value={selectedUser.roles}\r\n                          onAddItem={this.handleDropdownAdditionRoles}\r\n                          onChange={this.handleDropdownChangeRoles}\r\n                        />\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>\r\n                          UML ID:\r\n                          {this.state.idError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          name=\"id\"\r\n                          error={this.state.idError}\r\n                          placeholder=\"UML ID\"\r\n                          defaultValue={selectedUser.id}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"id\");\r\n                          }}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>\r\n                          Email:\r\n                          {this.state.emailError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          name=\"email\"\r\n                          error={this.state.emailError}\r\n                          placeholder=\"Email\"\r\n                          defaultValue={selectedUser.email}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"email\");\r\n                          }}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Phone Number:</label>\r\n                        <Form.Input\r\n                          type=\"phone\"\r\n                          placeholder=\"Phone Number\"\r\n                          defaultValue={selectedUser.phone}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"phone\");\r\n                          }}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                    </Form>\r\n                  </Col>\r\n                </Row>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button\r\n                  id=\"add-icon-handler\"\r\n                  variant=\"primary\"\r\n                  onClick={this.handleSubmitClick}\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </Col>\r\n        </div>\r\n      </Col>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Staff;\r\n","import React, { Component } from \"react\";\nimport { Form, Divider, Button } from \"semantic-ui-react\";\nimport { Col, Row, Modal } from \"react-bootstrap\";\nimport Table from \"../common/Table\";\n\nclass Transactions extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      columnSet: [\n        { title: \"First Name\", field: \"fname\" },\n        { title: \"Last Name\", field: \"lname\" },\n        { title: \"Item Name\", field: \"name\" },\n        { title: \"Item ID\", field: \"iid\" },\n        { title: \"Category\", field: \"category\" },\n        { title: \"Notes\", field: \"notes\" },\n        {\n          title: \"Checked Out\",\n          field: \"checkedOutDate\",\n          render: (rowData) => this.formatDate(rowData.checkedOutDate),\n          customFilterAndSearch: (term, rowData) =>\n            this.formatDateForSearchBar(rowData.checkedOutDate).indexOf(\n              term\n            ) !== -1 ||\n            this.formatDate(rowData.checkedOutDate).indexOf(term) !== -1,\n        },\n        {\n          title: \"Due Date\",\n          field: \"dueDate\",\n          render: (rowData) => this.formatDate(rowData.dueDate),\n          customFilterAndSearch: (term, rowData) =>\n            this.formatDateForSearchBar(rowData.dueDate).indexOf(term) !== -1 ||\n            this.formatDate(rowData.dueDate).indexOf(term) !== -1,\n        },\n        {\n          title: \"Checked In\",\n          field: \"checkedInDate\",\n          render: (rowData) => this.formatDate(rowData.checkedInDate),\n          defaultSort: \"dec\",\n          customFilterAndSearch: (term, rowData) =>\n            this.formatDateForSearchBar(rowData.checkedInDate).indexOf(term) !==\n              -1 || this.formatDate(rowData.checkedInDate).indexOf(term) !== -1,\n        },\n      ],\n      open: false,\n\n      selectedItemId: null,\n      selectedItem: {\n        fname: \"\",\n        lname: \"\",\n        name: \"\",\n        iid: \"\",\n        category: \"\",\n        notes: \"\",\n        checkedOutDate: \"\",\n        checkedInDate: \"\",\n        dueDate: \"\",\n      },\n    };\n  }\n\n  close = () =>\n    this.setState({\n      selectedItemId: null,\n    });\n\n  handleChange = (e, userProp) => {\n    const val = e.target.value;\n    this.setState((prevState) => {\n      let selectedItem = Object.assign({}, prevState.selectedItem);\n      selectedItem[userProp] = val;\n      return { selectedItem };\n    });\n  };\n\n  handleUserSelectClick = (e, rowData) => {\n    this.setState({\n      selectedItemId: rowData.tid,\n      selectedItem: rowData,\n    });\n  };\n\n  handleDropdownAddition = (e, { value }) => {\n    this.setState((prevState) => ({\n      courseOptions: [{ text: value, value }, ...prevState.courseOptions],\n    }));\n  };\n\n  handleDropdownChange = (e, { value }) => {\n    const val = value;\n    this.setState((prevState) => {\n      let selectedItem = Object.assign({}, prevState.selectedItem);\n      selectedItem.courses = val;\n      return { selectedItem };\n    });\n  };\n\n  formatDate = (dateString) => {\n    if (!dateString) return \"\";\n    const date = new Date(dateString);\n    return (\n      date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear()\n    );\n  };\n\n  formatDateForSearchBar = (dateString) => {\n    let monthNames = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    if (!dateString) return \"\";\n    const date = new Date(dateString);\n    console.log(date.getMonth());\n    return (\n      monthNames[date.getMonth()] +\n      \" \" +\n      date.getDate() +\n      \" \" +\n      date.getFullYear()\n    );\n  };\n\n  render() {\n    const selectedItemId = this.state.selectedItemId;\n    const selectedItem = this.state.selectedItem;\n\n    let transactions = Array.from(this.props.data.transactions);\n    transactions.forEach((transaction) => {\n      let result = this.props.data.users.filter(\n        (user) => transaction.uid === user.uid\n      );\n      transaction.fname = result[0] ? result[0].fname : \"\";\n      transaction.lname = result[0] ? result[0].lname : \"\";\n      result = this.props.data.items.filter(\n        (item) => transaction.iid === item.iid\n      );\n      transaction.name = result[0] ? result[0].name : \"\";\n      transaction.iid = result[0] ? result[0].iid : \"\";\n      transaction.category = result[0] ? result[0].category : \"\";\n\n      transaction.backgroundColor =\n        !transaction.checkedInDate &&\n        new Date(transaction.dueDate).getTime() < new Date().getTime()\n          ? \"mistyrose\"\n          : \"\";\n    });\n\n    return (\n      <Col className=\"stretch-h flex-col\">\n        <div className=\"top-bar\">\n          <Button basic href=\"#/\">\n            Create New Transaction\n          </Button>\n          <Divider clearing />\n        </div>\n        <div className=\"page-content stretch-h\">\n          <Col className=\"stretch-h flex-col\">\n            <Table\n              data={transactions}\n              columns={this.state.columnSet}\n              title={<h2>Transaction History</h2>}\n              onRowClick={(event, rowData) =>\n                this.handleUserSelectClick(event, rowData)\n              }\n            />\n            <Modal\n              centered\n              size={this.state.selectedItemId >= 0 ? \"lg\" : \"lg\"}\n              show={selectedItemId != null}\n              onHide={this.close}\n            >\n              <Modal.Header closeButton bsPrefix=\"modal-header\">\n                <Modal.Title>Item</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                <Row>\n                  <Col>\n                    <Form>\n                      <Form.Field>\n                        <label>First Name: </label>\n                        <Form.Input\n                          name=\"fname\"\n                          placeholder=\"First Name\"\n                          defaultValue={selectedItem.fname}\n                          readOnly\n                        ></Form.Input>\n                      </Form.Field>\n                      <Form.Field>\n                        <label>Last Name:</label>\n                        <Form.Input\n                          name=\"lname\"\n                          placeholder=\"Last Name\"\n                          defaultValue={selectedItem.lname}\n                          readOnly\n                        ></Form.Input>\n                      </Form.Field>\n                      <Form.Field>\n                        <label>Item Name:</label>\n                        <Form.Input\n                          name=\"name\"\n                          placeholder=\"name\"\n                          defaultValue={selectedItem.name}\n                          readOnly\n                        ></Form.Input>\n                      </Form.Field>\n                      <Form.Field>\n                        <label>Category:</label>\n                        <Form.Input\n                          name=\"category\"\n                          placeholder=\"Category\"\n                          defaultValue={selectedItem.category}\n                          readOnly\n                        ></Form.Input>\n                      </Form.Field>\n                      <Form.Field>\n                        <label>Item ID:</label>\n                        <Form.Input\n                          name=\"iid\"\n                          placeholder=\"Item ID\"\n                          defaultValue={selectedItem.iid}\n                          readOnly\n                        ></Form.Input>\n                      </Form.Field>\n                      <Form.Field>\n                        <label>Notes:</label>\n                        <Form.Input\n                          name=\"notes\"\n                          placeholder=\"Notes\"\n                          defaultValue={selectedItem.notes}\n                          readOnly\n                        ></Form.Input>\n                      </Form.Field>\n                      <Form.Field>\n                        <label>Checked Out:</label>\n                        <Form.Input\n                          name=\"checkedOut\"\n                          placeholder=\"Checked Out\"\n                          defaultValue={this.formatDate(\n                            selectedItem.checkedOutDate\n                          )}\n                          readOnly\n                        ></Form.Input>\n                      </Form.Field>\n                      <Form.Field>\n                        <label>Checked In:</label>\n                        <Form.Input\n                          name=\"checkedIn\"\n                          placeholder=\"Checked In\"\n                          error={!selectedItem.checkedInDate}\n                          defaultValue={this.formatDate(\n                            selectedItem.checkedInDate\n                          )}\n                          readOnly\n                        ></Form.Input>\n                      </Form.Field>\n                      <Form.Field>\n                        <label>Due Date:</label>\n                        <Form.Input\n                          name=\"due\"\n                          placeholder=\"Due Date\"\n                          defaultValue={this.formatDate(selectedItem.dueDate)}\n                          readOnly\n                        ></Form.Input>\n                      </Form.Field>\n                    </Form>\n                  </Col>\n                </Row>\n              </Modal.Body>\n              <Modal.Footer></Modal.Footer>\n            </Modal>\n          </Col>\n        </div>\n      </Col>\n    );\n  }\n}\n\nexport default Transactions;\n","import React, { Component } from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nimport Header from \"./common/Header\";\r\nimport Sidebar from \"./common/Sidebar\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport \"./App.scss\";\r\nimport CheckInOut from \"./pages/CheckInOut\";\r\nimport Users from \"./pages/Users\";\r\nimport Inventory from \"./pages/Inventory\";\r\nimport Staff from \"./pages/Staff\";\r\nimport Transactions from \"./pages/Transactions\";\r\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleDataUpdate = this.handleDataUpdate.bind(this);\r\n    this.state = {\r\n      data: {\r\n        users: [\r\n          {\r\n            fname: \"Seamus\",\r\n            lname: \"Rioux\",\r\n            uid: \"54321\",\r\n            email: \"srioux@email.com\",\r\n            phone: \"123-456-7891\",\r\n            notes: \"Optional notes for Seamus\",\r\n            creationDate: new Date().getTime(),\r\n            courses: [\"Photography I\"],\r\n          },\r\n          {\r\n            fname: \"Greg\",\r\n            lname: \"Smelkov\",\r\n            uid: \"12345\",\r\n            email: \"greg@email.com\",\r\n            phone: \"123-456-7891\",\r\n            notes: \"Optional notes for Greg\",\r\n            creationDate: new Date().getTime(),\r\n            courses: [\"Photography I\", \"Photography II\"],\r\n          },\r\n        ],\r\n        items: [\r\n          {\r\n            name: \"Canon 5D Mk II\",\r\n            iid: \"0001\",\r\n            brand: \"Canon\",\r\n            serial: \"123456\",\r\n            category: \"Camera\",\r\n            notes: \"\",\r\n            atid: \"3\",\r\n            courses: [\"Photography II\"],\r\n            creationDate: new Date().getTime(),\r\n          },\r\n          {\r\n            name: \"Canon 18-55 F4.0\",\r\n            iid: \"0002\",\r\n            brand: \"Canon\",\r\n            serial: \"223456\",\r\n            category: \"Lens\",\r\n            notes: \"Missing lens cap\",\r\n            atid: \"4\",\r\n            courses: [\"Photography I\", \"Photography II\"],\r\n            creationDate: new Date().getTime(),\r\n          },\r\n          {\r\n            name: \"Mavic Drone\",\r\n            iid: \"0003\",\r\n            brand: \"Mavic\",\r\n            serial: \"323456\",\r\n            category: \"Other\",\r\n            notes: \"Goes whirrr\",\r\n            atid: \"\",\r\n            courses: [\"Photography I\", \"Photography II\"],\r\n            creationDate: new Date().getTime(),\r\n          },\r\n          {\r\n            name: \"Canon 5D Mk II\",\r\n            iid: \"0004\",\r\n            brand: \"Canon\",\r\n            serial: \"423456\",\r\n            category: \"Camera\",\r\n            notes: \"\",\r\n            atid: \"\",\r\n            courses: [\"Photography II\"],\r\n            creationDate: new Date().getTime(),\r\n          },\r\n          {\r\n            name: \"Canon 18-55 F4.0\",\r\n            iid: \"0005\",\r\n            brand: \"Canon\",\r\n            serial: \"523456\",\r\n            category: \"Lens\",\r\n            notes: \"Missing lens cap\",\r\n            atid: \"\",\r\n            courses: [\"Photography I\", \"Photography II\"],\r\n            creationDate: new Date().getTime(),\r\n          },\r\n        ],\r\n        transactions: [\r\n          {\r\n            tid: \"1\",\r\n            uid: \"54321\",\r\n            iid: \"0001\",\r\n            checkedOutDate: new Date(\"7/22/2020\").getTime(),\r\n            dueDate: new Date(\"7/26/2020\").getTime(),\r\n            checkedInDate: new Date(\"7/24/2020\").getTime(),\r\n            notes: \"Example of transaction notes\",\r\n          },\r\n          {\r\n            tid: \"2\",\r\n            uid: \"54321\",\r\n            iid: \"0002\",\r\n            checkedOutDate: new Date(\"7/22/2020\").getTime(),\r\n            dueDate: new Date(\"7/26/2020\").getTime(),\r\n            checkedInDate: new Date(\"7/24/2020\").getTime(),\r\n            notes: \"Example of transaction notes\",\r\n          },\r\n          {\r\n            tid: \"3\",\r\n            uid: \"12345\",\r\n            iid: \"0001\",\r\n            checkedOutDate: new Date(\"7/25/2020\").getTime(),\r\n            dueDate: new Date(\"7/28/2020\").getTime(),\r\n            checkedInDate: \"\",\r\n            notes: \"Example of transaction notes\",\r\n          },\r\n          {\r\n            tid: \"4\",\r\n            uid: \"12345\",\r\n            iid: \"0002\",\r\n            checkedOutDate: new Date(\"7/25/2020\").getTime(),\r\n            dueDate: new Date(\"7/27/2020\").getTime(),\r\n            checkedInDate: \"\",\r\n            notes: \"Example of transaction notes\",\r\n          },\r\n        ],\r\n      },\r\n    };\r\n  }\r\n\r\n  handleDataUpdate(data) {\r\n    this.setState({ data });\r\n    // console.log(\"Data Updated\", data);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n        <Router>\r\n          <Container fluid className=\"no-gutters flex-col stretch-hw\">\r\n            <Header />\r\n            <Row className=\"flex-grow no-gutters\">\r\n              <Col md=\"auto\" className=\"no-gutters\">\r\n                <Sidebar />\r\n              </Col>\r\n              <Col className=\"no-gutters\">\r\n                <Switch>\r\n                  <Route exact path=\"/\">\r\n                    <CheckInOut\r\n                      data={this.state.data}\r\n                      onUpdateData={this.handleDataUpdate}\r\n                    />\r\n                  </Route>\r\n                  {/* <Route path=\"/checkinout\">\r\n                    <CheckInOut\r\n                      data={this.state.data}\r\n                      onUpdateData={this.handleDataUpdate}\r\n                    /> */}\r\n\r\n                  <Route path=\"/users\">\r\n                    <Users\r\n                      data={this.state.data}\r\n                      onUpdateData={this.handleDataUpdate}\r\n                    />\r\n                  </Route>\r\n                  <Route path=\"/inventory\">\r\n                    <Inventory\r\n                      data={this.state.data}\r\n                      onUpdateData={this.handleDataUpdate}\r\n                    />\r\n                  </Route>\r\n                  <Route path=\"/staff\">\r\n                    <Staff onUpdateData={this.handleDataUpdate} />\r\n                  </Route>\r\n                  <Route path=\"/transactions\">\r\n                    <Transactions\r\n                      data={this.state.data}\r\n                      onUpdateData={this.handleDataUpdate}\r\n                    />\r\n                  </Route>\r\n                </Switch>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Router>\r\n      </MuiPickersUtilsProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}