{"version":3,"sources":["common/Header.js","common/Sidebar.js","common/Table.js","pages/CheckInOut.js","pages/Users.js","pages/Inventory.js","pages/Staff.js","pages/Transactions.js","App.js","serviceWorker.js","index.js"],"names":["trigger","Icon","name","Header","Row","className","Col","Dropdown","icon","direction","Menu","Item","text","as","Link","to","Component","Sidebar","Navbar","variant","Nav","href","tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","style","color","Search","size","SortArrow","ThirdStateCheck","ViewColumn","Table","flexGrow","components","Toolbar","toolbarComponents","icons","title","this","columns","data","localization","toolbar","nRowsSelected","itemType","options","search","paging","rowStyle","rowData","backgroundColor","tableData","id","searchFieldStyle","onRowClick","onSelectionChange","CheckInOut","handleSearchResult","bind","handleTransactionsChanges","handleDataChanges","state","error","userFound","setState","onUpdateData","page","onDoneClick","selectedUser","users","onSuccessfulSearchResult","Container","handleChange","e","searchInput","target","value","handleClick","filter","user","uid","length","isError","Input","onChange","fluid","iconPosition","placeholder","Button","animated","onClick","Content","visible","hidden","React","CheckInOutViewUser","getTransactionsToShow","preSetTransactions","transactions","Array","from","item","checkedInDate","forEach","transaction","result","fname","lname","items","iid","category","Date","dueDate","getTime","getItemsToShow","preSetItems","atid","courses","some","course","includes","handleDoneClick","handleOpSelectClick","op","checked","isCheckoutModalOpen","close","selectedItemId","userProp","val","prevState","selectedItem","Object","assign","handleRowItemClick","rowClick","index","indexOf","find","tid","handleReturnSelectedItemsClick","map","handleCheckOutCartButtonClick","itemsToCheckOut","newTransactions","newAtid","Math","max","concat","t","toString","push","checkedOutDate","handleConfirmCheckOutButtonClick","formatDate","dateString","date","getMonth","getDate","getFullYear","selectedItemsToReturn","isCheckoutModalAllDateSelectorOpen","currentlyHeldColumnSet","field","render","itemsColumnSet","cartColumnSet","checkOutColumnSet","autoOk","inputVariant","label","format","InputAdornmentProps","position","handleDateChange","itemPanes","menuItem","event","selection","Set","sort","cartPanes","JSON","parse","stringify","Tab","panes","Modal","centered","selectedUserId","show","onHide","bsPrefix","Title","Body","IconButton","DatePicker","open","onClose","handleAllCheckoutDateChange","display","Footer","closeButton","Form","Field","nameError","defaultValue","readOnly","categoryError","notesError","notes","serialError","serial","Users","firstNameError","lastNameError","idError","emailError","editable","submitName","submitIcon","isChangesMadeToModal","handleUserEditClick","handleUserSelectClick","handleAddUserClick","email","phone","creationDate","tranactions","checkErrorUpdateDataSet","handleSubmitClick","handleDropdownAddition","courseOptions","handleDropdownChange","columnSet","defaultSort","reduce","table","basic","Divider","clearing","multiple","allowAdditions","onAddItem","disabled","toggle","active","Inventory","console","log","expected","formatDateForSearchBar","headerStyleGrey","fontSize","headerStyle","customFilterAndSearch","term","inventoryTablePanes","maxLength","Staff","dataSet","roles","handleDropdownAdditionRoles","roleOptions","handleDropdownAdditionCourses","handleDropdownChangeCourses","handleDropdownChangeRoles","type","Transactions","App","handleDataUpdate","utils","DateFnsUtils","md","exact","path","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2eb97694.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport { Dropdown, Icon } from \"semantic-ui-react\";\r\n\r\n// const sampleUser = { firstName: \"User\", lastName: \"Name\" };\r\n\r\nconst trigger = (\r\n  <h3>\r\n    User Name <Icon name=\"chevron down\" />\r\n  </h3>\r\n);\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <Row className=\"header\">\r\n        <Col>\r\n          <h2>\r\n            <Icon name=\"camera\" />\r\n            CageIMS\r\n          </h2>\r\n        </Col>\r\n        <Col>\r\n          <Dropdown\r\n            className=\"header-dropdown\"\r\n            trigger={trigger}\r\n            icon={null}\r\n            direction=\"left\"\r\n          >\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item icon=\"settings\" text=\"Settings\" />\r\n              <Dropdown.Item\r\n                icon=\"sign-out\"\r\n                text=\"Sign Out\"\r\n                as={Link}\r\n                to=\"/logout\"\r\n              />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport { Icon } from \"semantic-ui-react\";\r\nimport { Nav, Navbar } from \"react-bootstrap\";\r\n\r\nclass Sidebar extends Component {\r\n  render() {\r\n    return (\r\n      <Navbar variant=\"dark\" className=\"sidebar flex-column\">\r\n        <Nav className=\"flex-column\">\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#/\">\r\n              <h4>\r\n                <Icon name=\"sync\" />\r\n                Check In/Out\r\n              </h4>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#/users\">\r\n              <h4>\r\n                <Icon name=\"users\" />\r\n                Users\r\n              </h4>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#/inventory\">\r\n              <h4>\r\n                <Icon name=\"camera\" />\r\n                Inventory\r\n              </h4>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#/staff\">\r\n              <h4>\r\n                <Icon name=\"user\" />\r\n                Staff\r\n              </h4>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#/transactions\">\r\n              <h4>\r\n                <Icon name=\"history\" />\r\n                Transactions\r\n              </h4>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { Component } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { Icon } from \"semantic-ui-react\";\r\nimport { forwardRef } from \"react\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => (\r\n    <Clear style={{ color: \"#12558f\" }} {...props} ref={ref} />\r\n  )),\r\n  Search: forwardRef((props, ref) => (\r\n    <Icon\r\n      name=\"search\"\r\n      size=\"large\"\r\n      style={{ color: \"#12558f\" }}\r\n      {...props}\r\n      ref={ref}\r\n    />\r\n  )),\r\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\nclass Table extends Component {\r\n  render() {\r\n    return (\r\n      <MaterialTable\r\n        style={{ flexGrow: 1 }}\r\n        components={{\r\n          Toolbar: (props) => (\r\n            <div>\r\n              <div className=\"table-header MuiPaper-rounded MuiPaper-elevation2\">\r\n                <MTableToolbar {...props} />\r\n              </div>\r\n              {this.props.toolbarComponents}\r\n            </div>\r\n          ),\r\n        }}\r\n        icons={tableIcons}\r\n        title={this.props.title}\r\n        columns={this.props.columns}\r\n        data={this.props.data}\r\n        localization={{\r\n          toolbar: {\r\n            nRowsSelected:\r\n              \"{0} \" +\r\n              (this.props.itemType ? this.props.itemType : \"row\") +\r\n              \"(s) selected\",\r\n          },\r\n        }}\r\n        options={{\r\n          ...{\r\n            search: true,\r\n            paging: false,\r\n            rowStyle: (rowData) => ({\r\n              backgroundColor: rowData.backgroundColor\r\n                ? rowData.backgroundColor\r\n                : rowData.tableData.id % 2 === 0\r\n                ? \"#FAFAFA\"\r\n                : \"#FFFFFF\",\r\n            }),\r\n            searchFieldStyle: { backgroundColor: \"white\", color: \"black\" },\r\n          },\r\n          ...this.props.options,\r\n        }}\r\n        onRowClick={this.props.onRowClick}\r\n        onSelectionChange={this.props.onSelectionChange}\r\n      ></MaterialTable>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;\r\n","import React, { Component } from \"react\";\r\nimport { Input, Button, Icon, Form, Tab } from \"semantic-ui-react\";\r\nimport { Container, Col, Row, Modal } from \"react-bootstrap\";\r\nimport Table from \"../common/Table\";\r\nimport { KeyboardDatePicker, DatePicker } from \"@material-ui/pickers\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DateRange from \"@material-ui/icons/DateRange\";\r\n\r\nclass CheckInOut extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleSearchResult = this.handleSearchResult.bind(this);\r\n    this.handleTransactionsChanges = this.handleDataChanges.bind(this);\r\n    this.state = {\r\n      error: false,\r\n      userFound: \"\",\r\n      // {\r\n      //     fname: \"Greg\",\r\n      //     lname: \"Smelkov\",\r\n      //     uid: \"12345\",\r\n      //     courses: [\"Photography I\", \"Photography II\"],\r\n      // },\r\n    };\r\n  }\r\n\r\n  handleSearchResult(userFound) {\r\n    // console.log(userFound);\r\n    this.setState({ userFound });\r\n  }\r\n\r\n  handleDataChanges(data) {\r\n    this.props.onUpdateData(data);\r\n  }\r\n\r\n  render() {\r\n    const userFound = this.state.userFound;\r\n    let page;\r\n    if (!userFound)\r\n      page = (\r\n        <Search\r\n          users={this.props.data.users}\r\n          onSuccessfulSearchResult={this.handleSearchResult}\r\n        />\r\n      );\r\n    else\r\n      page = (\r\n        <CheckInOutViewUser\r\n          data={this.props.data}\r\n          onDoneClick={this.handleSearchResult}\r\n          selectedUser={this.state.userFound}\r\n          onUpdateData={this.handleTransactionsChanges}\r\n        />\r\n      );\r\n    return <Container className=\"checkinout\">{page}</Container>;\r\n  }\r\n}\r\n\r\nexport default CheckInOut;\r\n\r\nclass Search extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: false,\r\n    };\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ searchInput: e.target.value });\r\n  };\r\n\r\n  handleClick = () => {\r\n    const users = this.props.users.filter(\r\n      (user) => user.uid === this.state.searchInput\r\n    );\r\n    if (users.length > 0) {\r\n      this.props.onSuccessfulSearchResult(users[0]);\r\n    } else {\r\n      this.setState({ error: true });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const isError = this.state.error;\r\n    return (\r\n      <div className=\"checkinout-search\">\r\n        <h1>Check In/Out</h1>\r\n        <Input\r\n          error={this.state.error}\r\n          onChange={this.handleChange}\r\n          size=\"huge\"\r\n          fluid\r\n          icon=\"users\"\r\n          iconPosition=\"left\"\r\n          placeholder=\"Search by exact ID...\"\r\n        />\r\n        {isError && (\r\n          <div className=\"error-text\">\r\n            <p>Error: ID is invalid.</p>\r\n          </div>\r\n        )}\r\n        <Button size=\"big\" animated onClick={this.handleClick}>\r\n          <Button.Content visible>Search</Button.Content>\r\n          <Button.Content hidden>\r\n            <Icon name=\"search\" />\r\n          </Button.Content>\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass CheckInOutViewUser extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      op: \"\",\r\n\r\n      selectedItemId: null,\r\n      selectedItem: {},\r\n\r\n      selectedItemsToReturn: [],\r\n\r\n      transactions: [],\r\n      items: [],\r\n\r\n      newTransactions: [],\r\n\r\n      isCheckoutModalOpen: false,\r\n      isCheckoutModalAllDateSelectorOpen: false,\r\n    };\r\n  }\r\n\r\n  getTransactionsToShow = (preSetTransactions) => {\r\n    let transactions = Array.from(\r\n      (preSetTransactions\r\n        ? preSetTransactions\r\n        : this.props.data.transactions\r\n      ).filter(\r\n        (item) =>\r\n          item.uid === this.props.selectedUser.uid && !item.checkedInDate\r\n      )\r\n    );\r\n    transactions.forEach((transaction) => {\r\n      let result = this.props.data.users.filter(\r\n        (user) => transaction.uid === user.uid\r\n      );\r\n      transaction.fname = result[0] ? result[0].fname : \"\";\r\n      transaction.lname = result[0] ? result[0].lname : \"\";\r\n      result = this.props.data.items.filter(\r\n        (item) => transaction.iid === item.iid\r\n      );\r\n      transaction.name = result[0] ? result[0].name : \"\";\r\n      transaction.category = result[0] ? result[0].category : \"\";\r\n\r\n      transaction.backgroundColor =\r\n        !transaction.checkedInDate &&\r\n        new Date(transaction.dueDate).getTime() < new Date().getTime()\r\n          ? \"mistyrose\"\r\n          : \"\";\r\n    });\r\n    return transactions;\r\n  };\r\n\r\n  getItemsToShow = (preSetItems) => {\r\n    let items = Array.from(\r\n      (preSetItems ? preSetItems : this.props.data.items).filter(\r\n        (item) =>\r\n          !item.atid &&\r\n          this.props.selectedUser.courses.some((course) =>\r\n            item.courses.includes(course)\r\n          )\r\n      )\r\n    );\r\n    return items;\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      transactions: this.getTransactionsToShow(),\r\n      items: this.getItemsToShow(),\r\n    });\r\n  }\r\n\r\n  handleDoneClick = () => {\r\n    this.props.onDoneClick(\"\");\r\n  };\r\n\r\n  handleOpSelectClick = (e, op) => {\r\n    this.state.transactions.forEach((transaction) => {\r\n      if (transaction.tableData) transaction.tableData.checked = false;\r\n    });\r\n    this.state.items.forEach((item) => {\r\n      if (item.tableData) item.tableData.checked = false;\r\n    });\r\n    this.setState({ op, isCheckoutModalOpen: false });\r\n  };\r\n\r\n  close = () =>\r\n    this.setState({\r\n      selectedItemId: null,\r\n      isCheckoutModalOpen: false,\r\n    });\r\n\r\n  handleChange = (e, userProp) => {\r\n    const val = e.target.value;\r\n    this.setState((prevState) => {\r\n      let selectedItem = Object.assign({}, prevState.selectedItem);\r\n      selectedItem[userProp] = val;\r\n      return { selectedItem };\r\n    });\r\n  };\r\n\r\n  handleRowItemClick = (e, rowData, rowClick = true) => {\r\n    if (this.state.op === \"checkin\") {\r\n      let transactions = this.state.transactions;\r\n      const index = transactions.indexOf(rowData);\r\n      transactions[index].tableData.checked = !transactions[index].tableData\r\n        .checked;\r\n      this.setState({ transactions });\r\n    } else if (this.state.op === \"checkout\") {\r\n      let items = this.state.items;\r\n      const item = items.find((item) => item.iid === rowData.iid);\r\n      if (rowClick) item.tableData.checked = !item.tableData.checked;\r\n      this.setState({ items });\r\n    } else {\r\n      this.setState({\r\n        selectedItemId: rowData.tid,\r\n        selectedItem: rowData,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleReturnSelectedItemsClick = (e) => {\r\n    let data = Object.assign({}, this.props.data);\r\n    const completedTransactionIds = this.state.transactions\r\n      .filter((transaction) => transaction.tableData?.checked)\r\n      .map((transaction) => transaction.tid);\r\n    completedTransactionIds.forEach((id) => {\r\n      let transaction = data.transactions.find(\r\n        (transaction) => transaction.tid === id\r\n      );\r\n      transaction.checkedInDate = new Date().getTime();\r\n      let item = data.items.find((item) => item.iid === transaction.iid);\r\n      item.atid = \"\";\r\n    });\r\n\r\n    this.props.onUpdateData(data);\r\n\r\n    this.setState(\r\n      {\r\n        transactions: this.getTransactionsToShow(),\r\n        items: this.getItemsToShow(),\r\n      },\r\n      this.handleOpSelectClick(e, \"\")\r\n    );\r\n  };\r\n\r\n  handleCheckOutCartButtonClick = (e) => {\r\n    let data = Object.assign({}, this.props.data);\r\n    const itemsToCheckOut = this.state.items.filter(\r\n      (item) => item.tableData?.checked\r\n    );\r\n    let newTransactions = [];\r\n    itemsToCheckOut.forEach((item) => {\r\n      let newAtid = (\r\n        Math.max(\r\n          ...data.transactions.concat(newTransactions).map((t) => t.tid)\r\n        ) + 1\r\n      ).toString();\r\n      newTransactions.push({\r\n        tid: newAtid,\r\n        uid: this.props.selectedUser.uid,\r\n        iid: item.iid,\r\n        checkedOutDate: new Date().getTime(),\r\n        dueDate: null,\r\n        checkedInDate: \"\",\r\n      });\r\n    });\r\n\r\n    this.setState({ newTransactions, isCheckoutModalOpen: true });\r\n  };\r\n\r\n  handleConfirmCheckOutButtonClick = (e) => {\r\n    if (this.state.newTransactions.some((transaction) => !transaction.dueDate))\r\n      return;\r\n\r\n    let data = Object.assign({}, this.props.data);\r\n    data.transactions = data.transactions.concat(this.state.newTransactions);\r\n    this.state.newTransactions.forEach(\r\n      (transaction) =>\r\n        (data.items.find((item) => item.iid === transaction.iid).atid =\r\n          transaction.tid)\r\n    );\r\n\r\n    this.props.onUpdateData(data);\r\n    this.setState(\r\n      {\r\n        transactions: this.getTransactionsToShow(data.transactions),\r\n        items: this.getItemsToShow(),\r\n      },\r\n      this.handleOpSelectClick(e, \"\")\r\n    );\r\n  };\r\n\r\n  formatDate = (dateString) => {\r\n    if (!dateString) return \"\";\r\n    const date = new Date(dateString);\r\n    return (\r\n      date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear()\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const selectedItemId = this.state.selectedItemId;\r\n    const selectedItem = this.state.selectedItem;\r\n\r\n    const handleDateChange = (date, iid) => {\r\n      let newTransactions = Array.from(this.state.newTransactions);\r\n      newTransactions.find(\r\n        (transaction) => transaction.iid === iid\r\n      ).dueDate = date.getTime();\r\n      this.setState({ newTransactions });\r\n    };\r\n\r\n    const handleAllCheckoutDateChange = (date) => {\r\n      let newTransactions = Array.from(this.state.newTransactions);\r\n      newTransactions.forEach(\r\n        (transaction) => (transaction.dueDate = date.getTime())\r\n      );\r\n      this.setState({\r\n        newTransactions,\r\n        isCheckoutModalAllDateSelectorOpen: false,\r\n      });\r\n    };\r\n\r\n    const currentlyHeldColumnSet = [\r\n      { title: \"Item Name\", field: \"name\" },\r\n      { title: \"Category\", field: \"category\" },\r\n      { title: \"Transaction Notes\", field: \"notes\" },\r\n      {\r\n        title: \"Checked Out\",\r\n        field: \"checkedOutDate\",\r\n        render: (rowData) => this.formatDate(rowData.checkedOutDate),\r\n      },\r\n      {\r\n        title: \"Due Date\",\r\n        field: \"dueDate\",\r\n        render: (rowData) => this.formatDate(rowData.dueDate),\r\n      },\r\n    ];\r\n\r\n    const itemsColumnSet = [\r\n      { title: \"Item Name\", field: \"name\" },\r\n      { title: \"Category\", field: \"category\" },\r\n      { title: \"Notes\", field: \"notes\" },\r\n    ];\r\n\r\n    const cartColumnSet = [\r\n      { title: \"Item Name\", field: \"name\" },\r\n      { title: \"Category\", field: \"category\" },\r\n    ];\r\n\r\n    const checkOutColumnSet = [\r\n      { title: \"Item Name\", field: \"name\" },\r\n      { title: \"Category\", field: \"category\" },\r\n      {\r\n        title: \"Due Date\",\r\n        field: \"dueDate\",\r\n        render: (rowData) => (\r\n          <KeyboardDatePicker\r\n            autoOk\r\n            error={\r\n              !this.state.newTransactions.find(\r\n                (transaction) => rowData.iid === transaction.iid\r\n              ).dueDate\r\n            }\r\n            variant=\"inline\"\r\n            inputVariant=\"outlined\"\r\n            label=\"Select due date\"\r\n            format=\"MM/dd/yyyy\"\r\n            value={\r\n              this.state.newTransactions.find(\r\n                (transaction) => rowData.iid === transaction.iid\r\n              ).dueDate\r\n                ? new Date(\r\n                    this.state.newTransactions.find(\r\n                      (transaction) => rowData.iid === transaction.iid\r\n                    ).dueDate\r\n                  )\r\n                : null\r\n            }\r\n            InputAdornmentProps={{ position: \"end\" }}\r\n            onChange={(date) => handleDateChange(date, rowData.iid)}\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n\r\n    let itemPanes = [\r\n      {\r\n        menuItem: \"All\",\r\n        render: () => (\r\n          <Table\r\n            data={this.state.items}\r\n            itemType={\"item\"}\r\n            columns={itemsColumnSet}\r\n            title={<h3>All</h3>}\r\n            onRowClick={(event, rowData) =>\r\n              this.handleRowItemClick(event, rowData)\r\n            }\r\n            onSelectionChange={(event, rowData) => {\r\n              this.handleRowItemClick(event, rowData, false);\r\n            }}\r\n            options={{ selection: true }}\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n\r\n    const categories = [\r\n      ...new Set(this.state.items.map((item) => item.category)),\r\n    ].sort();\r\n    categories.forEach((category) => {\r\n      itemPanes.push({\r\n        menuItem: category,\r\n        render: () => (\r\n          <Table\r\n            data={this.state.items.filter((item) => item.category === category)}\r\n            itemType={\"item\"}\r\n            columns={itemsColumnSet}\r\n            title={<h3>{category}</h3>}\r\n            onRowClick={(event, rowData) =>\r\n              this.handleRowItemClick(event, rowData)\r\n            }\r\n            onSelectionChange={(event, rowData) => {\r\n              this.handleRowItemClick(event, rowData, false);\r\n            }}\r\n            options={{ selection: true }}\r\n          />\r\n        ),\r\n      });\r\n    });\r\n\r\n    const cartPanes = [\r\n      {\r\n        menuItem: \"\",\r\n        render: () => (\r\n          <Table\r\n            data={JSON.parse(\r\n              JSON.stringify(\r\n                this.state.items.filter((item) => item.tableData?.checked)\r\n              )\r\n            )}\r\n            itemType={\"item\"}\r\n            columns={cartColumnSet}\r\n            title={<h3>Cart</h3>}\r\n            onRowClick={(event, rowData) =>\r\n              this.handleRowItemClick(event, rowData)\r\n            }\r\n            onSelectionChange={(event, rowData) => {\r\n              this.handleRowItemClick(event, rowData, false);\r\n            }}\r\n            options={{ selection: true, search: false }}\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n\r\n    let pageOp;\r\n    if (this.state.op === \"checkin\") {\r\n      pageOp = (\r\n        <div className=\"checkinout-viewuser\">\r\n          <Row className=\"page-menu\">\r\n            <h1>\r\n              {this.props.selectedUser.fname +\r\n                \" \" +\r\n                this.props.selectedUser.lname}{\" \"}\r\n              -- Check In/Return\r\n            </h1>\r\n            <Button\r\n              onClick={(e) => {\r\n                this.handleOpSelectClick(e, \"\");\r\n              }}\r\n              size=\"big\"\r\n              animated\r\n              color=\"green\"\r\n            >\r\n              <Button.Content visible>Back</Button.Content>\r\n              <Button.Content hidden>\r\n                <Icon name=\"arrow circle left\" />\r\n              </Button.Content>\r\n            </Button>\r\n          </Row>\r\n          <Row>\r\n            <div className=\"current-table-container\">\r\n              <Table\r\n                data={this.state.transactions}\r\n                itemType={\"item\"}\r\n                columns={currentlyHeldColumnSet}\r\n                title={<h3>Currently held items:</h3>}\r\n                onRowClick={(event, rowData) =>\r\n                  this.handleRowItemClick(event, rowData)\r\n                }\r\n                options={{ selection: true }}\r\n              />\r\n            </div>\r\n          </Row>\r\n          <Row className=\"flex-end\">\r\n            <Button\r\n              onClick={(e) => {\r\n                this.handleOpSelectClick(e, \"\");\r\n              }}\r\n              color=\"red\"\r\n              size=\"big\"\r\n            >\r\n              <Button.Content visible>Cancel</Button.Content>\r\n            </Button>\r\n            <Button\r\n              onClick={(e) => {\r\n                this.handleReturnSelectedItemsClick(e);\r\n              }}\r\n              color=\"orange\"\r\n              size=\"big\"\r\n            >\r\n              <Button.Content visible>Return Selected Items</Button.Content>\r\n            </Button>\r\n          </Row>\r\n        </div>\r\n      );\r\n    } else if (this.state.op === \"checkout\") {\r\n      pageOp = (\r\n        <div className=\"checkinout-viewuser\">\r\n          <Row className=\"page-menu\">\r\n            <h1>\r\n              {this.props.selectedUser.fname +\r\n                \" \" +\r\n                this.props.selectedUser.lname}{\" \"}\r\n              -- Check Out/Borrow\r\n            </h1>\r\n            <Button\r\n              onClick={(e) => {\r\n                this.handleOpSelectClick(e, \"\");\r\n              }}\r\n              size=\"big\"\r\n              animated\r\n              color=\"green\"\r\n            >\r\n              <Button.Content visible>Back</Button.Content>\r\n              <Button.Content hidden>\r\n                <Icon name=\"arrow circle left\" />\r\n              </Button.Content>\r\n            </Button>\r\n          </Row>\r\n          <Row>\r\n            <div className=\"checkout-table-wrapper\">\r\n              <Tab className=\"checkout-inv-table\" panes={itemPanes} />\r\n              <Tab className=\"checkout-cart-table\" panes={cartPanes} />\r\n              <Modal\r\n                centered\r\n                size={this.state.selectedUserId >= 0 ? \"xl\" : \"lg\"}\r\n                show={this.state.isCheckoutModalOpen}\r\n                onHide={this.close}\r\n              >\r\n                <Modal.Header bsPrefix=\"modal-header\">\r\n                  <Modal.Title>Check Out</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                  <Row>\r\n                    <Col>\r\n                      <Table\r\n                        data={JSON.parse(\r\n                          JSON.stringify(\r\n                            this.state.items.filter(\r\n                              (item) => item.tableData?.checked\r\n                            )\r\n                          )\r\n                        )}\r\n                        itemType={\"item\"}\r\n                        columns={checkOutColumnSet}\r\n                        title={<h3>Cart</h3>}\r\n                        options={{ selection: false, search: false }}\r\n                        toolbarComponents={\r\n                          <div className=\"toolbarSetAllDate\">\r\n                            <div>\r\n                              Set all due dates:\r\n                              <IconButton\r\n                                onClick={() =>\r\n                                  this.setState({\r\n                                    isCheckoutModalAllDateSelectorOpen: true,\r\n                                  })\r\n                                }\r\n                              >\r\n                                <DateRange />\r\n                              </IconButton>\r\n                              <DatePicker\r\n                                autoOk\r\n                                variant=\"inline\"\r\n                                // ERROR: issue with open not finding correct render location,\r\n                                //   seems like it might be resolved in next datepicker update\r\n                                //   update plugin when possible\r\n                                //   otherwise will work temporarily\r\n                                open={\r\n                                  this.state.isCheckoutModalAllDateSelectorOpen\r\n                                }\r\n                                onClose={() =>\r\n                                  this.setState({\r\n                                    isCheckoutModalAllDateSelectorOpen: false,\r\n                                  })\r\n                                }\r\n                                format=\"MM/dd/yyyy\"\r\n                                onChange={(date) =>\r\n                                  handleAllCheckoutDateChange(date)\r\n                                }\r\n                                value={null}\r\n                                style={{ display: \"none\" }}\r\n                              />\r\n                            </div>\r\n                          </div>\r\n                        }\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                  <Button\r\n                    onClick={(e) => {\r\n                      this.close();\r\n                    }}\r\n                    color=\"red\"\r\n                    size=\"big\"\r\n                  >\r\n                    <Button.Content visible>Cancel</Button.Content>\r\n                  </Button>\r\n                  <Button\r\n                    onClick={(e) => {\r\n                      this.handleConfirmCheckOutButtonClick(e);\r\n                    }}\r\n                    color=\"blue\"\r\n                    size=\"big\"\r\n                  >\r\n                    <Button.Content visible>Confirm Check Out</Button.Content>\r\n                  </Button>\r\n                </Modal.Footer>\r\n              </Modal>\r\n            </div>\r\n          </Row>\r\n          <Row className=\"flex-end\">\r\n            <Button\r\n              onClick={(e) => {\r\n                this.handleOpSelectClick(e, \"\");\r\n              }}\r\n              color=\"red\"\r\n              size=\"big\"\r\n            >\r\n              <Button.Content visible>Cancel</Button.Content>\r\n            </Button>\r\n            <Button\r\n              onClick={(e) => {\r\n                this.handleCheckOutCartButtonClick(e);\r\n              }}\r\n              color=\"blue\"\r\n              size=\"big\"\r\n            >\r\n              <Button.Content visible>Check Out Selected Items</Button.Content>\r\n            </Button>\r\n          </Row>\r\n        </div>\r\n      );\r\n    } else {\r\n      pageOp = (\r\n        <div className=\"checkinout-viewuser\">\r\n          <Row className=\"page-menu\">\r\n            <h1>\r\n              {this.props.selectedUser.fname +\r\n                \" \" +\r\n                this.props.selectedUser.lname}\r\n            </h1>\r\n            <Button\r\n              onClick={this.handleDoneClick}\r\n              size=\"big\"\r\n              animated\r\n              color=\"green\"\r\n            >\r\n              <Button.Content visible>Complete Transactions</Button.Content>\r\n              <Button.Content hidden>\r\n                <Icon name=\"check\" />\r\n              </Button.Content>\r\n            </Button>\r\n          </Row>\r\n          <Row>\r\n            <div className=\"current-table-container\">\r\n              <Table\r\n                data={this.state.transactions}\r\n                itemType={\"item\"}\r\n                columns={currentlyHeldColumnSet}\r\n                title={<h3>Currently held items:</h3>}\r\n                onRowClick={(event, rowData) =>\r\n                  this.handleRowItemClick(event, rowData)\r\n                }\r\n              />\r\n              <Modal\r\n                centered\r\n                size={this.state.selectedItemId >= 0 ? \"lg\" : \"lg\"}\r\n                show={selectedItemId != null}\r\n                onHide={this.close}\r\n              >\r\n                <Modal.Header closeButton bsPrefix=\"modal-header\">\r\n                  <Modal.Title>Item</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                  <Row>\r\n                    <Col>\r\n                      <Form>\r\n                        <Form.Field>\r\n                          <label>\r\n                            First Name:\r\n                            {this.state.nameError && (\r\n                              <span className=\"error-text modal-label-error-text\">\r\n                                Error: Field cannot be empty.\r\n                              </span>\r\n                            )}\r\n                          </label>\r\n                          <Form.Input\r\n                            error={this.state.nameError}\r\n                            name=\"fname\"\r\n                            placeholder=\"First Name\"\r\n                            defaultValue={selectedItem.fname}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                          <label>\r\n                            Last Name:\r\n                            {this.state.nameError && (\r\n                              <span className=\"error-text modal-label-error-text\">\r\n                                Error: Field cannot be empty.\r\n                              </span>\r\n                            )}\r\n                          </label>\r\n                          <Form.Input\r\n                            error={this.state.nameError}\r\n                            name=\"lname\"\r\n                            placeholder=\"Last Name\"\r\n                            defaultValue={selectedItem.lname}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                          <label>\r\n                            Item Name:\r\n                            {this.state.categoryError && (\r\n                              <span className=\"error-text modal-label-error-text\">\r\n                                Error: Field cannot be empty.\r\n                              </span>\r\n                            )}\r\n                          </label>\r\n                          <Form.Input\r\n                            error={this.state.categoryError}\r\n                            name=\"name\"\r\n                            placeholder=\"name\"\r\n                            defaultValue={selectedItem.category}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                          <label>\r\n                            Category:\r\n                            {this.state.notesError && (\r\n                              <span className=\"error-text modal-label-error-text\">\r\n                                Error: Field cannot be empty.\r\n                              </span>\r\n                            )}\r\n                          </label>\r\n                          <Form.Input\r\n                            name=\"category\"\r\n                            error={this.state.notesError}\r\n                            placeholder=\"Category\"\r\n                            defaultValue={selectedItem.notes}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                          <label>\r\n                            Serial:\r\n                            {this.state.serialError && (\r\n                              <span className=\"error-text modal-label-error-text\">\r\n                                Error: Field cannot be empty.\r\n                              </span>\r\n                            )}\r\n                          </label>\r\n                          <Form.Input\r\n                            name=\"serial\"\r\n                            error={this.state.serialError}\r\n                            placeholder=\"Serial\"\r\n                            defaultValue={selectedItem.serial}\r\n                            onChange={(e) => {\r\n                              this.handleChange(e, \"serial\");\r\n                            }}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                          <label>\r\n                            Notes:\r\n                            {this.state.notesError && (\r\n                              <span className=\"error-text modal-label-error-text\">\r\n                                Error: Field cannot be empty.\r\n                              </span>\r\n                            )}\r\n                          </label>\r\n                          <Form.Input\r\n                            name=\"notes\"\r\n                            error={this.state.notesError}\r\n                            placeholder=\"Notes\"\r\n                            defaultValue={selectedItem.notes}\r\n                            onChange={(e) => {\r\n                              this.handleChange(e, \"notes\");\r\n                            }}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                          <label>Checked Out:</label>\r\n                          <Form.Input\r\n                            name=\"checkedOut\"\r\n                            placeholder=\"Checked Out\"\r\n                            defaultValue={selectedItem.checkedOutDate}\r\n                            onChange={(e) => {\r\n                              this.handleChange(e, \"checkedOutDate\");\r\n                            }}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                          <label>Checked In:</label>\r\n                          <Form.Input\r\n                            name=\"checkedIn\"\r\n                            placeholder=\"Checked In\"\r\n                            error={!selectedItem.checkedInDate}\r\n                            defaultValue={selectedItem.checkedInDate}\r\n                            onChange={(e) => {\r\n                              this.handleChange(e, \"checkedInDate\");\r\n                            }}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                          <label>Due Date:</label>\r\n                          <Form.Input\r\n                            name=\"due\"\r\n                            placeholder=\"Due Date\"\r\n                            defaultValue={selectedItem.dueDate}\r\n                            onChange={(e) => {\r\n                              this.handleChange(e, \"dueDate\");\r\n                            }}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                      </Form>\r\n                    </Col>\r\n                  </Row>\r\n                </Modal.Body>\r\n                <Modal.Footer></Modal.Footer>\r\n              </Modal>\r\n            </div>\r\n          </Row>\r\n          <Row className=\"checkinout-buttons\">\r\n            <Button\r\n              onClick={(e) => {\r\n                this.handleOpSelectClick(e, \"checkin\");\r\n              }}\r\n              color=\"orange\"\r\n              size=\"big\"\r\n            >\r\n              <Button.Content visible>Return Items</Button.Content>\r\n            </Button>\r\n            <Button\r\n              onClick={(e) => {\r\n                this.handleOpSelectClick(e, \"checkout\");\r\n              }}\r\n              color=\"blue\"\r\n              size=\"big\"\r\n            >\r\n              <Button.Content visible>Check Out Items</Button.Content>\r\n            </Button>\r\n          </Row>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return pageOp;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Divider, Button, Form, Dropdown, Tab, Icon } from \"semantic-ui-react\";\r\nimport { Col, Row, Modal } from \"react-bootstrap\";\r\nimport Table from \"../common/Table\";\r\n\r\nclass Users extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.state = {\r\n      columnSet: [\r\n        { title: \"Last Name\", field: \"lname\", defaultSort: \"asc\" },\r\n        { title: \"First Name\", field: \"fname\" },\r\n        {\r\n          title: \"Courses\",\r\n          field: \"courses\",\r\n          render: (rowData) => {\r\n            return rowData.courses.length > 0\r\n              ? rowData.courses.reduce((result, item) => (\r\n                  <>\r\n                    {result}\r\n                    {\", \"}\r\n                    {item}\r\n                  </>\r\n                ))\r\n              : \"\";\r\n          },\r\n        },\r\n      ],\r\n      open: false,\r\n\r\n      firstNameError: false,\r\n      lastNameError: false,\r\n      idError: false,\r\n      emailError: false,\r\n      editable: true,\r\n      isChangesMadeToModal: false,\r\n\r\n      selectedUserId: null,\r\n      selectedUser: {\r\n        fname: \"\",\r\n        lname: \"\",\r\n        courses: [],\r\n        uid: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        notes: \"\",\r\n        transactions: [],\r\n        creationDate: \"\",\r\n      },\r\n      courseOptions: [\r\n        { text: \"Photography I\", value: \"Photography I\" },\r\n        { text: \"Photography II\", value: \"Photography II\" },\r\n        { text: \"Documentary Image\", value: \"Documentary Image\" },\r\n      ],\r\n    };\r\n  }\r\n\r\n  close = () =>\r\n    this.setState({\r\n      selectedUserId: null,\r\n      firstNameError: false,\r\n      lastNameError: false,\r\n      idError: false,\r\n      emailError: false,\r\n      editable: true,\r\n      submitName: \"Close\",\r\n      submitIcon: null,\r\n      isChangesMadeToModal: false,\r\n    });\r\n\r\n  handleChange = (e, userProp) => {\r\n    const val = e.target.value;\r\n    this.setState((prevState) => {\r\n      let selectedUser = Object.assign({}, prevState.selectedUser);\r\n      selectedUser[userProp] = val;\r\n      return { selectedUser };\r\n    });\r\n    this.setState({\r\n      isChangesMadeToModal: true,\r\n    });\r\n  };\r\n\r\n  handleUserEditClick = () => {\r\n    this.setState({\r\n      editable: !this.state.editable,\r\n    });\r\n  };\r\n\r\n  handleUserSelectClick = (e, rowData) => {\r\n    this.setState({\r\n      selectedUserId: rowData.tableData.id,\r\n      selectedUser: this.props.data.users[rowData.tableData.id],\r\n    });\r\n    this.setState((prevState) => {\r\n      let selectedUser = Object.assign({}, prevState.selectedUser);\r\n      let transactions = Array.from(\r\n        this.props.data.transactions.filter(\r\n          (name) => name.uid === selectedUser.uid\r\n        )\r\n      );\r\n      transactions.forEach((transaction) => {\r\n        transaction.backgroundColor =\r\n          !transaction.checkedInDate &&\r\n          new Date(transaction.dueDate).getTime() < new Date().getTime()\r\n            ? \"mistyrose\"\r\n            : \"\";\r\n      });\r\n      selectedUser[\"transactions\"] = transactions;\r\n      return { selectedUser };\r\n    });\r\n  };\r\n\r\n  handleAddUserClick = () => {\r\n    this.setState({\r\n      selectedUserId: -1,\r\n      selectedUser: {\r\n        fname: \"\",\r\n        lname: \"\",\r\n        courses: [],\r\n        uid: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        notes: \"\",\r\n        creationDate: \"\",\r\n        tranactions: [],\r\n      },\r\n      editable: false,\r\n    });\r\n  };\r\n\r\n  checkErrorUpdateDataSet = () => {\r\n    if (\r\n      !this.state.firstNameError &&\r\n      !this.state.lastNameError &&\r\n      !this.state.idError &&\r\n      !this.state.emailError\r\n    ) {\r\n      let data = Object.assign({}, this.props.data);\r\n      if (this.state.selectedUserId >= 0) {\r\n        data.users[this.state.selectedUserId] = this.state.selectedUser;\r\n      } else {\r\n        this.state.selectedUser.creationDate = new Date().getTime();\r\n        data.users.push(this.state.selectedUser);\r\n      }\r\n      this.props.onUpdateData(data);\r\n      this.close();\r\n    }\r\n  };\r\n\r\n  handleSubmitClick = () => {\r\n    this.setState(\r\n      {\r\n        firstNameError: this.state.selectedUser.fname === \"\",\r\n        lastNameError: this.state.selectedUser.lname === \"\",\r\n        idError: this.state.selectedUser.uid === \"\",\r\n        emailError: this.state.selectedUser.email === \"\",\r\n      },\r\n      this.checkErrorUpdateDataSet\r\n    );\r\n  };\r\n\r\n  handleDropdownAddition = (e, { value }) => {\r\n    this.setState((prevState) => ({\r\n      courseOptions: [{ text: value, value }, ...prevState.courseOptions],\r\n    }));\r\n  };\r\n\r\n  handleDropdownChange = (e, { value }) => {\r\n    const val = value;\r\n    this.setState((prevState) => {\r\n      let selectedUser = Object.assign({}, prevState.selectedUser);\r\n      selectedUser.courses = val;\r\n      return { selectedUser };\r\n    });\r\n  };\r\n\r\n  formatDate = (dateString) => {\r\n    if (!dateString) return \"\";\r\n    const date = new Date(dateString);\r\n    return (\r\n      date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear()\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const selectedUserId = this.state.selectedUserId;\r\n    const selectedUser = this.state.selectedUser;\r\n    let table;\r\n    if (this.state.selectedUserId != null) {\r\n      if (this.state.selectedUserId >= 0) {\r\n        const panes = [\r\n          {\r\n            menuItem: \"Due Items\",\r\n            render: () => (\r\n              <Table\r\n                title={\r\n                  this.state.selectedUser.fname +\r\n                  \" \" +\r\n                  this.state.selectedUser.lname\r\n                }\r\n                columns={[\r\n                  { title: \"Item ID\", field: \"iid\" },\r\n                  { title: \"Transaction ID\", field: \"tid\" },\r\n                  {\r\n                    title: \"Checked Out Date\",\r\n                    field: \"checkedOutDate\",\r\n                    render: (rowData) =>\r\n                      this.formatDate(rowData.checkedOutDate),\r\n                  },\r\n                  {\r\n                    title: \"Due Date\",\r\n                    field: \"dueDate\",\r\n                    render: (rowData) => this.formatDate(rowData.dueDate),\r\n                  },\r\n                ]}\r\n                data={Array.from(\r\n                  this.state.selectedUser.transactions.filter(\r\n                    (name) => name.checkedInDate === \"\"\r\n                  )\r\n                )}\r\n              ></Table>\r\n            ),\r\n          },\r\n          {\r\n            menuItem: \"Completed Transactions\",\r\n            render: () => (\r\n              <Table\r\n                title={\r\n                  this.state.selectedUser.fname +\r\n                  \" \" +\r\n                  this.state.selectedUser.lname\r\n                }\r\n                columns={[\r\n                  { title: \"Item ID\", field: \"iid\" },\r\n                  { title: \"Transaction ID\", field: \"tid\" },\r\n                  {\r\n                    title: \"Checked Out Date\",\r\n                    field: \"checkedOutDate\",\r\n                    render: (rowData) =>\r\n                      this.formatDate(rowData.checkedOutDate),\r\n                  },\r\n                  {\r\n                    title: \"Checked In Date\",\r\n                    field: \"checkedInDate\",\r\n                    render: (rowData) => this.formatDate(rowData.checkedInDate),\r\n                  },\r\n                ]}\r\n                data={Array.from(\r\n                  this.state.selectedUser.transactions.filter(\r\n                    (name) => !(name.checkedInDate === \"\")\r\n                  )\r\n                )}\r\n              ></Table>\r\n            ),\r\n          },\r\n        ];\r\n        table = (\r\n          <Col>\r\n            <Tab panes={panes} className=\"stretch-h flex-col\" />\r\n          </Col>\r\n        );\r\n      }\r\n    }\r\n\r\n    const courseOptions = this.state.courseOptions;\r\n    return (\r\n      <Col className=\"stretch-h flex-col\">\r\n        <div className=\"top-bar\">\r\n          <Button basic onClick={this.handleAddUserClick}>\r\n            Create New User\r\n          </Button>\r\n          <Divider clearing />\r\n        </div>\r\n        <div className=\"page-content stretch-h\">\r\n          <Col className=\"stretch-h flex-col\">\r\n            <Table\r\n              data={Array.from(this.props.data.users)}\r\n              columns={this.state.columnSet}\r\n              title={<h2>Users</h2>}\r\n              onRowClick={(event, rowData) =>\r\n                this.handleUserSelectClick(event, rowData)\r\n              }\r\n            />\r\n            <Modal\r\n              centered\r\n              size={selectedUserId >= 0 ? \"xl\" : \"lg\"}\r\n              show={selectedUserId != null}\r\n              onHide={this.close}\r\n            >\r\n              <Modal.Header closeButton bsPrefix=\"modal-header\">\r\n                <Modal.Title>User</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <Row>\r\n                  <Col>\r\n                    <Form>\r\n                      <Form.Field>\r\n                        <label>\r\n                          First Name:\r\n                          {this.state.firstNameError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          error={this.state.firstNameError}\r\n                          name=\"fname\"\r\n                          placeholder=\"First Name\"\r\n                          defaultValue={selectedUser.fname}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"fname\");\r\n                          }}\r\n                          readOnly={this.state.editable}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>\r\n                          Last Name:\r\n                          {this.state.lastNameError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          error={this.state.lastNameError}\r\n                          name=\"lname\"\r\n                          placeholder=\"Last Name\"\r\n                          defaultValue={selectedUser.lname}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"lname\");\r\n                          }}\r\n                          readOnly={this.state.editable}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Courses:</label>\r\n                        <Dropdown\r\n                          placeholder=\"Courses\"\r\n                          name=\"courses\"\r\n                          fluid\r\n                          multiple\r\n                          search\r\n                          selection\r\n                          allowAdditions\r\n                          options={courseOptions}\r\n                          value={selectedUser.courses}\r\n                          onAddItem={this.handleDropdownAddition}\r\n                          onChange={this.handleDropdownChange}\r\n                          disabled={this.state.editable}\r\n                        />\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>\r\n                          UML ID:\r\n                          {this.state.idError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          name=\"id\"\r\n                          error={this.state.idError}\r\n                          placeholder=\"UML ID\"\r\n                          defaultValue={selectedUser.uid}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"uid\");\r\n                          }}\r\n                          readOnly={this.state.editable}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>\r\n                          Email:\r\n                          {this.state.emailError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          name=\"email\"\r\n                          error={this.state.emailError}\r\n                          placeholder=\"Email\"\r\n                          defaultValue={selectedUser.email}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"email\");\r\n                          }}\r\n                          readOnly={this.state.editable}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Phone Number:</label>\r\n                        <Form.Input\r\n                          name=\"phone\"\r\n                          placeholder=\"Phone Number\"\r\n                          defaultValue={selectedUser.phone}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"phone\");\r\n                          }}\r\n                          readOnly={this.state.editable}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Notes:</label>\r\n                        <Form.Input\r\n                          name=\"notes\"\r\n                          placeholder=\"Notes\"\r\n                          defaultValue={selectedUser.notes}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"notes\");\r\n                          }}\r\n                          readOnly={this.state.editable}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      {selectedUserId >= 0 ? (\r\n                        <Form.Field>\r\n                          <label>Date Created:</label>\r\n                          <Form.Input\r\n                            name=\"creationDate\"\r\n                            placeholder=\"creationDate\"\r\n                            defaultValue={this.formatDate(\r\n                              selectedUser.creationDate\r\n                            )}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                      ) : null}\r\n                    </Form>\r\n                  </Col>\r\n                  {table}\r\n                </Row>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                {this.state.selectedUserId >= 0 ? (\r\n                  <Button\r\n                    className=\"btn btn-primary mr-auto\"\r\n                    toggle\r\n                    active={!this.state.editable}\r\n                    onClick={this.handleUserEditClick}\r\n                  >\r\n                    <Icon name=\"pencil\" />\r\n                    Edit\r\n                  </Button>\r\n                ) : null}\r\n                <Button\r\n                  id=\"add-icon-handler\"\r\n                  variant=\"primary\"\r\n                  onClick={this.handleSubmitClick}\r\n                >\r\n                  {this.state.isChangesMadeToModal ? (\r\n                    <Icon name=\"save\"></Icon>\r\n                  ) : null}\r\n                  {this.state.isChangesMadeToModal ? \"Save\" : \"Close\"}\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </Col>\r\n        </div>\r\n      </Col>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Users;\r\n","import React, { Component } from \"react\";\r\nimport { Divider, Button, Form, Dropdown, Icon, Tab } from \"semantic-ui-react\";\r\nimport { Col, Row, Modal } from \"react-bootstrap\";\r\nimport Table from \"../common/Table\";\r\n\r\nclass Inventory extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    const headerStyleGrey = {\r\n      backgroundColor: \"#E2E2E2\",\r\n      color: \"black\",\r\n      fontSize: \"24\",\r\n    };\r\n    this.state = {\r\n      columnSet: [\r\n        {\r\n          title: \"Item Name\",\r\n          field: \"name\",\r\n          headerStyle: headerStyleGrey,\r\n        },\r\n        {\r\n          title: \"Category\",\r\n          field: \"category\",\r\n          headerStyle: headerStyleGrey,\r\n        },\r\n        {\r\n          title: \"Item ID\",\r\n          field: \"iid\",\r\n          headerStyle: headerStyleGrey,\r\n        },\r\n        {\r\n          title: \"Availablity\",\r\n          field: \"atid\",\r\n          headerStyle: headerStyleGrey,\r\n          render: (rowData) => {\r\n            return rowData.atid === \"\" ? \"Available\" : \"Unavailable\";\r\n          },\r\n        },\r\n        {\r\n          title: \"Notes\",\r\n          field: \"notes\",\r\n          headerStyle: headerStyleGrey,\r\n        },\r\n        {\r\n          title: \"Courses\",\r\n          field: \"courses\",\r\n          headerStyle: headerStyleGrey,\r\n          render: (rowData) => {\r\n            return rowData.courses.length > 0\r\n              ? rowData.courses.reduce((result, item) => (\r\n                  <>\r\n                    {result}\r\n                    {\", \"}\r\n                    {item}\r\n                  </>\r\n                ))\r\n              : \"\";\r\n          },\r\n        },\r\n        {\r\n          title: \"Expected Return Date\",\r\n          field: \"expected\",\r\n          defaultSort: \"desc\",\r\n          headerStyle: headerStyleGrey,\r\n          render: (rowData) => this.formatDate(rowData.expected),\r\n          customFilterAndSearch: (term, rowData) =>\r\n            this.formatDateForSearchBar(rowData.expected).indexOf(term) != -1 ||\r\n            this.formatDate(rowData.expected).indexOf(term) != -1,\r\n        },\r\n      ],\r\n      open: false,\r\n\r\n      nameError: false,\r\n      categoryError: false,\r\n      serialError: false,\r\n      editable: true,\r\n      isChangesMadeToModal: false,\r\n\r\n      selectedItemId: null,\r\n      selectedItem: {\r\n        name: \"\",\r\n        iid: \"\",\r\n        category: \"\",\r\n        notes: \"\",\r\n        atid: \"\",\r\n        courses: [],\r\n        expected: \"\",\r\n        creationDate: \"\",\r\n      },\r\n      courseOptions: [\r\n        { text: \"Photography I\", value: \"Photography I\" },\r\n        { text: \"Photography II\", value: \"Photography II\" },\r\n        { text: \"Documentary Image\", value: \"Documentary Image\" },\r\n      ],\r\n    };\r\n  }\r\n\r\n  close = () =>\r\n    this.setState({\r\n      selectedItemId: null,\r\n      nameError: false,\r\n      categoryError: false,\r\n      serialError: false,\r\n      editable: true,\r\n      submitName: \"Close\",\r\n      submitIcon: null,\r\n      isChangesMadeToModal: false,\r\n    });\r\n\r\n  handleChange = (e, userProp) => {\r\n    const val = e.target.value;\r\n    this.setState((prevState) => {\r\n      let selectedItem = Object.assign({}, prevState.selectedItem);\r\n      selectedItem[userProp] = val;\r\n      return { selectedItem };\r\n    });\r\n    this.setState({\r\n      isChangesMadeToModal: true,\r\n    });\r\n  };\r\n\r\n  handleUserSelectClick = (e, rowData) => {\r\n    this.setState({\r\n      selectedItemId: rowData.tableData.id,\r\n      selectedItem: this.props.data.items[rowData.tableData.id],\r\n    });\r\n    console.log(this.state.selectedItem);\r\n  };\r\n\r\n  handleAddUserClick = () => {\r\n    this.setState({\r\n      selectedItemId: -1,\r\n      selectedItem: {\r\n        name: \"\",\r\n        iid: \"\",\r\n        category: \"\",\r\n        notes: \"\",\r\n        atid: \"\",\r\n        courses: [],\r\n        creationDate: \"\",\r\n        expected: \"\",\r\n      },\r\n      editable: false,\r\n    });\r\n  };\r\n\r\n  handleUserEditClick = () => {\r\n    this.setState({\r\n      editable: !this.state.editable,\r\n    });\r\n  };\r\n\r\n  checkErrorUpdateDataSet = () => {\r\n    if (\r\n      !this.state.nameError &&\r\n      !this.state.categoryError &&\r\n      !this.state.serialError\r\n    ) {\r\n      let data = Object.assign({}, this.props.data);\r\n      if (this.state.selectedItemId >= 0) {\r\n        data.items[this.state.selectedItemId] = this.state.selectedItem;\r\n      } else {\r\n        this.state.selectedItem.creationDate = new Date().getTime();\r\n        data.items.push(this.state.selectedItem);\r\n      }\r\n      this.props.onUpdateData(data);\r\n      this.close();\r\n    }\r\n  };\r\n\r\n  handleSubmitClick = () => {\r\n    this.setState(\r\n      {\r\n        nameError: this.state.selectedItem.name === \"\",\r\n        categoryError: this.state.selectedItem.category === \"\",\r\n        serialError: this.state.selectedItem.iid === \"\",\r\n      },\r\n      this.checkErrorUpdateDataSet\r\n    );\r\n  };\r\n\r\n  handleDropdownAddition = (e, { value }) => {\r\n    this.setState((prevState) => ({\r\n      courseOptions: [{ text: value, value }, ...prevState.courseOptions],\r\n    }));\r\n  };\r\n\r\n  formatDate = (dateString) => {\r\n    if (!dateString) return \"\";\r\n    const date = new Date(dateString);\r\n    return (\r\n      date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear()\r\n    );\r\n  };\r\n\r\n  formatDateForSearchBar = (dateString) => {\r\n    let monthNames = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    if (!dateString) return \"\";\r\n    const date = new Date(dateString);\r\n    console.log(date.getMonth());\r\n    return (\r\n      monthNames[date.getMonth()] +\r\n      \" \" +\r\n      date.getDate() +\r\n      \" \" +\r\n      date.getFullYear()\r\n    );\r\n  };\r\n\r\n  handleDropdownChange = (e, { value }) => {\r\n    const val = value;\r\n    this.setState((prevState) => {\r\n      let selectedItem = Object.assign({}, prevState.selectedItem);\r\n      selectedItem.courses = val;\r\n      return { selectedItem };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const selectedItemId = this.state.selectedItemId;\r\n    const selectedItem = this.state.selectedItem;\r\n\r\n    let expetedDateField;\r\n    let tidField;\r\n\r\n    let items = Array.from(this.props.data.items);\r\n    items.forEach((items) => {\r\n      let result = this.props.data.transactions.filter(\r\n        (transaction) => items.atid === transaction.tid\r\n      );\r\n      console.log(result);\r\n      items.expected = !(items.atid === \"\") ? result[0].dueDate : \"\";\r\n      items.backgroundColor = !(items.atid === \"\") ? \"mistyrose\" : \"\";\r\n    });\r\n\r\n    if (this.state.selectedItemId != null) {\r\n      if (this.state.selectedItemId >= 0) {\r\n      }\r\n    }\r\n\r\n    const inventoryTablePanes = [\r\n      {\r\n        menuItem: \"All\",\r\n        render: () => (\r\n          <Table\r\n            data={Array.from(this.props.data.items)}\r\n            columns={this.state.columnSet}\r\n            title={<h2>Inventory</h2>}\r\n            onRowClick={(event, rowData) =>\r\n              this.handleUserSelectClick(event, rowData)\r\n            }\r\n          />\r\n        ),\r\n      },\r\n      {\r\n        menuItem: \"Available\",\r\n        render: () => (\r\n          <Table\r\n            data={Array.from(\r\n              this.props.data.items.filter(\r\n                (name) => name.backgroundColor !== \"mistyrose\"\r\n              )\r\n            )}\r\n            columns={this.state.columnSet}\r\n            title={<h2>Inventory</h2>}\r\n            onRowClick={(event, rowData) =>\r\n              this.handleUserSelectClick(event, rowData)\r\n            }\r\n          />\r\n        ),\r\n      },\r\n      {\r\n        menuItem: \"Unavailable\",\r\n        render: () => (\r\n          <Table\r\n            data={Array.from(\r\n              this.props.data.items.filter(\r\n                (name) => name.backgroundColor === \"mistyrose\"\r\n              )\r\n            )}\r\n            columns={this.state.columnSet}\r\n            title={<h2>Inventory</h2>}\r\n            onRowClick={(event, rowData) =>\r\n              this.handleUserSelectClick(event, rowData)\r\n            }\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n\r\n    const courseOptions = this.state.courseOptions;\r\n\r\n    return (\r\n      <Col className=\"stretch-h flex-col\">\r\n        <div className=\"top-bar\">\r\n          <Button basic onClick={this.handleAddUserClick}>\r\n            Create New Item\r\n          </Button>\r\n          <Divider clearing />\r\n        </div>\r\n        <div className=\"page-content stretch-h\">\r\n          <Col className=\"stretch-h flex-col\">\r\n            <Tab panes={inventoryTablePanes} className=\"stretch-h flex-col\" />\r\n            <Modal\r\n              centered\r\n              size={this.state.selectedItemId >= 0 ? \"lg\" : \"lg\"}\r\n              show={selectedItemId != null}\r\n              onHide={this.close}\r\n            >\r\n              <Modal.Header closeButton bsPrefix=\"modal-header\">\r\n                <Modal.Title>Item</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <Row>\r\n                  <Col>\r\n                    <Form>\r\n                      <Form.Field>\r\n                        <label>\r\n                          Name:\r\n                          {this.state.nameError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          error={this.state.nameError}\r\n                          name=\"name\"\r\n                          placeholder=\"Name\"\r\n                          defaultValue={selectedItem.name}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"name\");\r\n                          }}\r\n                          readOnly={this.state.editable}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>\r\n                          Category:\r\n                          {this.state.categoryError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          error={this.state.categoryError}\r\n                          name=\"category\"\r\n                          maxLength=\"15\"\r\n                          placeholder=\"Category\"\r\n                          defaultValue={selectedItem.category}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"category\");\r\n                          }}\r\n                          readOnly={this.state.editable}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Courses:</label>\r\n                        <Dropdown\r\n                          placeholder=\"Courses\"\r\n                          name=\"courses\"\r\n                          fluid\r\n                          multiple\r\n                          search\r\n                          selection\r\n                          allowAdditions\r\n                          options={courseOptions}\r\n                          value={selectedItem.courses}\r\n                          onAddItem={this.handleDropdownAddition}\r\n                          onChange={this.handleDropdownChange}\r\n                          disabled={this.state.editable}\r\n                        />\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>\r\n                          Item ID:\r\n                          {this.state.serialError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          name=\"iid\"\r\n                          error={this.state.serialError}\r\n                          placeholder=\"Item ID\"\r\n                          defaultValue={selectedItem.iid}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"iid\");\r\n                          }}\r\n                          readOnly={this.state.editable}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Notes:</label>\r\n                        <Form.Input\r\n                          name=\"notes\"\r\n                          error={this.state.notesError}\r\n                          placeholder=\"Notes\"\r\n                          defaultValue={selectedItem.notes}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"notes\");\r\n                          }}\r\n                          readOnly={this.state.editable}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      {this.state.selectedItemId >= 0 ? (\r\n                        <Form.Field>\r\n                          <label>Date Created:</label>\r\n                          <Form.Input\r\n                            name=\"creationDate\"\r\n                            placeholder=\"creationDate\"\r\n                            defaultValue={this.formatDate(\r\n                              selectedItem.creationDate\r\n                            )}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                      ) : null}\r\n                      {!(this.state.selectedItem.expected === \"\") ? (\r\n                        <div>\r\n                          <Form.Field>\r\n                            <label>Transaction ID:</label>\r\n                            <Form.Input\r\n                              name=\"atid\"\r\n                              placeholder=\"Transaction ID\"\r\n                              defaultValue={selectedItem.atid}\r\n                              readOnly\r\n                            ></Form.Input>\r\n                          </Form.Field>\r\n                          <Form.Field>\r\n                            <label>Expected Return Date:</label>\r\n                            <Form.Input\r\n                              name=\"expected\"\r\n                              placeholder=\"Expected Return Date\"\r\n                              defaultValue={this.formatDate(\r\n                                selectedItem.expected\r\n                              )}\r\n                              readOnly\r\n                            ></Form.Input>\r\n                          </Form.Field>\r\n                        </div>\r\n                      ) : null}\r\n                    </Form>\r\n                  </Col>\r\n                </Row>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                {this.state.selectedItemId >= 0 ? (\r\n                  <Button\r\n                    className=\"btn btn-primary mr-auto\"\r\n                    toggle\r\n                    active={!this.state.editable}\r\n                    onClick={this.handleUserEditClick}\r\n                  >\r\n                    <Icon name=\"pencil\" />\r\n                    Edit\r\n                  </Button>\r\n                ) : null}\r\n                <Button\r\n                  id=\"add-icon-handler\"\r\n                  variant=\"primary\"\r\n                  onClick={this.handleSubmitClick}\r\n                >\r\n                  {this.state.isChangesMadeToModal ? (\r\n                    <Icon name=\"save\"></Icon>\r\n                  ) : null}\r\n                  {this.state.isChangesMadeToModal ? \"Save\" : \"Close\"}\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </Col>\r\n        </div>\r\n      </Col>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Inventory;\r\n","import React, { Component } from \"react\";\r\nimport { Divider, Button, Form, Dropdown } from \"semantic-ui-react\";\r\nimport { Col, Row, Modal } from \"react-bootstrap\";\r\nimport Table from \"../common/Table\";\r\n\r\nclass Staff extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.state = {\r\n      dataSet: [\r\n        {\r\n          fname: \"Seamus\",\r\n          lname: \"Rioux\",\r\n          courses: [\"Photography I\", \"Photography II\"],\r\n          roles: [\"Admin\", \"Staff\"],\r\n          id: \"54321\",\r\n          email: \"seamus.rioux3@gmail.com\",\r\n          phone: \"123-456-7890\",\r\n        },\r\n        {\r\n          fname: \"Greg\",\r\n          lname: \"Smelkov\",\r\n          courses: [\"Photography I\"],\r\n          roles: [\"Admin\"],\r\n          id: \"12345\",\r\n          email: \"greg@gmail.com\",\r\n          phone: \"123-456-7890\",\r\n        },\r\n      ],\r\n      columnSet: [\r\n        { title: \"First Name\", field: \"fname\" },\r\n        { title: \"Last Name\", field: \"lname\" },\r\n        {\r\n          title: \"Courses\",\r\n          field: \"courses\",\r\n          render: (rowData) => {\r\n            return rowData.courses.length > 0\r\n              ? rowData.courses.reduce((result, item) => (\r\n                  <>\r\n                    {result}\r\n                    {\", \"}\r\n                    {item}\r\n                  </>\r\n                ))\r\n              : \"\";\r\n          },\r\n        },\r\n        {\r\n          title: \"Roles\",\r\n          field: \"roles\",\r\n          render: (rowData) => {\r\n            return rowData.roles.length > 0\r\n              ? rowData.roles.reduce((result, item) => (\r\n                  <>\r\n                    {result}\r\n                    {\", \"}\r\n                    {item}\r\n                  </>\r\n                ))\r\n              : \"\";\r\n          },\r\n        },\r\n      ],\r\n      open: false,\r\n\r\n      firstNameError: false,\r\n      lastNameError: false,\r\n      idError: false,\r\n      emailError: false,\r\n\r\n      selectedUserId: null,\r\n      selectedUser: {\r\n        fname: \"\",\r\n        lname: \"\",\r\n        courses: [],\r\n        roles: [],\r\n        id: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n      },\r\n      courseOptions: [\r\n        { text: \"Photography I\", value: \"Photography I\" },\r\n        { text: \"Photography II\", value: \"Photography II\" },\r\n        { text: \"Documentary Image\", value: \"Documentary Image\" },\r\n      ],\r\n      roleOptions: [\r\n        { text: \"Admin\", value: \"Admin\" },\r\n        { text: \"Staff\", value: \"Staff\" },\r\n      ],\r\n    };\r\n  }\r\n\r\n  close = () =>\r\n    this.setState({\r\n      selectedUserId: null,\r\n      firstNameError: false,\r\n      lastNameError: false,\r\n      idError: false,\r\n      emailError: false,\r\n    });\r\n\r\n  handleChange = (e, userProp) => {\r\n    const val = e.target.value;\r\n    this.setState((prevState) => {\r\n      let selectedUser = Object.assign({}, prevState.selectedUser);\r\n      selectedUser[userProp] = val;\r\n      return { selectedUser };\r\n    });\r\n  };\r\n\r\n  handleUserSelectClick = (e, rowData) => {\r\n    this.setState({\r\n      selectedUserId: rowData.tableData.id,\r\n      selectedUser: this.state.dataSet[rowData.tableData.id],\r\n    });\r\n  };\r\n\r\n  handleAddUserClick = () => {\r\n    this.setState({\r\n      selectedUserId: -1,\r\n      selectedUser: {\r\n        fname: \"\",\r\n        lname: \"\",\r\n        courses: [],\r\n        roles: [],\r\n        id: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n      },\r\n    });\r\n  };\r\n\r\n  checkErrorUpdateDataSet = () => {\r\n    if (\r\n      !this.state.firstNameError &&\r\n      !this.state.lastNameError &&\r\n      !this.state.idError &&\r\n      !this.state.emailError\r\n    ) {\r\n      this.setState((prevState) => {\r\n        let dataSet = Array.from(prevState.dataSet);\r\n        if (this.state.selectedUserId >= 0) {\r\n          dataSet[this.state.selectedUserId] = this.state.selectedUser;\r\n        } else {\r\n          dataSet.push(this.state.selectedUser);\r\n        }\r\n        return { dataSet };\r\n      }, this.close);\r\n    }\r\n  };\r\n\r\n  handleSubmitClick = () => {\r\n    this.setState(\r\n      {\r\n        firstNameError: this.state.selectedUser.fname === \"\",\r\n        lastNameError: this.state.selectedUser.lname === \"\",\r\n        idError: this.state.selectedUser.id === \"\",\r\n        emailError: this.state.selectedUser.email === \"\",\r\n      },\r\n      this.checkErrorUpdateDataSet\r\n    );\r\n  };\r\n\r\n  handleDropdownAdditionRoles = (e, { value }) => {\r\n    this.setState((prevState) => ({\r\n      roleOptions: [{ text: value, value }, ...prevState.roleOptions],\r\n    }));\r\n  };\r\n\r\n  handleDropdownAdditionCourses = (e, { value }) => {\r\n    this.setState((prevState) => ({\r\n      courseOptions: [{ text: value, value }, ...prevState.courseOptions],\r\n    }));\r\n  };\r\n\r\n  handleDropdownChangeCourses = (e, { value }) => {\r\n    const val = value;\r\n    this.setState((prevState) => {\r\n      let selectedUser = Object.assign({}, prevState.selectedUser);\r\n      selectedUser.courses = val;\r\n      return { selectedUser };\r\n    });\r\n  };\r\n\r\n  handleDropdownChangeRoles = (e, { value }) => {\r\n    const val = value;\r\n    this.setState((prevState) => {\r\n      let selectedUser = Object.assign({}, prevState.selectedUser);\r\n      selectedUser.roles = val;\r\n      return { selectedUser };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const selectedUserId = this.state.selectedUserId;\r\n    const selectedUser = this.state.selectedUser;\r\n    const courseOptions = this.state.courseOptions;\r\n    const roleOptions = this.state.roleOptions;\r\n    return (\r\n      <Col className=\"stretch-h flex-col\">\r\n        <div className=\"top-bar\">\r\n          <Button basic onClick={this.handleAddUserClick}>\r\n            Create New Staff\r\n          </Button>\r\n          <Divider clearing />\r\n        </div>\r\n        <div className=\"page-content stretch-h\">\r\n          <Col className=\"stretch-h flex-col\">\r\n            <Table\r\n              data={Array.from(this.state.dataSet)}\r\n              columns={this.state.columnSet}\r\n              title={<h2>Staff</h2>}\r\n              onRowClick={(event, rowData) =>\r\n                this.handleUserSelectClick(event, rowData)\r\n              }\r\n            />\r\n            <Modal\r\n              centered\r\n              size={\"lg\"}\r\n              show={selectedUserId != null}\r\n              onHide={this.close}\r\n            >\r\n              <Modal.Header closeButton bsPrefix=\"modal-header\">\r\n                <Modal.Title>Staff</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <Row>\r\n                  <Col>\r\n                    <Form>\r\n                      <Form.Field>\r\n                        <label>\r\n                          First Name:\r\n                          {this.state.firstNameError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          error={this.state.firstNameError}\r\n                          name=\"fname\"\r\n                          placeholder=\"First Name\"\r\n                          defaultValue={selectedUser.fname}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"fname\");\r\n                          }}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>\r\n                          Last Name:\r\n                          {this.state.lastNameError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          error={this.state.lastNameError}\r\n                          name=\"lname\"\r\n                          placeholder=\"Last Name\"\r\n                          defaultValue={selectedUser.lname}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"lname\");\r\n                          }}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Courses:</label>\r\n                        <Dropdown\r\n                          placeholder=\"Courses\"\r\n                          name=\"courses\"\r\n                          fluid\r\n                          multiple\r\n                          search\r\n                          selection\r\n                          allowAdditions\r\n                          options={courseOptions}\r\n                          value={selectedUser.courses}\r\n                          onAddItem={this.handleDropdownAdditionCourses}\r\n                          onChange={this.handleDropdownChangeCourses}\r\n                        />\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Roles:</label>\r\n                        <Dropdown\r\n                          placeholder=\"Roles\"\r\n                          name=\"roles\"\r\n                          fluid\r\n                          multiple\r\n                          search\r\n                          selection\r\n                          allowAdditions\r\n                          options={roleOptions}\r\n                          value={selectedUser.roles}\r\n                          onAddItem={this.handleDropdownAdditionRoles}\r\n                          onChange={this.handleDropdownChangeRoles}\r\n                        />\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>\r\n                          UML ID:\r\n                          {this.state.idError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          name=\"id\"\r\n                          error={this.state.idError}\r\n                          placeholder=\"UML ID\"\r\n                          defaultValue={selectedUser.id}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"id\");\r\n                          }}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>\r\n                          Email:\r\n                          {this.state.emailError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          name=\"email\"\r\n                          error={this.state.emailError}\r\n                          placeholder=\"Email\"\r\n                          defaultValue={selectedUser.email}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"email\");\r\n                          }}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Phone Number:</label>\r\n                        <Form.Input\r\n                          type=\"phone\"\r\n                          placeholder=\"Phone Number\"\r\n                          defaultValue={selectedUser.phone}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"phone\");\r\n                          }}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                    </Form>\r\n                  </Col>\r\n                </Row>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button\r\n                  id=\"add-icon-handler\"\r\n                  variant=\"primary\"\r\n                  onClick={this.handleSubmitClick}\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </Col>\r\n        </div>\r\n      </Col>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Staff;\r\n","import React, { Component } from \"react\";\r\nimport { Form, Divider, Button } from \"semantic-ui-react\";\r\nimport { Col, Row, Modal } from \"react-bootstrap\";\r\nimport Table from \"../common/Table\";\r\n\r\nclass Transactions extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.state = {\r\n      columnSet: [\r\n        { title: \"First Name\", field: \"fname\" },\r\n        { title: \"Last Name\", field: \"lname\" },\r\n        { title: \"Item Name\", field: \"name\" },\r\n        { title: \"Item ID\", field: \"iid\" },\r\n        { title: \"Category\", field: \"category\" },\r\n        { title: \"Notes\", field: \"notes\" },\r\n        {\r\n          title: \"Checked Out\",\r\n          field: \"checkedOutDate\",\r\n          render: (rowData) => this.formatDate(rowData.checkedOutDate),\r\n          customFilterAndSearch: (term, rowData) =>\r\n            this.formatDateForSearchBar(rowData.checkedOutDate).indexOf(term) !=\r\n              -1 || this.formatDate(rowData.checkedOutDate).indexOf(term) != -1,\r\n        },\r\n        {\r\n          title: \"Due Date\",\r\n          field: \"dueDate\",\r\n          render: (rowData) => this.formatDate(rowData.dueDate),\r\n          customFilterAndSearch: (term, rowData) =>\r\n            this.formatDateForSearchBar(rowData.dueDate).indexOf(term) != -1 ||\r\n            this.formatDate(rowData.dueDate).indexOf(term) != -1,\r\n        },\r\n        {\r\n          title: \"Checked In\",\r\n          field: \"checkedInDate\",\r\n          render: (rowData) => this.formatDate(rowData.checkedInDate),\r\n          defaultSort: \"dec\",\r\n          customFilterAndSearch: (term, rowData) =>\r\n            this.formatDateForSearchBar(rowData.checkedInDate).indexOf(term) !=\r\n              -1 || this.formatDate(rowData.checkedInDate).indexOf(term) != -1,\r\n        },\r\n      ],\r\n      open: false,\r\n\r\n      selectedItemId: null,\r\n      selectedItem: {\r\n        fname: \"\",\r\n        lname: \"\",\r\n        name: \"\",\r\n        iid: \"\",\r\n        category: \"\",\r\n        notes: \"\",\r\n        checkedOutDate: \"\",\r\n        checkedInDate: \"\",\r\n        dueDate: \"\",\r\n      },\r\n    };\r\n  }\r\n\r\n  close = () =>\r\n    this.setState({\r\n      selectedItemId: null,\r\n    });\r\n\r\n  handleChange = (e, userProp) => {\r\n    const val = e.target.value;\r\n    this.setState((prevState) => {\r\n      let selectedItem = Object.assign({}, prevState.selectedItem);\r\n      selectedItem[userProp] = val;\r\n      return { selectedItem };\r\n    });\r\n  };\r\n\r\n  handleUserSelectClick = (e, rowData) => {\r\n    this.setState({\r\n      selectedItemId: rowData.tid,\r\n      selectedItem: rowData,\r\n    });\r\n  };\r\n\r\n  handleDropdownAddition = (e, { value }) => {\r\n    this.setState((prevState) => ({\r\n      courseOptions: [{ text: value, value }, ...prevState.courseOptions],\r\n    }));\r\n  };\r\n\r\n  handleDropdownChange = (e, { value }) => {\r\n    const val = value;\r\n    this.setState((prevState) => {\r\n      let selectedItem = Object.assign({}, prevState.selectedItem);\r\n      selectedItem.courses = val;\r\n      return { selectedItem };\r\n    });\r\n  };\r\n\r\n  formatDate = (dateString) => {\r\n    if (!dateString) return \"\";\r\n    const date = new Date(dateString);\r\n    return (\r\n      date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear()\r\n    );\r\n  };\r\n\r\n  formatDateForSearchBar = (dateString) => {\r\n    let monthNames = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    if (!dateString) return \"\";\r\n    const date = new Date(dateString);\r\n    console.log(date.getMonth());\r\n    return (\r\n      monthNames[date.getMonth()] +\r\n      \" \" +\r\n      date.getDate() +\r\n      \" \" +\r\n      date.getFullYear()\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const selectedItemId = this.state.selectedItemId;\r\n    const selectedItem = this.state.selectedItem;\r\n\r\n    let transactions = Array.from(this.props.data.transactions);\r\n    transactions.forEach((transaction) => {\r\n      let result = this.props.data.users.filter(\r\n        (user) => transaction.uid === user.uid\r\n      );\r\n      transaction.fname = result[0] ? result[0].fname : \"\";\r\n      transaction.lname = result[0] ? result[0].lname : \"\";\r\n      result = this.props.data.items.filter(\r\n        (item) => transaction.iid === item.iid\r\n      );\r\n      transaction.name = result[0] ? result[0].name : \"\";\r\n      transaction.iid = result[0] ? result[0].iid : \"\";\r\n      transaction.category = result[0] ? result[0].category : \"\";\r\n\r\n      transaction.backgroundColor =\r\n        !transaction.checkedInDate &&\r\n        new Date(transaction.dueDate).getTime() < new Date().getTime()\r\n          ? \"mistyrose\"\r\n          : \"\";\r\n    });\r\n\r\n    return (\r\n      <Col className=\"stretch-h flex-col\">\r\n        <div className=\"top-bar\">\r\n          <Button basic href=\"#/\">\r\n            Create New Transaction\r\n          </Button>\r\n          <Divider clearing />\r\n        </div>\r\n        <div className=\"page-content stretch-h\">\r\n          <Col className=\"stretch-h flex-col\">\r\n            <Table\r\n              data={transactions}\r\n              columns={this.state.columnSet}\r\n              title={<h2>Transaction History</h2>}\r\n              onRowClick={(event, rowData) =>\r\n                this.handleUserSelectClick(event, rowData)\r\n              }\r\n            />\r\n            <Modal\r\n              centered\r\n              size={this.state.selectedItemId >= 0 ? \"lg\" : \"lg\"}\r\n              show={selectedItemId != null}\r\n              onHide={this.close}\r\n            >\r\n              <Modal.Header closeButton bsPrefix=\"modal-header\">\r\n                <Modal.Title>Item</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <Row>\r\n                  <Col>\r\n                    <Form>\r\n                      <Form.Field>\r\n                        <label>First Name: </label>\r\n                        <Form.Input\r\n                          name=\"fname\"\r\n                          placeholder=\"First Name\"\r\n                          defaultValue={selectedItem.fname}\r\n                          readOnly\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Last Name:</label>\r\n                        <Form.Input\r\n                          name=\"lname\"\r\n                          placeholder=\"Last Name\"\r\n                          defaultValue={selectedItem.lname}\r\n                          readOnly\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Item Name:</label>\r\n                        <Form.Input\r\n                          name=\"name\"\r\n                          placeholder=\"name\"\r\n                          defaultValue={selectedItem.name}\r\n                          readOnly\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Category:</label>\r\n                        <Form.Input\r\n                          name=\"category\"\r\n                          placeholder=\"Category\"\r\n                          defaultValue={selectedItem.category}\r\n                          readOnly\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Item ID:</label>\r\n                        <Form.Input\r\n                          name=\"iid\"\r\n                          placeholder=\"Item ID\"\r\n                          defaultValue={selectedItem.iid}\r\n                          readOnly\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Notes:</label>\r\n                        <Form.Input\r\n                          name=\"notes\"\r\n                          placeholder=\"Notes\"\r\n                          defaultValue={selectedItem.notes}\r\n                          readOnly\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Checked Out:</label>\r\n                        <Form.Input\r\n                          name=\"checkedOut\"\r\n                          placeholder=\"Checked Out\"\r\n                          defaultValue={this.formatDate(\r\n                            selectedItem.checkedOutDate\r\n                          )}\r\n                          readOnly\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Checked In:</label>\r\n                        <Form.Input\r\n                          name=\"checkedIn\"\r\n                          placeholder=\"Checked In\"\r\n                          error={!selectedItem.checkedInDate}\r\n                          defaultValue={this.formatDate(\r\n                            selectedItem.checkedInDate\r\n                          )}\r\n                          readOnly\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Due Date:</label>\r\n                        <Form.Input\r\n                          name=\"due\"\r\n                          placeholder=\"Due Date\"\r\n                          defaultValue={this.formatDate(selectedItem.dueDate)}\r\n                          readOnly\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                    </Form>\r\n                  </Col>\r\n                </Row>\r\n              </Modal.Body>\r\n              <Modal.Footer></Modal.Footer>\r\n            </Modal>\r\n          </Col>\r\n        </div>\r\n      </Col>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Transactions;\r\n","import React, { Component } from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nimport Header from \"./common/Header\";\r\nimport Sidebar from \"./common/Sidebar\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport \"./App.scss\";\r\nimport CheckInOut from \"./pages/CheckInOut\";\r\nimport Users from \"./pages/Users\";\r\nimport Inventory from \"./pages/Inventory\";\r\nimport Staff from \"./pages/Staff\";\r\nimport Transactions from \"./pages/Transactions\";\r\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleDataUpdate = this.handleDataUpdate.bind(this);\r\n    this.state = {\r\n      data: {\r\n        users: [\r\n          {\r\n            fname: \"Seamus\",\r\n            lname: \"Rioux\",\r\n            uid: \"54321\",\r\n            email: \"srioux@email.com\",\r\n            phone: \"123-456-7891\",\r\n            notes: \"Optional notes for Seamus\",\r\n            creationDate: new Date().getTime(),\r\n            courses: [\"Photography I\"],\r\n          },\r\n          {\r\n            fname: \"Greg\",\r\n            lname: \"Smelkov\",\r\n            uid: \"12345\",\r\n            email: \"greg@email.com\",\r\n            phone: \"123-456-7891\",\r\n            notes: \"Optional notes for Greg\",\r\n            creationDate: new Date().getTime(),\r\n            courses: [\"Photography I\", \"Photography II\"],\r\n          },\r\n        ],\r\n        items: [\r\n          {\r\n            name: \"Canon 5D Mk II\",\r\n            iid: \"1\",\r\n            category: \"Camera\",\r\n            notes: \"\",\r\n            atid: \"3\",\r\n            courses: [\"Photography II\"],\r\n            creationDate: new Date().getTime(),\r\n          },\r\n          {\r\n            name: \"Canon 18-55 F4.0\",\r\n            iid: \"2\",\r\n            category: \"Lens\",\r\n            notes: \"Missing lens cap\",\r\n            atid: \"4\",\r\n            courses: [\"Photography I\", \"Photography II\"],\r\n            creationDate: new Date().getTime(),\r\n          },\r\n          {\r\n            name: \"Mavic Drone\",\r\n            iid: \"3\",\r\n            category: \"Other\",\r\n            notes: \"Goes whirrr\",\r\n            atid: \"\",\r\n            courses: [\"Photography I\", \"Photography II\"],\r\n            creationDate: new Date().getTime(),\r\n          },\r\n          {\r\n            name: \"Canon 5D Mk II\",\r\n            iid: \"4\",\r\n            category: \"Camera\",\r\n            notes: \"\",\r\n            atid: \"\",\r\n            courses: [\"Photography II\"],\r\n            creationDate: new Date().getTime(),\r\n          },\r\n          {\r\n            name: \"Canon 18-55 F4.0\",\r\n            iid: \"5\",\r\n            category: \"Lens\",\r\n            notes: \"Missing lens cap\",\r\n            atid: \"\",\r\n            courses: [\"Photography I\", \"Photography II\"],\r\n            creationDate: new Date().getTime(),\r\n          },\r\n        ],\r\n        transactions: [\r\n          {\r\n            tid: \"1\",\r\n            uid: \"54321\",\r\n            iid: \"1\",\r\n            checkedOutDate: new Date(\"7/22/2020\").getTime(),\r\n            dueDate: new Date(\"7/26/2020\").getTime(),\r\n            checkedInDate: new Date(\"7/24/2020\").getTime(),\r\n            notes: \"Example of transaction notes\",\r\n          },\r\n          {\r\n            tid: \"2\",\r\n            uid: \"54321\",\r\n            iid: \"2\",\r\n            checkedOutDate: new Date(\"7/22/2020\").getTime(),\r\n            dueDate: new Date(\"7/26/2020\").getTime(),\r\n            checkedInDate: new Date(\"7/24/2020\").getTime(),\r\n            notes: \"Example of transaction notes\",\r\n          },\r\n          {\r\n            tid: \"3\",\r\n            uid: \"12345\",\r\n            iid: \"1\",\r\n            checkedOutDate: new Date(\"7/25/2020\").getTime(),\r\n            dueDate: new Date(\"7/28/2020\").getTime(),\r\n            checkedInDate: \"\",\r\n            notes: \"Example of transaction notes\",\r\n          },\r\n          {\r\n            tid: \"4\",\r\n            uid: \"12345\",\r\n            iid: \"2\",\r\n            checkedOutDate: new Date(\"7/25/2020\").getTime(),\r\n            dueDate: new Date(\"7/27/2020\").getTime(),\r\n            checkedInDate: \"\",\r\n            notes: \"Example of transaction notes\",\r\n          },\r\n        ],\r\n      },\r\n    };\r\n  }\r\n\r\n  handleDataUpdate(data) {\r\n    this.setState({ data });\r\n    // console.log(\"Data Updated\", data);\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state.data);\r\n    return (\r\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n        <Router>\r\n          <Container fluid className=\"no-gutters flex-col stretch-hw\">\r\n            <Header />\r\n            <Row className=\"flex-grow no-gutters\">\r\n              <Col md=\"auto\" className=\"no-gutters\">\r\n                <Sidebar />\r\n              </Col>\r\n              <Col className=\"no-gutters\">\r\n                <Switch>\r\n                  <Route exact path=\"/\">\r\n                    <CheckInOut\r\n                      data={this.state.data}\r\n                      onUpdateData={this.handleDataUpdate}\r\n                    />\r\n                  </Route>\r\n                  {/* <Route path=\"/checkinout\">\r\n                    <CheckInOut\r\n                      data={this.state.data}\r\n                      onUpdateData={this.handleDataUpdate}\r\n                    /> */}\r\n\r\n                  <Route path=\"/users\">\r\n                    <Users\r\n                      data={this.state.data}\r\n                      onUpdateData={this.handleDataUpdate}\r\n                    />\r\n                  </Route>\r\n                  <Route path=\"/inventory\">\r\n                    <Inventory\r\n                      data={this.state.data}\r\n                      onUpdateData={this.handleDataUpdate}\r\n                    />\r\n                  </Route>\r\n                  <Route path=\"/staff\">\r\n                    <Staff onUpdateData={this.handleDataUpdate} />\r\n                  </Route>\r\n                  <Route path=\"/transactions\">\r\n                    <Transactions\r\n                      data={this.state.data}\r\n                      onUpdateData={this.handleDataUpdate}\r\n                    />\r\n                  </Route>\r\n                </Switch>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Router>\r\n      </MuiPickersUtilsProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}