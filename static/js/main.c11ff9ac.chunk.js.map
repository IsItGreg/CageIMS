{"version":3,"sources":["common/Header.js","common/Sidebar.js","common/Table.js","pages/CheckInOut.js","pages/Users.js","pages/Inventory.js","pages/Staff.js","pages/Transactions.js","App.js","serviceWorker.js","index.js"],"names":["trigger","Icon","name","Header","Row","className","Col","Dropdown","icon","direction","Menu","Item","text","as","Link","to","Component","Sidebar","Navbar","variant","Nav","href","tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","style","color","Search","SortArrow","ThirdStateCheck","ViewColumn","Table","flexGrow","components","Toolbar","icons","title","this","columns","data","options","search","paging","rowStyle","rowData","backgroundColor","tableData","id","onRowClick","CheckInOut","handleSearchResult","bind","handleTransactionsChanges","handleDataChanges","state","error","userFound","setState","onUpdateData","page","onDoneClick","selectedUser","users","onSuccessfulSearchResult","Container","handleChange","e","searchInput","target","value","handleClick","filter","user","uid","length","isError","Input","onChange","size","fluid","iconPosition","placeholder","Button","animated","onClick","Content","visible","hidden","React","CheckInOutViewUser","getTransactionsToShow","preSetTransactions","transactions","Array","from","item","checkedInDate","forEach","transaction","result","fname","lname","items","iid","category","Date","dueDate","getTime","getItemsToShow","preSetItems","atid","courses","some","course","includes","handleDoneClick","handleOpSelectClick","op","checked","isCheckoutModalOpen","close","selectedItemId","userProp","val","prevState","selectedItem","Object","assign","handleRowItemClick","index","indexOf","tid","handleReturnSelectedItemsClick","map","find","handleCheckOutCartButtonClick","itemsToCheckOut","newTransactions","newAtid","Math","max","concat","t","toString","push","checkedOutDate","handleConfirmCheckOutButtonClick","console","log","formatDate","dateString","date","getMonth","getDate","getFullYear","selectedItemsToReturn","currentlyHeldColumnSet","field","render","itemsColumnSet","cartColumnSet","checkOutColumnSet","autoOk","inputVariant","label","format","InputAdornmentProps","position","handleDateChange","itemPanes","menuItem","event","selection","Set","sort","cartPanes","Tab","panes","Modal","centered","selectedUserId","show","onHide","bsPrefix","Title","Body","Footer","closeButton","Form","Field","nameError","defaultValue","readOnly","categoryError","notesError","notes","serialError","serial","Users","firstNameError","lastNameError","idError","emailError","handleUserSelectClick","handleAddUserClick","email","phone","tranactions","checkErrorUpdateDataSet","handleSubmitClick","handleDropdownAddition","courseOptions","handleDropdownChange","columnSet","reduce","open","table","basic","Divider","clearing","multiple","allowAdditions","onAddItem","Inventory","Staff","dataSet","roles","handleDropdownAdditionRoles","roleOptions","handleDropdownAdditionCourses","handleDropdownChangeCourses","handleDropdownChangeRoles","type","Transactions","App","handleDataUpdate","utils","DateFnsUtils","md","exact","path","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c11ff9ac.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport { Dropdown, Icon } from \"semantic-ui-react\";\r\n\r\n// const sampleUser = { firstName: \"User\", lastName: \"Name\" };\r\n\r\nconst trigger = (\r\n  <h3>\r\n    User Name <Icon name=\"chevron down\" />\r\n  </h3>\r\n);\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <Row className=\"header\">\r\n        <Col>\r\n          <h2>\r\n            <Icon name=\"camera\" />\r\n            CageIMS\r\n          </h2>\r\n        </Col>\r\n        <Col>\r\n          <Dropdown\r\n            className=\"header-dropdown\"\r\n            trigger={trigger}\r\n            icon={null}\r\n            direction=\"left\"\r\n          >\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item icon=\"settings\" text=\"Settings\" />\r\n              <Dropdown.Item\r\n                icon=\"sign-out\"\r\n                text=\"Sign Out\"\r\n                as={Link}\r\n                to=\"/logout\"\r\n              />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport { Icon } from \"semantic-ui-react\";\r\nimport { Nav, Navbar } from \"react-bootstrap\";\r\n\r\nclass Sidebar extends Component {\r\n  render() {\r\n    return (\r\n      <Navbar variant=\"dark\" className=\"sidebar flex-column\">\r\n        <Nav className=\"flex-column\">\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#/\">\r\n              <h4>\r\n                <Icon name=\"home\" />\r\n                Home\r\n              </h4>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#/checkinout\">\r\n              <h4>\r\n                <Icon name=\"sync\" />\r\n                Check In/Out\r\n              </h4>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#/users\">\r\n              <h4>\r\n                <Icon name=\"users\" />\r\n                Users\r\n              </h4>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#/inventory\">\r\n              <h4>\r\n                <Icon name=\"camera\" />\r\n                Inventory\r\n              </h4>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#/staff\">\r\n              <h4>\r\n                <Icon name=\"user\" />\r\n                Staff\r\n              </h4>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#/transactions\">\r\n              <h4>\r\n                <Icon name=\"history\" />\r\n                Transactions\r\n              </h4>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { Component } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { forwardRef } from \"react\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => (\r\n    <Clear style={{ color: \"white\" }} {...props} ref={ref} />\r\n  )),\r\n  Search: forwardRef((props, ref) => (\r\n    <Search style={{ color: \"white\" }} {...props} ref={ref} />\r\n  )),\r\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\nclass Table extends Component {\r\n  render() {\r\n    return (\r\n      <MaterialTable\r\n        style={{ flexGrow: 1 }}\r\n        components={{\r\n          Toolbar: (props) => (\r\n            <div className=\"table-header MuiPaper-rounded MuiPaper-elevation2\">\r\n              <MTableToolbar {...props} />\r\n            </div>\r\n          ),\r\n          Search: (props) => <div style={{ color: \"white\" }}></div>,\r\n        }}\r\n        icons={tableIcons}\r\n        title={this.props.title}\r\n        columns={this.props.columns}\r\n        data={this.props.data}\r\n        options={{\r\n          search: true,\r\n          paging: false,\r\n          rowStyle: (rowData) => ({\r\n            backgroundColor: rowData.backgroundColor\r\n              ? rowData.backgroundColor\r\n              : rowData.tableData.id % 2 === 0\r\n              ? \"#FAFAFA\"\r\n              : \"#FFFFFF\",\r\n          }),\r\n        }}\r\n        onRowClick={this.props.onRowClick}\r\n      ></MaterialTable>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;\r\n","import React, { Component } from \"react\";\r\nimport { Input, Button, Icon, Form, Tab } from \"semantic-ui-react\";\r\nimport { Container, Col, Row, Modal } from \"react-bootstrap\";\r\nimport Table from \"../common/Table\";\r\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\r\n\r\nclass CheckInOut extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleSearchResult = this.handleSearchResult.bind(this);\r\n    this.handleTransactionsChanges = this.handleDataChanges.bind(this);\r\n    this.state = {\r\n      error: false,\r\n      userFound: \"\",\r\n      // {\r\n      //     fname: \"Greg\",\r\n      //     lname: \"Smelkov\",\r\n      //     uid: \"12345\",\r\n      //     courses: [\"Photography I\", \"Photography II\"],\r\n      // },\r\n    };\r\n  }\r\n\r\n  handleSearchResult(userFound) {\r\n    // console.log(userFound);\r\n    this.setState({ userFound });\r\n  }\r\n\r\n  handleDataChanges(data) {\r\n    this.props.onUpdateData(data);\r\n  }\r\n\r\n  render() {\r\n    const userFound = this.state.userFound;\r\n    let page;\r\n    if (!userFound)\r\n      page = (\r\n        <Search\r\n          users={this.props.data.users}\r\n          onSuccessfulSearchResult={this.handleSearchResult}\r\n        />\r\n      );\r\n    else\r\n      page = (\r\n        <CheckInOutViewUser\r\n          data={this.props.data}\r\n          onDoneClick={this.handleSearchResult}\r\n          selectedUser={this.state.userFound}\r\n          onUpdateData={this.handleTransactionsChanges}\r\n        />\r\n      );\r\n    return <Container className=\"checkinout\">{page}</Container>;\r\n  }\r\n}\r\n\r\nexport default CheckInOut;\r\n\r\nclass Search extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: false,\r\n    };\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ searchInput: e.target.value });\r\n  };\r\n\r\n  handleClick = () => {\r\n    const users = this.props.users.filter(\r\n      (user) => user.uid === this.state.searchInput\r\n    );\r\n    if (users.length > 0) {\r\n      this.props.onSuccessfulSearchResult(users[0]);\r\n    } else {\r\n      this.setState({ error: true });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const isError = this.state.error;\r\n    return (\r\n      <div className=\"checkinout-search\">\r\n        <h1>Check In/Out</h1>\r\n        <Input\r\n          error={this.state.error}\r\n          onChange={this.handleChange}\r\n          size=\"huge\"\r\n          fluid\r\n          icon=\"users\"\r\n          iconPosition=\"left\"\r\n          placeholder=\"Search by exact ID...\"\r\n        />\r\n        {isError && (\r\n          <div className=\"error-text\">\r\n            <p>Error: ID is invalid.</p>\r\n          </div>\r\n        )}\r\n        <Button size=\"big\" animated onClick={this.handleClick}>\r\n          <Button.Content visible>Search</Button.Content>\r\n          <Button.Content hidden>\r\n            <Icon name=\"search\" />\r\n          </Button.Content>\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass CheckInOutViewUser extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      op: \"\",\r\n\r\n      selectedItemId: null,\r\n      selectedItem: {},\r\n\r\n      selectedItemsToReturn: [],\r\n\r\n      transactions: [],\r\n      items: [],\r\n\r\n      newTransactions: [],\r\n\r\n      isCheckoutModalOpen: false,\r\n    };\r\n  }\r\n\r\n  getTransactionsToShow = (preSetTransactions) => {\r\n    let transactions = Array.from(\r\n      (preSetTransactions\r\n        ? preSetTransactions\r\n        : this.props.data.transactions\r\n      ).filter(\r\n        (item) =>\r\n          item.uid === this.props.selectedUser.uid && !item.checkedInDate\r\n      )\r\n    );\r\n    transactions.forEach((transaction) => {\r\n      let result = this.props.data.users.filter(\r\n        (user) => transaction.uid === user.uid\r\n      );\r\n      transaction.fname = result[0] ? result[0].fname : \"\";\r\n      transaction.lname = result[0] ? result[0].lname : \"\";\r\n      result = this.props.data.items.filter(\r\n        (item) => transaction.iid === item.iid\r\n      );\r\n      transaction.name = result[0] ? result[0].name : \"\";\r\n      transaction.category = result[0] ? result[0].category : \"\";\r\n\r\n      transaction.backgroundColor =\r\n        !transaction.checkedInDate &&\r\n        new Date(transaction.dueDate).getTime() < new Date().getTime()\r\n          ? \"mistyrose\"\r\n          : \"\";\r\n    });\r\n    return transactions;\r\n  };\r\n\r\n  getItemsToShow = (preSetItems) => {\r\n    let items = Array.from(\r\n      (preSetItems ? preSetItems : this.props.data.items).filter(\r\n        (item) =>\r\n          !item.atid &&\r\n          this.props.selectedUser.courses.some((course) =>\r\n            item.courses.includes(course)\r\n          )\r\n      )\r\n    );\r\n    return items;\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      transactions: this.getTransactionsToShow(),\r\n      items: this.getItemsToShow(),\r\n    });\r\n  }\r\n\r\n  handleDoneClick = () => {\r\n    this.props.onDoneClick(\"\");\r\n  };\r\n\r\n  handleOpSelectClick = (e, op) => {\r\n    this.state.transactions.forEach((transaction) => {\r\n      if (transaction.tableData) transaction.tableData.checked = false;\r\n    });\r\n    this.state.items.forEach((item) => {\r\n      if (item.tableData) item.tableData.checked = false;\r\n    });\r\n    this.setState({ op, isCheckoutModalOpen: false });\r\n  };\r\n\r\n  close = () =>\r\n    this.setState({\r\n      selectedItemId: null,\r\n      isCheckoutModalOpen: false,\r\n    });\r\n\r\n  handleChange = (e, userProp) => {\r\n    const val = e.target.value;\r\n    this.setState((prevState) => {\r\n      let selectedItem = Object.assign({}, prevState.selectedItem);\r\n      selectedItem[userProp] = val;\r\n      return { selectedItem };\r\n    });\r\n  };\r\n\r\n  handleRowItemClick = (e, rowData) => {\r\n    if (this.state.op === \"checkin\") {\r\n      let transactions = this.state.transactions;\r\n      const index = transactions.indexOf(rowData);\r\n      transactions[index].tableData.checked = !transactions[index].tableData\r\n        .checked;\r\n      this.setState({ transactions });\r\n    } else if (this.state.op === \"checkout\") {\r\n      let items = this.state.items;\r\n      const index = items.indexOf(rowData);\r\n      items[index].tableData.checked = !items[index].tableData.checked;\r\n      this.setState({ items });\r\n    } else {\r\n      this.setState({\r\n        selectedItemId: rowData.tid,\r\n        selectedItem: rowData,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleReturnSelectedItemsClick = (e) => {\r\n    let data = Object.assign({}, this.props.data);\r\n    const completedTransactionIds = this.state.transactions\r\n      .filter((transaction) => transaction.tableData?.checked)\r\n      .map((transaction) => transaction.tid);\r\n    completedTransactionIds.forEach((id) => {\r\n      let transaction = data.transactions.find(\r\n        (transaction) => transaction.tid === id\r\n      );\r\n      transaction.checkedInDate = new Date().getTime();\r\n      let item = data.items.find((item) => item.iid === transaction.iid);\r\n      item.atid = \"\";\r\n    });\r\n\r\n    this.props.onUpdateData(data);\r\n\r\n    this.setState(\r\n      {\r\n        transactions: this.getTransactionsToShow(),\r\n        items: this.getItemsToShow(),\r\n      },\r\n      this.handleOpSelectClick(e, \"\")\r\n    );\r\n  };\r\n\r\n  handleCheckOutCartButtonClick = (e) => {\r\n    let data = Object.assign({}, this.props.data);\r\n    const itemsToCheckOut = this.state.items.filter(\r\n      (item) => item.tableData?.checked\r\n    );\r\n    let newTransactions = [];\r\n    itemsToCheckOut.forEach((item) => {\r\n      let newAtid = (\r\n        Math.max(\r\n          ...data.transactions.concat(newTransactions).map((t) => t.tid)\r\n        ) + 1\r\n      ).toString();\r\n      newTransactions.push({\r\n        tid: newAtid,\r\n        uid: this.props.selectedUser.uid,\r\n        iid: item.iid,\r\n        checkedOutDate: new Date().getTime(),\r\n        dueDate: new Date().getTime() + 1000 * 60 * 60 * 24 * 2, //temp; adds two days to today\r\n        checkedInDate: \"\",\r\n      });\r\n    });\r\n\r\n    this.setState({ newTransactions, isCheckoutModalOpen: true });\r\n  };\r\n\r\n  handleConfirmCheckOutButtonClick = (e) => {\r\n    let data = Object.assign({}, this.props.data);\r\n\r\n    console.log(this.state.newTransactions);\r\n    data.transactions = data.transactions.concat(this.state.newTransactions);\r\n    console.log(data);\r\n\r\n    this.state.newTransactions.forEach(\r\n      (transaction) =>\r\n        (data.items.find((item) => item.iid === transaction.iid).atid =\r\n          transaction.tid)\r\n    );\r\n\r\n    this.props.onUpdateData(data);\r\n    this.setState(\r\n      {\r\n        transactions: this.getTransactionsToShow(data.transactions),\r\n        items: this.getItemsToShow(),\r\n      },\r\n      this.handleOpSelectClick(e, \"\")\r\n    );\r\n  };\r\n\r\n  formatDate = (dateString) => {\r\n    if (!dateString) return \"\";\r\n    const date = new Date(dateString);\r\n    return (\r\n      date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear()\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const selectedItemId = this.state.selectedItemId;\r\n    const selectedItem = this.state.selectedItem;\r\n\r\n    const handleDateChange = (date, iid) => {\r\n      let newTransactions = Array.from(this.state.newTransactions);\r\n      newTransactions.find(\r\n        (transaction) => transaction.iid === iid\r\n      ).dueDate = date.getTime();\r\n      this.setState({ newTransactions });\r\n    };\r\n\r\n    const currentlyHeldColumnSet = [\r\n      { title: \"Item Name\", field: \"name\" },\r\n      { title: \"Category\", field: \"category\" },\r\n      { title: \"Transaction Notes\", field: \"notes\" },\r\n      {\r\n        title: \"Checked Out\",\r\n        field: \"checkedOutDate\",\r\n        render: (rowData) => this.formatDate(rowData.checkedOutDate),\r\n      },\r\n      {\r\n        title: \"Due Date\",\r\n        field: \"dueDate\",\r\n        render: (rowData) => this.formatDate(rowData.dueDate),\r\n      },\r\n    ];\r\n\r\n    const itemsColumnSet = [\r\n      { title: \"Item Name\", field: \"name\" },\r\n      { title: \"Category\", field: \"category\" },\r\n      { title: \"Notes\", field: \"notes\" },\r\n    ];\r\n\r\n    const cartColumnSet = [\r\n      { title: \"Item Name\", field: \"name\" },\r\n      { title: \"Category\", field: \"category\" },\r\n    ];\r\n\r\n    const checkOutColumnSet = [\r\n      { title: \"Item Name\", field: \"name\" },\r\n      { title: \"Category\", field: \"category\" },\r\n      // { title: \"Checked Out\", field: \"checkedOutDate\", render: (rowData) => <input />},\r\n      {\r\n        title: \"Due Date\",\r\n        field: \"dueDate\",\r\n        render: (rowData) => (\r\n          <KeyboardDatePicker\r\n            autoOk\r\n            variant=\"inline\"\r\n            inputVariant=\"outlined\"\r\n            label=\"Select due date\"\r\n            format=\"MM/dd/yyyy\"\r\n            value={\r\n              new Date(\r\n                this.state.newTransactions.find(\r\n                  (transaction) => rowData.iid === transaction.iid\r\n                ).dueDate\r\n              )\r\n            }\r\n            InputAdornmentProps={{ position: \"end\" }}\r\n            onChange={(date) => handleDateChange(date, rowData.iid)}\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n\r\n    let itemPanes = [\r\n      {\r\n        menuItem: \"All\",\r\n        render: () => (\r\n          <Table\r\n            data={this.state.items}\r\n            columns={itemsColumnSet}\r\n            title={<h3>All</h3>}\r\n            onRowClick={(event, rowData) =>\r\n              this.handleRowItemClick(event, rowData)\r\n            }\r\n            options={{ selection: true }}\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n\r\n    const categories = [\r\n      ...new Set(this.state.items.map((item) => item.category)),\r\n    ].sort();\r\n    categories.forEach((category) => {\r\n      itemPanes.push({\r\n        menuItem: category,\r\n        render: () => (\r\n          <Table\r\n            data={this.state.items.filter((item) => item.category === category)}\r\n            columns={itemsColumnSet}\r\n            title={<h3>{category}</h3>}\r\n            onRowClick={(event, rowData) =>\r\n              this.handleRowItemClick(event, rowData)\r\n            }\r\n            options={{ selection: true }}\r\n          />\r\n        ),\r\n      });\r\n    });\r\n\r\n    const cartPanes = [\r\n      {\r\n        menuItem: \"\",\r\n        render: () => (\r\n          <Table\r\n            data={this.state.items.filter((item) => item.tableData?.checked)}\r\n            columns={cartColumnSet}\r\n            title={<h3>Cart</h3>}\r\n            onRowClick={(event, rowData) =>\r\n              this.handleRowItemClick(event, rowData)\r\n            }\r\n            options={{ selection: true }}\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n\r\n    let pageOp;\r\n    if (this.state.op === \"checkin\") {\r\n      pageOp = (\r\n        <div className=\"checkinout-viewuser\">\r\n          <Row className=\"page-menu\">\r\n            <h1>\r\n              {this.props.selectedUser.fname +\r\n                \" \" +\r\n                this.props.selectedUser.lname}{\" \"}\r\n              -- Check In/Return\r\n            </h1>\r\n            <Button\r\n              onClick={(e) => {\r\n                this.handleOpSelectClick(e, \"\");\r\n              }}\r\n              size=\"big\"\r\n              animated\r\n              color=\"green\"\r\n            >\r\n              <Button.Content visible>Back</Button.Content>\r\n              <Button.Content hidden>\r\n                <Icon name=\"arrow circle left\" />\r\n              </Button.Content>\r\n            </Button>\r\n          </Row>\r\n          <Row>\r\n            <div className=\"current-table-container\">\r\n              <Table\r\n                data={this.state.transactions}\r\n                columns={currentlyHeldColumnSet}\r\n                title={<h3>Currently held items:</h3>}\r\n                onRowClick={(event, rowData) =>\r\n                  this.handleRowItemClick(event, rowData)\r\n                }\r\n                options={{ selection: true }}\r\n              />\r\n            </div>\r\n          </Row>\r\n          <Row className=\"flex-end\">\r\n            <Button\r\n              onClick={(e) => {\r\n                this.handleOpSelectClick(e, \"\");\r\n              }}\r\n              color=\"red\"\r\n              size=\"big\"\r\n            >\r\n              <Button.Content visible>Cancel</Button.Content>\r\n            </Button>\r\n            <Button\r\n              onClick={(e) => {\r\n                this.handleReturnSelectedItemsClick(e);\r\n              }}\r\n              color=\"orange\"\r\n              size=\"big\"\r\n            >\r\n              <Button.Content visible>Return Selected Items</Button.Content>\r\n            </Button>\r\n          </Row>\r\n        </div>\r\n      );\r\n    } else if (this.state.op === \"checkout\") {\r\n      pageOp = (\r\n        <div className=\"checkinout-viewuser\">\r\n          <Row className=\"page-menu\">\r\n            <h1>\r\n              {this.props.selectedUser.fname +\r\n                \" \" +\r\n                this.props.selectedUser.lname}{\" \"}\r\n              -- Check Out/Borrow\r\n            </h1>\r\n            <Button\r\n              onClick={(e) => {\r\n                this.handleOpSelectClick(e, \"\");\r\n              }}\r\n              size=\"big\"\r\n              animated\r\n              color=\"green\"\r\n            >\r\n              <Button.Content visible>Back</Button.Content>\r\n              <Button.Content hidden>\r\n                <Icon name=\"arrow circle left\" />\r\n              </Button.Content>\r\n            </Button>\r\n          </Row>\r\n          <Row>\r\n            <div className=\"checkout-table-wrapper\">\r\n              <Tab className=\"checkout-inv-table\" panes={itemPanes} />\r\n              <Tab className=\"checkout-cart-table\" panes={cartPanes} />\r\n              <Modal\r\n                centered\r\n                size={this.state.selectedUserId >= 0 ? \"xl\" : \"lg\"}\r\n                show={this.state.isCheckoutModalOpen}\r\n                onHide={this.close}\r\n              >\r\n                <Modal.Header bsPrefix=\"modal-header\">\r\n                  <Modal.Title>Check Out</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                  <Row>\r\n                    <Col>\r\n                      <Table\r\n                        data={this.state.items.filter(\r\n                          (item) => item.tableData?.checked\r\n                        )}\r\n                        columns={checkOutColumnSet}\r\n                        title={<h3>Cart</h3>}\r\n                        // onRowClick={(event, rowData) =>\r\n                        //     this.handleRowItemClick(event, rowData)\r\n                        // }\r\n                        options={{ selection: false }}\r\n                      />\r\n                    </Col>\r\n                  </Row>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                  <Button\r\n                    onClick={(e) => {\r\n                      this.close();\r\n                    }}\r\n                    color=\"red\"\r\n                    size=\"big\"\r\n                  >\r\n                    <Button.Content visible>Cancel</Button.Content>\r\n                  </Button>\r\n                  <Button\r\n                    onClick={(e) => {\r\n                      this.handleConfirmCheckOutButtonClick(e);\r\n                    }}\r\n                    color=\"blue\"\r\n                    size=\"big\"\r\n                  >\r\n                    <Button.Content visible>Confirm Check Out</Button.Content>\r\n                  </Button>\r\n                </Modal.Footer>\r\n              </Modal>\r\n            </div>\r\n          </Row>\r\n          <Row className=\"flex-end\">\r\n            <Button\r\n              onClick={(e) => {\r\n                this.handleOpSelectClick(e, \"\");\r\n              }}\r\n              color=\"red\"\r\n              size=\"big\"\r\n            >\r\n              <Button.Content visible>Cancel</Button.Content>\r\n            </Button>\r\n            <Button\r\n              onClick={(e) => {\r\n                this.handleCheckOutCartButtonClick(e);\r\n              }}\r\n              color=\"blue\"\r\n              size=\"big\"\r\n            >\r\n              <Button.Content visible>Check Out Selected Items</Button.Content>\r\n            </Button>\r\n          </Row>\r\n        </div>\r\n      );\r\n    } else {\r\n      pageOp = (\r\n        <div className=\"checkinout-viewuser\">\r\n          <Row className=\"page-menu\">\r\n            <h1>\r\n              {this.props.selectedUser.fname +\r\n                \" \" +\r\n                this.props.selectedUser.lname}\r\n            </h1>\r\n            <Button\r\n              onClick={this.handleDoneClick}\r\n              size=\"big\"\r\n              animated\r\n              color=\"green\"\r\n            >\r\n              <Button.Content visible>Complete Transactions</Button.Content>\r\n              <Button.Content hidden>\r\n                <Icon name=\"check\" />\r\n              </Button.Content>\r\n            </Button>\r\n          </Row>\r\n          <Row>\r\n            <div className=\"current-table-container\">\r\n              <Table\r\n                data={this.state.transactions}\r\n                columns={currentlyHeldColumnSet}\r\n                title={<h3>Currently held items:</h3>}\r\n                onRowClick={(event, rowData) =>\r\n                  this.handleRowItemClick(event, rowData)\r\n                }\r\n              />\r\n              <Modal\r\n                centered\r\n                size={this.state.selectedItemId >= 0 ? \"lg\" : \"lg\"}\r\n                show={selectedItemId != null}\r\n                onHide={this.close}\r\n              >\r\n                <Modal.Header closeButton bsPrefix=\"modal-header\">\r\n                  <Modal.Title>Item</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                  <Row>\r\n                    <Col>\r\n                      <Form>\r\n                        <Form.Field>\r\n                          <label>\r\n                            First Name:\r\n                            {this.state.nameError && (\r\n                              <span className=\"error-text modal-label-error-text\">\r\n                                Error: Field cannot be empty.\r\n                              </span>\r\n                            )}\r\n                          </label>\r\n                          <Form.Input\r\n                            error={this.state.nameError}\r\n                            name=\"fname\"\r\n                            placeholder=\"First Name\"\r\n                            defaultValue={selectedItem.fname}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                          <label>\r\n                            Last Name:\r\n                            {this.state.nameError && (\r\n                              <span className=\"error-text modal-label-error-text\">\r\n                                Error: Field cannot be empty.\r\n                              </span>\r\n                            )}\r\n                          </label>\r\n                          <Form.Input\r\n                            error={this.state.nameError}\r\n                            name=\"lname\"\r\n                            placeholder=\"Last Name\"\r\n                            defaultValue={selectedItem.lname}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                          <label>\r\n                            Item Name:\r\n                            {this.state.categoryError && (\r\n                              <span className=\"error-text modal-label-error-text\">\r\n                                Error: Field cannot be empty.\r\n                              </span>\r\n                            )}\r\n                          </label>\r\n                          <Form.Input\r\n                            error={this.state.categoryError}\r\n                            name=\"name\"\r\n                            placeholder=\"name\"\r\n                            defaultValue={selectedItem.category}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                          <label>\r\n                            Category:\r\n                            {this.state.notesError && (\r\n                              <span className=\"error-text modal-label-error-text\">\r\n                                Error: Field cannot be empty.\r\n                              </span>\r\n                            )}\r\n                          </label>\r\n                          <Form.Input\r\n                            name=\"category\"\r\n                            error={this.state.notesError}\r\n                            placeholder=\"Category\"\r\n                            defaultValue={selectedItem.notes}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                          <label>\r\n                            Serial:\r\n                            {this.state.serialError && (\r\n                              <span className=\"error-text modal-label-error-text\">\r\n                                Error: Field cannot be empty.\r\n                              </span>\r\n                            )}\r\n                          </label>\r\n                          <Form.Input\r\n                            name=\"serial\"\r\n                            error={this.state.serialError}\r\n                            placeholder=\"Serial\"\r\n                            defaultValue={selectedItem.serial}\r\n                            onChange={(e) => {\r\n                              this.handleChange(e, \"serial\");\r\n                            }}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                          <label>\r\n                            Notes:\r\n                            {this.state.notesError && (\r\n                              <span className=\"error-text modal-label-error-text\">\r\n                                Error: Field cannot be empty.\r\n                              </span>\r\n                            )}\r\n                          </label>\r\n                          <Form.Input\r\n                            name=\"notes\"\r\n                            error={this.state.notesError}\r\n                            placeholder=\"Notes\"\r\n                            defaultValue={selectedItem.notes}\r\n                            onChange={(e) => {\r\n                              this.handleChange(e, \"notes\");\r\n                            }}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                          <label>Checked Out:</label>\r\n                          <Form.Input\r\n                            name=\"checkedOut\"\r\n                            placeholder=\"Checked Out\"\r\n                            defaultValue={selectedItem.checkedOutDate}\r\n                            onChange={(e) => {\r\n                              this.handleChange(e, \"checkedOutDate\");\r\n                            }}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                          <label>Checked In:</label>\r\n                          <Form.Input\r\n                            name=\"checkedIn\"\r\n                            placeholder=\"Checked In\"\r\n                            error={!selectedItem.checkedInDate}\r\n                            defaultValue={selectedItem.checkedInDate}\r\n                            onChange={(e) => {\r\n                              this.handleChange(e, \"checkedInDate\");\r\n                            }}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                          <label>Due Date:</label>\r\n                          <Form.Input\r\n                            name=\"due\"\r\n                            placeholder=\"Due Date\"\r\n                            defaultValue={selectedItem.dueDate}\r\n                            onChange={(e) => {\r\n                              this.handleChange(e, \"dueDate\");\r\n                            }}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                      </Form>\r\n                    </Col>\r\n                  </Row>\r\n                </Modal.Body>\r\n                <Modal.Footer></Modal.Footer>\r\n              </Modal>\r\n            </div>\r\n          </Row>\r\n          <Row className=\"checkinout-buttons\">\r\n            <Button\r\n              onClick={(e) => {\r\n                this.handleOpSelectClick(e, \"checkin\");\r\n              }}\r\n              color=\"orange\"\r\n              size=\"big\"\r\n            >\r\n              <Button.Content visible>Check In/Return</Button.Content>\r\n            </Button>\r\n            <Button\r\n              onClick={(e) => {\r\n                this.handleOpSelectClick(e, \"checkout\");\r\n              }}\r\n              color=\"blue\"\r\n              size=\"big\"\r\n            >\r\n              <Button.Content visible>Check Out/Borrow</Button.Content>\r\n            </Button>\r\n          </Row>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return pageOp;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Divider, Button, Form, Dropdown, Tab } from \"semantic-ui-react\";\r\nimport { Col, Row, Modal } from \"react-bootstrap\";\r\nimport Table from \"../common/Table\";\r\n\r\nclass Users extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.state = {\r\n      columnSet: [\r\n        { title: \"First Name\", field: \"fname\" },\r\n        { title: \"Last Name\", field: \"lname\" },\r\n        {\r\n          title: \"Courses\",\r\n          field: \"courses\",\r\n          render: (rowData) => {\r\n            return rowData.courses.length > 0\r\n              ? rowData.courses.reduce((result, item) => (\r\n                  <>\r\n                    {result}\r\n                    {\", \"}\r\n                    {item}\r\n                  </>\r\n                ))\r\n              : \"\";\r\n          },\r\n        },\r\n      ],\r\n      open: false,\r\n\r\n      firstNameError: false,\r\n      lastNameError: false,\r\n      idError: false,\r\n      emailError: false,\r\n\r\n      selectedUserId: null,\r\n      selectedUser: {\r\n        fname: \"\",\r\n        lname: \"\",\r\n        courses: [],\r\n        uid: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        notes: \"\",\r\n        transactions: [],\r\n      },\r\n      courseOptions: [\r\n        { text: \"Photography I\", value: \"Photography I\" },\r\n        { text: \"Photography II\", value: \"Photography II\" },\r\n        { text: \"Documentary Image\", value: \"Documentary Image\" },\r\n      ],\r\n    };\r\n  }\r\n\r\n  close = () =>\r\n    this.setState({\r\n      selectedUserId: null,\r\n      firstNameError: false,\r\n      lastNameError: false,\r\n      idError: false,\r\n      emailError: false,\r\n    });\r\n\r\n  handleChange = (e, userProp) => {\r\n    const val = e.target.value;\r\n    this.setState((prevState) => {\r\n      let selectedUser = Object.assign({}, prevState.selectedUser);\r\n      selectedUser[userProp] = val;\r\n      return { selectedUser };\r\n    });\r\n  };\r\n\r\n  handleUserSelectClick = (e, rowData) => {\r\n    this.setState({\r\n      selectedUserId: rowData.tableData.id,\r\n      selectedUser: this.props.data.users[rowData.tableData.id],\r\n    });\r\n    this.setState((prevState) => {\r\n      let selectedUser = Object.assign({}, prevState.selectedUser);\r\n      let transactions = Array.from(\r\n        this.props.data.transactions.filter(\r\n          (name) => name.uid === selectedUser.uid\r\n        )\r\n      );\r\n      transactions.forEach((transaction) => {\r\n        transaction.backgroundColor =\r\n          !transaction.checkedInDate &&\r\n          new Date(transaction.dueDate).getTime() < new Date().getTime()\r\n            ? \"mistyrose\"\r\n            : \"\";\r\n      });\r\n      selectedUser[\"transactions\"] = transactions;\r\n      return { selectedUser };\r\n    });\r\n  };\r\n\r\n  handleAddUserClick = () => {\r\n    this.setState({\r\n      selectedUserId: -1,\r\n      selectedUser: {\r\n        fname: \"\",\r\n        lname: \"\",\r\n        courses: [],\r\n        uid: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        notes: \"\",\r\n        tranactions: [],\r\n      },\r\n    });\r\n  };\r\n\r\n  checkErrorUpdateDataSet = () => {\r\n    if (\r\n      !this.state.firstNameError &&\r\n      !this.state.lastNameError &&\r\n      !this.state.idError &&\r\n      !this.state.emailError\r\n    ) {\r\n      let data = Object.assign({}, this.props.data);\r\n      if (this.state.selectedUserId >= 0) {\r\n        data.users[this.state.selectedUserId] = this.state.selectedUser;\r\n      } else {\r\n        data.users.push(this.state.selectedUser);\r\n      }\r\n      this.props.onUpdateData(data);\r\n      this.close();\r\n    }\r\n  };\r\n\r\n  handleSubmitClick = () => {\r\n    this.setState(\r\n      {\r\n        firstNameError: this.state.selectedUser.fname === \"\",\r\n        lastNameError: this.state.selectedUser.lname === \"\",\r\n        idError: this.state.selectedUser.uid === \"\",\r\n        emailError: this.state.selectedUser.email === \"\",\r\n      },\r\n      this.checkErrorUpdateDataSet\r\n    );\r\n  };\r\n\r\n  handleDropdownAddition = (e, { value }) => {\r\n    this.setState((prevState) => ({\r\n      courseOptions: [{ text: value, value }, ...prevState.courseOptions],\r\n    }));\r\n  };\r\n\r\n  handleDropdownChange = (e, { value }) => {\r\n    const val = value;\r\n    this.setState((prevState) => {\r\n      let selectedUser = Object.assign({}, prevState.selectedUser);\r\n      selectedUser.courses = val;\r\n      return { selectedUser };\r\n    });\r\n  };\r\n\r\n  formatDate = (dateString) => {\r\n    if (!dateString) return \"\";\r\n    const date = new Date(dateString);\r\n    return (\r\n      date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear()\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const selectedUserId = this.state.selectedUserId;\r\n    const selectedUser = this.state.selectedUser;\r\n    let table;\r\n    if (this.state.selectedUserId != null) {\r\n      if (this.state.selectedUserId >= 0) {\r\n        const panes = [\r\n          {\r\n            menuItem: \"Due Items\",\r\n            render: () => (\r\n              <Table\r\n                title={\r\n                  this.state.selectedUser.fname +\r\n                  \" \" +\r\n                  this.state.selectedUser.lname\r\n                }\r\n                columns={[\r\n                  { title: \"Item ID\", field: \"iid\" },\r\n                  { title: \"Transaction ID\", field: \"tid\" },\r\n                  {\r\n                    title: \"Checked Out Date\",\r\n                    field: \"checkedOutDate\",\r\n                    render: (rowData) =>\r\n                      this.formatDate(rowData.checkedOutDate),\r\n                  },\r\n                  {\r\n                    title: \"Due Date\",\r\n                    field: \"dueDate\",\r\n                    render: (rowData) => this.formatDate(rowData.dueDate),\r\n                  },\r\n                ]}\r\n                data={Array.from(\r\n                  this.state.selectedUser.transactions.filter(\r\n                    (name) => name.checkedInDate === \"\"\r\n                  )\r\n                )}\r\n              ></Table>\r\n            ),\r\n          },\r\n          {\r\n            menuItem: \"Completed Transactions\",\r\n            render: () => (\r\n              <Table\r\n                title={\r\n                  this.state.selectedUser.fname +\r\n                  \" \" +\r\n                  this.state.selectedUser.lname\r\n                }\r\n                columns={[\r\n                  { title: \"Item ID\", field: \"iid\" },\r\n                  { title: \"Transaction ID\", field: \"tid\" },\r\n                  {\r\n                    title: \"Checked Out Date\",\r\n                    field: \"checkedOutDate\",\r\n                    render: (rowData) =>\r\n                      this.formatDate(rowData.checkedOutDate),\r\n                  },\r\n                  {\r\n                    title: \"Checked In Date\",\r\n                    field: \"checkedInDate\",\r\n                    render: (rowData) => this.formatDate(rowData.checkedInDate),\r\n                  },\r\n                ]}\r\n                data={Array.from(\r\n                  this.state.selectedUser.transactions.filter(\r\n                    (name) => !(name.checkedInDate === \"\")\r\n                  )\r\n                )}\r\n              ></Table>\r\n            ),\r\n          },\r\n        ];\r\n        table = (\r\n          <Col>\r\n            <Tab panes={panes} className=\"stretch-h flex-col\" />\r\n          </Col>\r\n        );\r\n      }\r\n    }\r\n\r\n    const courseOptions = this.state.courseOptions;\r\n    return (\r\n      <Col className=\"stretch-h flex-col\">\r\n        <div className=\"top-bar\">\r\n          <Button basic onClick={this.handleAddUserClick}>\r\n            Create New User\r\n          </Button>\r\n          <Divider clearing />\r\n        </div>\r\n        <div className=\"page-content stretch-h\">\r\n          <Col className=\"stretch-h flex-col\">\r\n            <Table\r\n              data={Array.from(this.props.data.users)}\r\n              columns={this.state.columnSet}\r\n              title={<h2>Users</h2>}\r\n              onRowClick={(event, rowData) =>\r\n                this.handleUserSelectClick(event, rowData)\r\n              }\r\n            />\r\n            <Modal\r\n              centered\r\n              size={this.state.selectedUserId >= 0 ? \"xl\" : \"xl\"}\r\n              show={selectedUserId != null}\r\n              onHide={this.close}\r\n            >\r\n              <Modal.Header closeButton bsPrefix=\"modal-header\">\r\n                <Modal.Title>User</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <Row>\r\n                  <Col>\r\n                    <Form>\r\n                      <Form.Field>\r\n                        <label>\r\n                          First Name:\r\n                          {this.state.firstNameError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          error={this.state.firstNameError}\r\n                          name=\"fname\"\r\n                          placeholder=\"First Name\"\r\n                          defaultValue={selectedUser.fname}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"fname\");\r\n                          }}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>\r\n                          Last Name:\r\n                          {this.state.lastNameError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          error={this.state.lastNameError}\r\n                          name=\"lname\"\r\n                          placeholder=\"Last Name\"\r\n                          defaultValue={selectedUser.lname}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"lname\");\r\n                          }}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Courses:</label>\r\n                        <Dropdown\r\n                          placeholder=\"Courses\"\r\n                          name=\"courses\"\r\n                          fluid\r\n                          multiple\r\n                          search\r\n                          selection\r\n                          allowAdditions\r\n                          options={courseOptions}\r\n                          value={selectedUser.courses}\r\n                          onAddItem={this.handleDropdownAddition}\r\n                          onChange={this.handleDropdownChange}\r\n                        />\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>\r\n                          UML ID:\r\n                          {this.state.idError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          name=\"id\"\r\n                          error={this.state.idError}\r\n                          placeholder=\"UML ID\"\r\n                          defaultValue={selectedUser.uid}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"uid\");\r\n                          }}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>\r\n                          Email:\r\n                          {this.state.emailError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          name=\"email\"\r\n                          error={this.state.emailError}\r\n                          placeholder=\"Email\"\r\n                          defaultValue={selectedUser.email}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"email\");\r\n                          }}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Phone Number:</label>\r\n                        <Form.Input\r\n                          name=\"phone\"\r\n                          placeholder=\"Phone Number\"\r\n                          defaultValue={selectedUser.phone}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"phone\");\r\n                          }}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Notes:</label>\r\n                        <Form.Input\r\n                          name=\"notes\"\r\n                          placeholder=\"Notes\"\r\n                          defaultValue={selectedUser.notes}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"notes\");\r\n                          }}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                    </Form>\r\n                  </Col>\r\n                  {table}\r\n                </Row>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button\r\n                  id=\"add-icon-handler\"\r\n                  variant=\"primary\"\r\n                  onClick={this.handleSubmitClick}\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </Col>\r\n        </div>\r\n      </Col>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Users;\r\n","import React, { Component } from \"react\";\r\nimport { Divider, Button, Form, Dropdown } from \"semantic-ui-react\";\r\nimport { Col, Row, Modal } from \"react-bootstrap\";\r\nimport Table from \"../common/Table\";\r\n\r\nclass Inventory extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.state = {\r\n      columnSet: [\r\n        { title: \"Name\", field: \"name\" },\r\n        { title: \"Category\", field: \"category\" },\r\n        { title: \"Item ID\", field: \"iid\" },\r\n        { title: \"Transaction ID\", field: \"tid\" },\r\n        { title: \"Notes\", field: \"notes\" },\r\n        {\r\n          title: \"Courses\",\r\n          field: \"courses\",\r\n          render: (rowData) => {\r\n            return rowData.courses.length > 0\r\n              ? rowData.courses.reduce((result, item) => (\r\n                  <>\r\n                    {result}\r\n                    {\", \"}\r\n                    {item}\r\n                  </>\r\n                ))\r\n              : \"\";\r\n          },\r\n        },\r\n      ],\r\n      open: false,\r\n\r\n      nameError: false,\r\n      categoryError: false,\r\n      serialError: false,\r\n\r\n      selectedItemId: null,\r\n      selectedItem: {\r\n        name: \"\",\r\n        iid: \"\",\r\n        category: \"\",\r\n        notes: \"\",\r\n        tid: \"\",\r\n        courses: [],\r\n      },\r\n      courseOptions: [\r\n        { text: \"Photography I\", value: \"Photography I\" },\r\n        { text: \"Photography II\", value: \"Photography II\" },\r\n        { text: \"Documentary Image\", value: \"Documentary Image\" },\r\n      ],\r\n    };\r\n  }\r\n\r\n  close = () =>\r\n    this.setState({\r\n      selectedItemId: null,\r\n      nameError: false,\r\n      categoryError: false,\r\n      serialError: false,\r\n    });\r\n\r\n  handleChange = (e, userProp) => {\r\n    const val = e.target.value;\r\n    this.setState((prevState) => {\r\n      let selectedItem = Object.assign({}, prevState.selectedItem);\r\n      selectedItem[userProp] = val;\r\n      return { selectedItem };\r\n    });\r\n  };\r\n\r\n  handleUserSelectClick = (e, rowData) => {\r\n    this.setState({\r\n      selectedItemId: rowData.tableData.id,\r\n      selectedItem: this.props.data.items[rowData.tableData.id],\r\n    });\r\n  };\r\n\r\n  handleAddUserClick = () => {\r\n    this.setState({\r\n      selectedItemId: -1,\r\n      selectedItem: {\r\n        name: \"\",\r\n        iid: \"\",\r\n        category: \"\",\r\n        notes: \"\",\r\n        tid: \"\",\r\n        courses: [],\r\n      },\r\n    });\r\n  };\r\n\r\n  checkErrorUpdateDataSet = () => {\r\n    if (\r\n      !this.state.nameError &&\r\n      !this.state.categoryError &&\r\n      !this.state.serialError\r\n    ) {\r\n      let data = Object.assign({}, this.props.data);\r\n      if (this.state.selectedItemId >= 0) {\r\n        data.items[this.state.selectedItemId] = this.state.selectedItem;\r\n      } else {\r\n        data.items.push(this.state.selectedItem);\r\n      }\r\n      this.props.onUpdateData(data);\r\n      this.close();\r\n    }\r\n  };\r\n\r\n  handleSubmitClick = () => {\r\n    this.setState(\r\n      {\r\n        nameError: this.state.selectedItem.name === \"\",\r\n        categoryError: this.state.selectedItem.category === \"\",\r\n        serialError: this.state.selectedItem.serial === \"\",\r\n      },\r\n      this.checkErrorUpdateDataSet\r\n    );\r\n  };\r\n\r\n  handleDropdownAddition = (e, { value }) => {\r\n    this.setState((prevState) => ({\r\n      courseOptions: [{ text: value, value }, ...prevState.courseOptions],\r\n    }));\r\n  };\r\n\r\n  handleDropdownChange = (e, { value }) => {\r\n    const val = value;\r\n    this.setState((prevState) => {\r\n      let selectedItem = Object.assign({}, prevState.selectedItem);\r\n      selectedItem.courses = val;\r\n      return { selectedItem };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const selectedItemId = this.state.selectedItemId;\r\n    const selectedItem = this.state.selectedItem;\r\n\r\n    const courseOptions = this.state.courseOptions;\r\n    return (\r\n      <Col className=\"stretch-h flex-col\">\r\n        <div className=\"top-bar\">\r\n          <Button basic onClick={this.handleAddUserClick}>\r\n            Create New Item\r\n          </Button>\r\n          <Divider clearing />\r\n        </div>\r\n        <div className=\"page-content stretch-h\">\r\n          <Col className=\"stretch-h flex-col\">\r\n            <Table\r\n              data={Array.from(this.props.data.items)}\r\n              columns={this.state.columnSet}\r\n              title={<h2>Inventory</h2>}\r\n              onRowClick={(event, rowData) =>\r\n                this.handleUserSelectClick(event, rowData)\r\n              }\r\n            />\r\n            <Modal\r\n              centered\r\n              size={this.state.selectedItemId >= 0 ? \"lg\" : \"lg\"}\r\n              show={selectedItemId != null}\r\n              onHide={this.close}\r\n            >\r\n              <Modal.Header closeButton bsPrefix=\"modal-header\">\r\n                <Modal.Title>Item</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <Row>\r\n                  <Col>\r\n                    <Form>\r\n                      <Form.Field>\r\n                        <label>\r\n                          Name:\r\n                          {this.state.nameError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          error={this.state.nameError}\r\n                          name=\"name\"\r\n                          placeholder=\"Name\"\r\n                          defaultValue={selectedItem.name}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"name\");\r\n                          }}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>\r\n                          Category:\r\n                          {this.state.categoryError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          error={this.state.categoryError}\r\n                          name=\"category\"\r\n                          placeholder=\"Category\"\r\n                          defaultValue={selectedItem.category}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"category\");\r\n                          }}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Courses:</label>\r\n                        <Dropdown\r\n                          placeholder=\"Courses\"\r\n                          name=\"courses\"\r\n                          fluid\r\n                          multiple\r\n                          search\r\n                          selection\r\n                          allowAdditions\r\n                          options={courseOptions}\r\n                          value={selectedItem.courses}\r\n                          onAddItem={this.handleDropdownAddition}\r\n                          onChange={this.handleDropdownChange}\r\n                        />\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>\r\n                          Item ID:\r\n                          {this.state.serialError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          name=\"iid\"\r\n                          error={this.state.serialError}\r\n                          placeholder=\"Item ID\"\r\n                          defaultValue={selectedItem.iid}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"iid\");\r\n                          }}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Transaction ID:</label>\r\n                        <Form.Input\r\n                          name=\"tid\"\r\n                          placeholder=\"Transaction ID\"\r\n                          defaultValue={selectedItem.tid}\r\n                          readOnly\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Notes:</label>\r\n                        <Form.Input\r\n                          name=\"notes\"\r\n                          error={this.state.notesError}\r\n                          placeholder=\"Notes\"\r\n                          defaultValue={selectedItem.notes}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"notes\");\r\n                          }}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                    </Form>\r\n                  </Col>\r\n                </Row>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button\r\n                  id=\"add-icon-handler\"\r\n                  variant=\"primary\"\r\n                  onClick={this.handleSubmitClick}\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </Col>\r\n        </div>\r\n      </Col>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Inventory;\r\n","import React, { Component } from \"react\";\r\nimport { Divider, Button, Form, Dropdown } from \"semantic-ui-react\";\r\nimport { Col, Row, Modal } from \"react-bootstrap\";\r\nimport Table from \"../common/Table\";\r\n\r\nclass Staff extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.state = {\r\n      dataSet: [\r\n        {\r\n          fname: \"Seamus\",\r\n          lname: \"Rioux\",\r\n          courses: [\"Photography I\", \"Photography II\"],\r\n          roles: [\"Admin\", \"Staff\"],\r\n          id: \"54321\",\r\n          email: \"seamus.rioux3@gmail.com\",\r\n          phone: \"123-456-7890\",\r\n        },\r\n        {\r\n          fname: \"Greg\",\r\n          lname: \"Smelkov\",\r\n          courses: [\"Photography I\"],\r\n          roles: [\"Admin\"],\r\n          id: \"12345\",\r\n          email: \"greg@gmail.com\",\r\n          phone: \"123-456-7890\",\r\n        },\r\n      ],\r\n      columnSet: [\r\n        { title: \"First Name\", field: \"fname\" },\r\n        { title: \"Last Name\", field: \"lname\" },\r\n        {\r\n          title: \"Courses\",\r\n          field: \"courses\",\r\n          render: (rowData) => {\r\n            return rowData.courses.length > 0\r\n              ? rowData.courses.reduce((result, item) => (\r\n                  <>\r\n                    {result}\r\n                    {\", \"}\r\n                    {item}\r\n                  </>\r\n                ))\r\n              : \"\";\r\n          },\r\n        },\r\n        {\r\n          title: \"Roles\",\r\n          field: \"roles\",\r\n          render: (rowData) => {\r\n            return rowData.roles.length > 0\r\n              ? rowData.roles.reduce((result, item) => (\r\n                  <>\r\n                    {result}\r\n                    {\", \"}\r\n                    {item}\r\n                  </>\r\n                ))\r\n              : \"\";\r\n          },\r\n        },\r\n      ],\r\n      open: false,\r\n\r\n      firstNameError: false,\r\n      lastNameError: false,\r\n      idError: false,\r\n      emailError: false,\r\n\r\n      selectedUserId: null,\r\n      selectedUser: {\r\n        fname: \"\",\r\n        lname: \"\",\r\n        courses: [],\r\n        roles: [],\r\n        id: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n      },\r\n      courseOptions: [\r\n        { text: \"Photography I\", value: \"Photography I\" },\r\n        { text: \"Photography II\", value: \"Photography II\" },\r\n        { text: \"Documentary Image\", value: \"Documentary Image\" },\r\n      ],\r\n      roleOptions: [\r\n        { text: \"Admin\", value: \"Admin\" },\r\n        { text: \"Staff\", value: \"Staff\" },\r\n      ],\r\n    };\r\n  }\r\n\r\n  close = () =>\r\n    this.setState({\r\n      selectedUserId: null,\r\n      firstNameError: false,\r\n      lastNameError: false,\r\n      idError: false,\r\n      emailError: false,\r\n    });\r\n\r\n  handleChange = (e, userProp) => {\r\n    const val = e.target.value;\r\n    this.setState((prevState) => {\r\n      let selectedUser = Object.assign({}, prevState.selectedUser);\r\n      selectedUser[userProp] = val;\r\n      return { selectedUser };\r\n    });\r\n  };\r\n\r\n  handleUserSelectClick = (e, rowData) => {\r\n    this.setState({\r\n      selectedUserId: rowData.tableData.id,\r\n      selectedUser: this.state.dataSet[rowData.tableData.id],\r\n    });\r\n  };\r\n\r\n  handleAddUserClick = () => {\r\n    this.setState({\r\n      selectedUserId: -1,\r\n      selectedUser: {\r\n        fname: \"\",\r\n        lname: \"\",\r\n        courses: [],\r\n        roles: [],\r\n        id: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n      },\r\n    });\r\n  };\r\n\r\n  checkErrorUpdateDataSet = () => {\r\n    if (\r\n      !this.state.firstNameError &&\r\n      !this.state.lastNameError &&\r\n      !this.state.idError &&\r\n      !this.state.emailError\r\n    ) {\r\n      this.setState((prevState) => {\r\n        let dataSet = Array.from(prevState.dataSet);\r\n        if (this.state.selectedUserId >= 0) {\r\n          dataSet[this.state.selectedUserId] = this.state.selectedUser;\r\n        } else {\r\n          dataSet.push(this.state.selectedUser);\r\n        }\r\n        return { dataSet };\r\n      }, this.close);\r\n    }\r\n  };\r\n\r\n  handleSubmitClick = () => {\r\n    this.setState(\r\n      {\r\n        firstNameError: this.state.selectedUser.fname === \"\",\r\n        lastNameError: this.state.selectedUser.lname === \"\",\r\n        idError: this.state.selectedUser.id === \"\",\r\n        emailError: this.state.selectedUser.email === \"\",\r\n      },\r\n      this.checkErrorUpdateDataSet\r\n    );\r\n  };\r\n\r\n  handleDropdownAdditionRoles = (e, { value }) => {\r\n    this.setState((prevState) => ({\r\n      roleOptions: [{ text: value, value }, ...prevState.roleOptions],\r\n    }));\r\n  };\r\n\r\n  handleDropdownAdditionCourses = (e, { value }) => {\r\n    this.setState((prevState) => ({\r\n      courseOptions: [{ text: value, value }, ...prevState.courseOptions],\r\n    }));\r\n  };\r\n\r\n  handleDropdownChangeCourses = (e, { value }) => {\r\n    const val = value;\r\n    this.setState((prevState) => {\r\n      let selectedUser = Object.assign({}, prevState.selectedUser);\r\n      selectedUser.courses = val;\r\n      return { selectedUser };\r\n    });\r\n  };\r\n\r\n  handleDropdownChangeRoles = (e, { value }) => {\r\n    const val = value;\r\n    this.setState((prevState) => {\r\n      let selectedUser = Object.assign({}, prevState.selectedUser);\r\n      selectedUser.roles = val;\r\n      return { selectedUser };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const selectedUserId = this.state.selectedUserId;\r\n    const selectedUser = this.state.selectedUser;\r\n    const courseOptions = this.state.courseOptions;\r\n    const roleOptions = this.state.roleOptions;\r\n    return (\r\n      <Col className=\"stretch-h flex-col\">\r\n        <div className=\"top-bar\">\r\n          <Button basic onClick={this.handleAddUserClick}>\r\n            Create New Staff\r\n          </Button>\r\n          <Divider clearing />\r\n        </div>\r\n        <div className=\"page-content stretch-h\">\r\n          <Col className=\"stretch-h flex-col\">\r\n            <Table\r\n              data={Array.from(this.state.dataSet)}\r\n              columns={this.state.columnSet}\r\n              title={<h2>Staff</h2>}\r\n              onRowClick={(event, rowData) =>\r\n                this.handleUserSelectClick(event, rowData)\r\n              }\r\n            />\r\n            <Modal\r\n              centered\r\n              size={\"lg\"}\r\n              show={selectedUserId != null}\r\n              onHide={this.close}\r\n            >\r\n              <Modal.Header closeButton bsPrefix=\"modal-header\">\r\n                <Modal.Title>Staff</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <Row>\r\n                  <Col>\r\n                    <Form>\r\n                      <Form.Field>\r\n                        <label>\r\n                          First Name:\r\n                          {this.state.firstNameError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          error={this.state.firstNameError}\r\n                          name=\"fname\"\r\n                          placeholder=\"First Name\"\r\n                          defaultValue={selectedUser.fname}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"fname\");\r\n                          }}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>\r\n                          Last Name:\r\n                          {this.state.lastNameError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          error={this.state.lastNameError}\r\n                          name=\"lname\"\r\n                          placeholder=\"Last Name\"\r\n                          defaultValue={selectedUser.lname}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"lname\");\r\n                          }}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Courses:</label>\r\n                        <Dropdown\r\n                          placeholder=\"Courses\"\r\n                          name=\"courses\"\r\n                          fluid\r\n                          multiple\r\n                          search\r\n                          selection\r\n                          allowAdditions\r\n                          options={courseOptions}\r\n                          value={selectedUser.courses}\r\n                          onAddItem={this.handleDropdownAdditionCourses}\r\n                          onChange={this.handleDropdownChangeCourses}\r\n                        />\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Roles:</label>\r\n                        <Dropdown\r\n                          placeholder=\"Roles\"\r\n                          name=\"roles\"\r\n                          fluid\r\n                          multiple\r\n                          search\r\n                          selection\r\n                          allowAdditions\r\n                          options={roleOptions}\r\n                          value={selectedUser.roles}\r\n                          onAddItem={this.handleDropdownAdditionRoles}\r\n                          onChange={this.handleDropdownChangeRoles}\r\n                        />\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>\r\n                          UML ID:\r\n                          {this.state.idError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          name=\"id\"\r\n                          error={this.state.idError}\r\n                          placeholder=\"UML ID\"\r\n                          defaultValue={selectedUser.id}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"id\");\r\n                          }}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>\r\n                          Email:\r\n                          {this.state.emailError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          name=\"email\"\r\n                          error={this.state.emailError}\r\n                          placeholder=\"Email\"\r\n                          defaultValue={selectedUser.email}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"email\");\r\n                          }}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>Phone Number:</label>\r\n                        <Form.Input\r\n                          type=\"phone\"\r\n                          placeholder=\"Phone Number\"\r\n                          defaultValue={selectedUser.phone}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"phone\");\r\n                          }}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                    </Form>\r\n                  </Col>\r\n                </Row>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button\r\n                  id=\"add-icon-handler\"\r\n                  variant=\"primary\"\r\n                  onClick={this.handleSubmitClick}\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </Col>\r\n        </div>\r\n      </Col>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Staff;\r\n","import React, { Component } from \"react\";\r\nimport { Form } from \"semantic-ui-react\";\r\nimport { Col, Row, Modal } from \"react-bootstrap\";\r\nimport Table from \"../common/Table\";\r\n\r\nclass Transactions extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.state = {\r\n      columnSet: [\r\n        { title: \"First Name\", field: \"fname\" },\r\n        { title: \"Last Name\", field: \"lname\" },\r\n        { title: \"Item Name\", field: \"name\" },\r\n        { title: \"Category\", field: \"category\" },\r\n        { title: \"Notes\", field: \"notes\" },\r\n        {\r\n          title: \"Checked Out\",\r\n          field: \"checkedOutDate\",\r\n          render: (rowData) => this.formatDate(rowData.checkedOutDate),\r\n        },\r\n        {\r\n          title: \"Due Date\",\r\n          field: \"dueDate\",\r\n          render: (rowData) => this.formatDate(rowData.dueDate),\r\n        },\r\n        {\r\n          title: \"Checked In\",\r\n          field: \"checkedInDate\",\r\n          render: (rowData) => this.formatDate(rowData.checkedInDate),\r\n        },\r\n      ],\r\n      open: false,\r\n\r\n      selectedItemId: null,\r\n      selectedItem: {\r\n        fname: \"\",\r\n        lname: \"\",\r\n        name: \"\",\r\n        category: \"\",\r\n        notes: \"\",\r\n        checkedOutDate: \"\",\r\n        checkedInDate: \"\",\r\n        dueDate: \"\",\r\n      },\r\n    };\r\n  }\r\n\r\n  close = () =>\r\n    this.setState({\r\n      selectedItemId: null,\r\n    });\r\n\r\n  handleChange = (e, userProp) => {\r\n    const val = e.target.value;\r\n    this.setState((prevState) => {\r\n      let selectedItem = Object.assign({}, prevState.selectedItem);\r\n      selectedItem[userProp] = val;\r\n      return { selectedItem };\r\n    });\r\n  };\r\n\r\n  handleUserSelectClick = (e, rowData) => {\r\n    this.setState({\r\n      selectedItemId: rowData.tid,\r\n      selectedItem: rowData,\r\n    });\r\n  };\r\n\r\n  handleDropdownAddition = (e, { value }) => {\r\n    this.setState((prevState) => ({\r\n      courseOptions: [{ text: value, value }, ...prevState.courseOptions],\r\n    }));\r\n  };\r\n\r\n  handleDropdownChange = (e, { value }) => {\r\n    const val = value;\r\n    this.setState((prevState) => {\r\n      let selectedItem = Object.assign({}, prevState.selectedItem);\r\n      selectedItem.courses = val;\r\n      return { selectedItem };\r\n    });\r\n  };\r\n\r\n  formatDate = (dateString) => {\r\n    if (!dateString) return \"\";\r\n    const date = new Date(dateString);\r\n    return (\r\n      date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear()\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const selectedItemId = this.state.selectedItemId;\r\n    const selectedItem = this.state.selectedItem;\r\n\r\n    let transactions = Array.from(this.props.data.transactions);\r\n    transactions.forEach((transaction) => {\r\n      let result = this.props.data.users.filter(\r\n        (user) => transaction.uid === user.uid\r\n      );\r\n      transaction.fname = result[0] ? result[0].fname : \"\";\r\n      transaction.lname = result[0] ? result[0].lname : \"\";\r\n      result = this.props.data.items.filter(\r\n        (item) => transaction.iid === item.iid\r\n      );\r\n      transaction.name = result[0] ? result[0].name : \"\";\r\n      transaction.category = result[0] ? result[0].category : \"\";\r\n\r\n      transaction.backgroundColor =\r\n        !transaction.checkedInDate &&\r\n        new Date(transaction.dueDate).getTime() < new Date().getTime()\r\n          ? \"mistyrose\"\r\n          : \"\";\r\n    });\r\n\r\n    return (\r\n      <div className=\"page-content stretch-h\">\r\n        <Col className=\"stretch-h flex-col\">\r\n          <Table\r\n            data={transactions}\r\n            columns={this.state.columnSet}\r\n            title={<h2>Transactions</h2>}\r\n            onRowClick={(event, rowData) =>\r\n              this.handleUserSelectClick(event, rowData)\r\n            }\r\n          />\r\n          <Modal\r\n            centered\r\n            size={this.state.selectedItemId >= 0 ? \"lg\" : \"lg\"}\r\n            show={selectedItemId != null}\r\n            onHide={this.close}\r\n          >\r\n            <Modal.Header closeButton bsPrefix=\"modal-header\">\r\n              <Modal.Title>Item</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <Row>\r\n                <Col>\r\n                  <Form>\r\n                    <Form.Field>\r\n                      <label>\r\n                        First Name:\r\n                        {this.state.nameError && (\r\n                          <span className=\"error-text modal-label-error-text\">\r\n                            Error: Field cannot be empty.\r\n                          </span>\r\n                        )}\r\n                      </label>\r\n                      <Form.Input\r\n                        error={this.state.nameError}\r\n                        name=\"fname\"\r\n                        placeholder=\"First Name\"\r\n                        defaultValue={selectedItem.fname}\r\n                        readOnly\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>\r\n                        Last Name:\r\n                        {this.state.nameError && (\r\n                          <span className=\"error-text modal-label-error-text\">\r\n                            Error: Field cannot be empty.\r\n                          </span>\r\n                        )}\r\n                      </label>\r\n                      <Form.Input\r\n                        error={this.state.nameError}\r\n                        name=\"lname\"\r\n                        placeholder=\"Last Name\"\r\n                        defaultValue={selectedItem.lname}\r\n                        readOnly\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>\r\n                        Item Name:\r\n                        {this.state.categoryError && (\r\n                          <span className=\"error-text modal-label-error-text\">\r\n                            Error: Field cannot be empty.\r\n                          </span>\r\n                        )}\r\n                      </label>\r\n                      <Form.Input\r\n                        error={this.state.categoryError}\r\n                        name=\"name\"\r\n                        placeholder=\"name\"\r\n                        defaultValue={selectedItem.category}\r\n                        readOnly\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>\r\n                        Category:\r\n                        {this.state.notesError && (\r\n                          <span className=\"error-text modal-label-error-text\">\r\n                            Error: Field cannot be empty.\r\n                          </span>\r\n                        )}\r\n                      </label>\r\n                      <Form.Input\r\n                        name=\"category\"\r\n                        error={this.state.notesError}\r\n                        placeholder=\"Category\"\r\n                        defaultValue={selectedItem.notes}\r\n                        readOnly\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>\r\n                        Serial:\r\n                        {this.state.serialError && (\r\n                          <span className=\"error-text modal-label-error-text\">\r\n                            Error: Field cannot be empty.\r\n                          </span>\r\n                        )}\r\n                      </label>\r\n                      <Form.Input\r\n                        name=\"serial\"\r\n                        error={this.state.serialError}\r\n                        placeholder=\"Serial\"\r\n                        defaultValue={selectedItem.serial}\r\n                        onChange={(e) => {\r\n                          this.handleChange(e, \"serial\");\r\n                        }}\r\n                        readOnly\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>\r\n                        Notes:\r\n                        {this.state.notesError && (\r\n                          <span className=\"error-text modal-label-error-text\">\r\n                            Error: Field cannot be empty.\r\n                          </span>\r\n                        )}\r\n                      </label>\r\n                      <Form.Input\r\n                        name=\"notes\"\r\n                        error={this.state.notesError}\r\n                        placeholder=\"Notes\"\r\n                        defaultValue={selectedItem.notes}\r\n                        onChange={(e) => {\r\n                          this.handleChange(e, \"notes\");\r\n                        }}\r\n                        readOnly\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>Checked Out:</label>\r\n                      <Form.Input\r\n                        name=\"checkedOut\"\r\n                        placeholder=\"Checked Out\"\r\n                        defaultValue={selectedItem.checkedOutDate}\r\n                        onChange={(e) => {\r\n                          this.handleChange(e, \"checkedOutDate\");\r\n                        }}\r\n                        readOnly\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>Checked In:</label>\r\n                      <Form.Input\r\n                        name=\"checkedIn\"\r\n                        placeholder=\"Checked In\"\r\n                        error={!selectedItem.checkedInDate}\r\n                        defaultValue={selectedItem.checkedInDate}\r\n                        onChange={(e) => {\r\n                          this.handleChange(e, \"checkedInDate\");\r\n                        }}\r\n                        readOnly\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>Due Date:</label>\r\n                      <Form.Input\r\n                        name=\"due\"\r\n                        placeholder=\"Due Date\"\r\n                        defaultValue={selectedItem.dueDate}\r\n                        onChange={(e) => {\r\n                          this.handleChange(e, \"dueDate\");\r\n                        }}\r\n                        readOnly\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                  </Form>\r\n                </Col>\r\n              </Row>\r\n            </Modal.Body>\r\n            <Modal.Footer></Modal.Footer>\r\n          </Modal>\r\n        </Col>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Transactions;\r\n","import React, { Component } from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nimport Header from \"./common/Header\";\r\nimport Sidebar from \"./common/Sidebar\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport \"./App.scss\";\r\nimport CheckInOut from \"./pages/CheckInOut\";\r\nimport Users from \"./pages/Users\";\r\nimport Inventory from \"./pages/Inventory\";\r\nimport Staff from \"./pages/Staff\";\r\nimport Transactions from \"./pages/Transactions\";\r\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleDataUpdate = this.handleDataUpdate.bind(this);\r\n    this.state = {\r\n      data: {\r\n        users: [\r\n          {\r\n            fname: \"Seamus\",\r\n            lname: \"Rioux\",\r\n            uid: \"54321\",\r\n            email: \"srioux@email.com\",\r\n            phone: \"123-456-7891\",\r\n            notes: \"Optional notes for Seamus\",\r\n            courses: [\"Photography I\"],\r\n          },\r\n          {\r\n            fname: \"Greg\",\r\n            lname: \"Smelkov\",\r\n            uid: \"12345\",\r\n            courses: [\"Photography I\", \"Photography II\"],\r\n          },\r\n        ],\r\n        items: [\r\n          {\r\n            name: \"Canon 5D Mk II\",\r\n            iid: \"1\",\r\n            category: \"Camera\",\r\n            notes: \"\",\r\n            atid: \"3\",\r\n            courses: [\"Photography II\"],\r\n          },\r\n          {\r\n            name: \"Canon 18-55 F4.0\",\r\n            iid: \"2\",\r\n            category: \"Lens\",\r\n            notes: \"Missing lens cap\",\r\n            atid: \"4\",\r\n            courses: [\"Photography I\", \"Photography II\"],\r\n          },\r\n          {\r\n            name: \"Mavic Drone\",\r\n            iid: \"3\",\r\n            category: \"Other\",\r\n            notes: \"Goes whirrr\",\r\n            atid: \"\",\r\n            courses: [\"Photography I\", \"Photography II\"],\r\n          },\r\n          {\r\n            name: \"Canon 5D Mk II\",\r\n            iid: \"4\",\r\n            category: \"Camera\",\r\n            notes: \"\",\r\n            atid: \"\",\r\n            courses: [\"Photography II\"],\r\n          },\r\n          {\r\n            name: \"Canon 18-55 F4.0\",\r\n            iid: \"5\",\r\n            category: \"Lens\",\r\n            notes: \"Missing lens cap\",\r\n            atid: \"\",\r\n            courses: [\"Photography I\", \"Photography II\"],\r\n          },\r\n        ],\r\n        transactions: [\r\n          {\r\n            tid: \"1\",\r\n            uid: \"54321\",\r\n            iid: \"1\",\r\n            checkedOutDate: new Date(\"7/22/2020\").getTime(),\r\n            dueDate: new Date(\"7/26/2020\").getTime(),\r\n            checkedInDate: new Date(\"7/24/2020\").getTime(),\r\n          },\r\n          {\r\n            tid: \"2\",\r\n            uid: \"54321\",\r\n            iid: \"2\",\r\n            checkedOutDate: new Date(\"7/22/2020\").getTime(),\r\n            dueDate: new Date(\"7/26/2020\").getTime(),\r\n            checkedInDate: new Date(\"7/24/2020\").getTime(),\r\n          },\r\n          {\r\n            tid: \"3\",\r\n            uid: \"12345\",\r\n            iid: \"1\",\r\n            checkedOutDate: new Date(\"7/25/2020\").getTime(),\r\n            dueDate: new Date(\"7/27/2020\").getTime(),\r\n            checkedInDate: \"\",\r\n            notes: \"Example of transaction notes\",\r\n          },\r\n          {\r\n            tid: \"4\",\r\n            uid: \"12345\",\r\n            iid: \"2\",\r\n            checkedOutDate: new Date(\"7/25/2020\").getTime(),\r\n            dueDate: new Date(\"7/27/2020\").getTime(),\r\n            checkedInDate: \"\",\r\n          },\r\n        ],\r\n      },\r\n    };\r\n  }\r\n\r\n  handleDataUpdate(data) {\r\n    this.setState({ data });\r\n    // console.log(\"Data Updated\", data);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n        <Router>\r\n          <Container fluid className=\"no-gutters flex-col stretch-hw\">\r\n            <Header />\r\n            <Row className=\"flex-grow no-gutters\">\r\n              <Col md=\"auto\" className=\"no-gutters\">\r\n                <Sidebar />\r\n              </Col>\r\n              <Col className=\"no-gutters\">\r\n                <Switch>\r\n                  <Route exact path=\"/\">\r\n                    Home\r\n                  </Route>\r\n                  <Route path=\"/checkinout\">\r\n                    <CheckInOut\r\n                      data={this.state.data}\r\n                      onUpdateData={this.handleDataUpdate}\r\n                    />\r\n                  </Route>\r\n                  <Route path=\"/users\">\r\n                    <Users\r\n                      data={this.state.data}\r\n                      onUpdateData={this.handleDataUpdate}\r\n                    />\r\n                  </Route>\r\n                  <Route path=\"/inventory\">\r\n                    <Inventory\r\n                      data={this.state.data}\r\n                      onUpdateData={this.handleDataUpdate}\r\n                    />\r\n                  </Route>\r\n                  <Route path=\"/staff\">\r\n                    <Staff onUpdateData={this.handleDataUpdate} />\r\n                  </Route>\r\n                  <Route path=\"/transactions\">\r\n                    <Transactions\r\n                      data={this.state.data}\r\n                      onUpdateData={this.handleDataUpdate}\r\n                    />\r\n                  </Route>\r\n                </Switch>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Router>\r\n      </MuiPickersUtilsProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}