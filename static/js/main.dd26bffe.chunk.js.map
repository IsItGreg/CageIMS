{"version":3,"sources":["common/Header.js","common/Sidebar.js","common/Table.js","pages/CheckInOut.js","pages/Users.js","pages/Inventory.js","pages/Staff.js","pages/Transactions.js","App.js","serviceWorker.js","index.js"],"names":["trigger","Icon","name","Header","Row","className","Col","Dropdown","icon","direction","Menu","Item","text","as","Link","to","Component","Sidebar","Navbar","variant","Nav","href","tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","Table","style","flexGrow","height","icons","title","this","columns","data","options","search","paging","rowStyle","rowData","backgroundColor","tableData","id","onRowClick","onSelectionChange","CheckInOut","handleSearchResult","bind","handleTransactionsChanges","handleDataChanges","state","error","userFound","fname","lname","uid","courses","console","log","setState","onUpdateData","page","onDoneClick","selectedUser","users","onSuccessfulSearchResult","Container","handleChange","e","searchInput","target","value","handleClick","filter","user","length","isError","Input","onChange","size","fluid","iconPosition","placeholder","Button","animated","onClick","Content","visible","hidden","React","CheckInOutViewUser","getTransactionsToShow","transactions","Array","from","item","checkedInDate","forEach","transaction","result","items","iid","category","Date","dueDate","getTime","getItemsToShow","atid","some","course","includes","handleDoneClick","handleReturnClick","op","handleOpSelectClick","checked","close","selectedItemId","userProp","val","prevState","selectedItem","Object","assign","handleRowItemClick","index","indexOf","tid","handleReturnSelectedItemsClick","map","find","handleCheckOutCartButtonClick","newAtid","Math","max","t","toString","push","checkedOutDate","formatDate","dateString","date","getMonth","getDate","getFullYear","open","selectedItemsToReturn","currentlyHeldColumnSet","field","render","itemsColumnSet","cartColumnSet","itemPanes","menuItem","event","selection","Set","sort","cartPanes","color","Tab","panes","Modal","centered","show","onHide","closeButton","bsPrefix","Title","Body","Form","Field","nameError","defaultValue","readOnly","categoryError","notesError","notes","serialError","serial","Footer","Users","selectedUserId","firstNameError","lastNameError","idError","emailError","handleUserSelectClick","dataSet","handleAddUserClick","email","phone","checkErrorUpdateDataSet","handleSubmitClick","handleDropdownAddition","courseOptions","handleDropdownChange","columnSet","reduce","table","basic","Divider","clearing","multiple","allowAdditions","onAddItem","Inventory","Staff","roles","handleDropdownAdditionRoles","roleOptions","handleDropdownAdditionCourses","handleDropdownChangeCourses","handleDropdownChangeRoles","type","Transactions","App","handleDataUpdate","md","exact","path","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.dd26bffe.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\nimport { Dropdown, Icon } from \"semantic-ui-react\";\r\n\r\n// const sampleUser = { firstName: \"User\", lastName: \"Name\" };\r\n\r\nconst trigger = (\r\n  <h3>\r\n    User Name <Icon name=\"chevron down\" />\r\n  </h3>\r\n);\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <Row className=\"header\">\r\n        <Col>\r\n          <h2>\r\n            <Icon name=\"camera\" />\r\n            CageIMS\r\n          </h2>\r\n        </Col>\r\n        <Col>\r\n          <Dropdown\r\n            className=\"header-dropdown\"\r\n            trigger={trigger}\r\n            icon={null}\r\n            direction=\"left\"\r\n          >\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item icon=\"settings\" text=\"Settings\" />\r\n              <Dropdown.Item\r\n                icon=\"sign-out\"\r\n                text=\"Sign Out\"\r\n                as={Link}\r\n                to=\"/logout\"\r\n              />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport { Icon } from \"semantic-ui-react\";\r\nimport { Nav, Navbar } from \"react-bootstrap\";\r\n\r\nclass Sidebar extends Component {\r\n  render() {\r\n    return (\r\n      <Navbar variant=\"dark\" className=\"sidebar flex-column\">\r\n        <Nav className=\"flex-column\">\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#/\">\r\n              <h4>\r\n                <Icon name=\"home\" />\r\n                Home\r\n              </h4>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#/checkinout\">\r\n              <h4>\r\n                <Icon name=\"sync\" />\r\n                Check In/Out\r\n              </h4>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#/users\">\r\n              <h4>\r\n                <Icon name=\"users\" />\r\n                Users\r\n              </h4>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#/inventory\">\r\n              <h4>\r\n                <Icon name=\"camera\" />\r\n                Inventory\r\n              </h4>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#/staff\">\r\n              <h4>\r\n                <Icon name=\"user\" />\r\n                Staff\r\n              </h4>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link href=\"#/transactions\">\r\n              <h4>\r\n                <Icon name=\"history\" />\r\n                Transactions\r\n              </h4>\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { Component } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { forwardRef } from \"react\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n};\r\nclass Table extends Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  // }\r\n  render() {\r\n    return (\r\n      <MaterialTable\r\n        style={{ flexGrow: 1, height: \"100%\" }}\r\n        icons={tableIcons}\r\n        title={this.props.title}\r\n        columns={this.props.columns}\r\n        data={this.props.data}\r\n        options={{\r\n          ...{\r\n            search: true,\r\n            paging: false,\r\n            rowStyle: (rowData) => ({\r\n              backgroundColor: rowData.backgroundColor\r\n                ? rowData.backgroundColor\r\n                : rowData.tableData.id % 2 === 0\r\n                ? \"#FAFAFA\"\r\n                : \"#FFFFFF\",\r\n            }),\r\n          },\r\n          ...this.props.options,\r\n        }}\r\n        onRowClick={this.props.onRowClick}\r\n        onSelectionChange={this.props.onSelectionChange}\r\n      ></MaterialTable>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;\r\n","import React, { Component } from \"react\";\r\nimport { Input, Button, Icon, Form, Tab } from \"semantic-ui-react\";\r\nimport { Container, Col, Row, Modal } from \"react-bootstrap\";\r\nimport Table from \"../common/Table\";\r\n\r\nclass CheckInOut extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleSearchResult = this.handleSearchResult.bind(this);\r\n    this.handleTransactionsChanges = this.handleDataChanges.bind(this);\r\n    this.state = {\r\n      error: false,\r\n      userFound: {\r\n        fname: \"Greg\",\r\n        lname: \"Smelkov\",\r\n        uid: \"12345\",\r\n        courses: [\"Photography I\", \"Photography II\"],\r\n      },\r\n    };\r\n  }\r\n\r\n  handleSearchResult(userFound) {\r\n    console.log(userFound);\r\n    this.setState({ userFound });\r\n  }\r\n\r\n  handleDataChanges(data) {\r\n    this.props.onUpdateData(data);\r\n  }\r\n\r\n  render() {\r\n    const userFound = this.state.userFound;\r\n    let page;\r\n    if (!userFound)\r\n      page = (\r\n        <Search\r\n          users={this.props.data.users}\r\n          onSuccessfulSearchResult={this.handleSearchResult}\r\n        />\r\n      );\r\n    else\r\n      page = (\r\n        <CheckInOutViewUser\r\n          data={this.props.data}\r\n          onDoneClick={this.handleSearchResult}\r\n          selectedUser={this.state.userFound}\r\n          onUpdateData={this.handleTransactionsChanges}\r\n        />\r\n      );\r\n    return <Container className=\"checkinout\">{page}</Container>;\r\n  }\r\n}\r\n\r\nexport default CheckInOut;\r\n\r\nclass Search extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: false,\r\n    };\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ searchInput: e.target.value });\r\n  };\r\n\r\n  handleClick = () => {\r\n    const users = this.props.users.filter(\r\n      (user) => user.uid === this.state.searchInput\r\n    );\r\n    if (users.length > 0) {\r\n      this.props.onSuccessfulSearchResult(users[0]);\r\n    } else {\r\n      this.setState({ error: true });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const isError = this.state.error;\r\n    return (\r\n      <div className=\"checkinout-search\">\r\n        <Input\r\n          error={this.state.error}\r\n          onChange={this.handleChange}\r\n          size=\"huge\"\r\n          fluid\r\n          icon=\"users\"\r\n          iconPosition=\"left\"\r\n          placeholder=\"Search by exact ID...\"\r\n        />\r\n        {isError && (\r\n          <div className=\"error-text\">\r\n            <p>Error: ID is invalid.</p>\r\n          </div>\r\n        )}\r\n        <Button size=\"big\" animated onClick={this.handleClick}>\r\n          <Button.Content visible>Search</Button.Content>\r\n          <Button.Content hidden>\r\n            <Icon name=\"search\" />\r\n          </Button.Content>\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass CheckInOutViewUser extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      op: \"\",\r\n      open: false,\r\n\r\n      selectedItemId: null,\r\n      selectedItem: {},\r\n\r\n      selectedItemsToReturn: [],\r\n\r\n      transactions: [],\r\n      items: [],\r\n    };\r\n  }\r\n\r\n  getTransactionsToShow = () => {\r\n    let transactions = Array.from(\r\n      this.props.data.transactions.filter(\r\n        (item) =>\r\n          item.uid === this.props.selectedUser.uid && !item.checkedInDate\r\n      )\r\n    );\r\n    transactions.forEach((transaction) => {\r\n      let result = this.props.data.users.filter(\r\n        (user) => transaction.uid === user.uid\r\n      );\r\n      transaction.fname = result[0] ? result[0].fname : \"\";\r\n      transaction.lname = result[0] ? result[0].lname : \"\";\r\n      result = this.props.data.items.filter(\r\n        (item) => transaction.iid === item.iid\r\n      );\r\n      transaction.name = result[0] ? result[0].name : \"\";\r\n      transaction.category = result[0] ? result[0].category : \"\";\r\n\r\n      transaction.backgroundColor =\r\n        !transaction.checkedInDate &&\r\n        new Date(transaction.dueDate).getTime() < new Date().getTime()\r\n          ? \"mistyrose\"\r\n          : \"\";\r\n    });\r\n    return transactions;\r\n  };\r\n\r\n  getItemsToShow = () => {\r\n    let items = Array.from(\r\n      this.props.data.items.filter(\r\n        (item) =>\r\n          !item.atid &&\r\n          this.props.selectedUser.courses.some((course) =>\r\n            item.courses.includes(course)\r\n          )\r\n      )\r\n    );\r\n    return items;\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      transactions: this.getTransactionsToShow(),\r\n      items: this.getItemsToShow(),\r\n    });\r\n  }\r\n\r\n  handleDoneClick = () => {\r\n    this.props.onDoneClick(\"\");\r\n  };\r\n\r\n  handleReturnClick = () => {\r\n    this.setState({ op: \"\" });\r\n  };\r\n\r\n  handleOpSelectClick = (e, op) => {\r\n    this.state.transactions.forEach((transaction) => {\r\n      if (transaction.tableData) transaction.tableData.checked = false;\r\n    });\r\n    this.state.items.forEach((item) => {\r\n      if (item.tableData) item.tableData.checked = false;\r\n    });\r\n    this.setState({ op: op });\r\n  };\r\n\r\n  close = () =>\r\n    this.setState({\r\n      selectedItemId: null,\r\n    });\r\n\r\n  handleChange = (e, userProp) => {\r\n    const val = e.target.value;\r\n    this.setState((prevState) => {\r\n      let selectedItem = Object.assign({}, prevState.selectedItem);\r\n      selectedItem[userProp] = val;\r\n      return { selectedItem };\r\n    });\r\n  };\r\n\r\n  handleRowItemClick = (e, rowData) => {\r\n    if (this.state.op === \"checkin\") {\r\n      let transactions = this.state.transactions;\r\n      const index = transactions.indexOf(rowData);\r\n      transactions[index].tableData.checked = !transactions[index].tableData\r\n        .checked;\r\n      this.setState({ transactions });\r\n    } else if (this.state.op === \"checkout\") {\r\n      let items = this.state.items;\r\n      const index = items.indexOf(rowData);\r\n      items[index].tableData.checked = !items[index].tableData.checked;\r\n      this.setState({ items });\r\n    } else {\r\n      this.setState({\r\n        selectedItemId: rowData.tid,\r\n        selectedItem: rowData,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleReturnSelectedItemsClick = (e) => {\r\n    let data = Object.assign({}, this.props.data);\r\n    const completedTransactionIds = this.state.transactions\r\n      .filter((transaction) => transaction.tableData?.checked)\r\n      .map((transaction) => transaction.tid);\r\n    completedTransactionIds.forEach((id) => {\r\n      let transaction = data.transactions.find(\r\n        (transaction) => transaction.tid === id\r\n      );\r\n      transaction.checkedInDate = new Date().getTime();\r\n      let item = data.items.find((item) => item.iid === transaction.iid);\r\n      item.atid = \"\";\r\n    });\r\n\r\n    this.props.onUpdateData(data);\r\n\r\n    this.setState(\r\n      {\r\n        transactions: this.getTransactionsToShow(),\r\n        items: this.getItemsToShow(),\r\n      },\r\n      this.handleOpSelectClick(e, \"\")\r\n    );\r\n  };\r\n\r\n  handleCheckOutCartButtonClick = (e) => {\r\n    let data = Object.assign({}, this.props.data);\r\n    const itemsToCheckOut = this.state.items.filter(\r\n      (item) => item.tableData?.checked\r\n    );\r\n    itemsToCheckOut.forEach((item) => {\r\n      let newAtid = (\r\n        Math.max(...data.transactions.map((t) => t.tid)) + 1\r\n      ).toString();\r\n      data.transactions.push({\r\n        tid: newAtid,\r\n        uid: this.props.selectedUser.uid,\r\n        iid: item.iid,\r\n        checkedOutDate: new Date().getTime(),\r\n        dueDate: new Date().getTime() + 1000 * 60 * 60 * 24 * 2, //temp; adds two days to today\r\n        checkedInDate: \"\",\r\n      });\r\n      item.atid = newAtid;\r\n    });\r\n    this.props.onUpdateData(data);\r\n    this.setState(\r\n      {\r\n        transactions: this.getTransactionsToShow(),\r\n        items: this.getItemsToShow(),\r\n      },\r\n      this.handleOpSelectClick(e, \"\")\r\n    );\r\n  };\r\n\r\n  formatDate = (dateString) => {\r\n    if (!dateString) return \"\";\r\n    const date = new Date(dateString);\r\n    return (\r\n      date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear()\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const selectedItemId = this.state.selectedItemId;\r\n    const selectedItem = this.state.selectedItem;\r\n\r\n    const currentlyHeldColumnSet = [\r\n      { title: \"Item Name\", field: \"name\" },\r\n      { title: \"Category\", field: \"category\" },\r\n      { title: \"Transaction Notes\", field: \"notes\" },\r\n      {\r\n        title: \"Checked Out\",\r\n        field: \"checkedOutDate\",\r\n        render: (rowData) => this.formatDate(rowData.checkedOutDate),\r\n      },\r\n      {\r\n        title: \"Due Date\",\r\n        field: \"dueDate\",\r\n        render: (rowData) => this.formatDate(rowData.dueDate),\r\n      },\r\n    ];\r\n\r\n    const itemsColumnSet = [\r\n      { title: \"Item Name\", field: \"name\" },\r\n      { title: \"Category\", field: \"category\" },\r\n      { title: \"Notes\", field: \"notes\" },\r\n    ];\r\n\r\n    const cartColumnSet = [\r\n      { title: \"Item Name\", field: \"name\" },\r\n      { title: \"Category\", field: \"category\" },\r\n    ];\r\n\r\n    let itemPanes = [\r\n      {\r\n        menuItem: \"All\",\r\n        render: () => (\r\n          <Table\r\n            data={this.state.items}\r\n            columns={itemsColumnSet}\r\n            title={<h3>All</h3>}\r\n            onRowClick={(event, rowData) =>\r\n              this.handleRowItemClick(event, rowData)\r\n            }\r\n            options={{ selection: true }}\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n\r\n    const categories = [\r\n      ...new Set(this.state.items.map((item) => item.category)),\r\n    ].sort();\r\n    categories.forEach((category) => {\r\n      itemPanes.push({\r\n        menuItem: category,\r\n        render: () => (\r\n          <Table\r\n            data={this.state.items.filter((item) => item.category === category)}\r\n            columns={itemsColumnSet}\r\n            title={<h3>{category}</h3>}\r\n            onRowClick={(event, rowData) =>\r\n              this.handleRowItemClick(event, rowData)\r\n            }\r\n            options={{ selection: true }}\r\n          />\r\n        ),\r\n      });\r\n    });\r\n\r\n    const cartPanes = [\r\n      {\r\n        menuItem: \"\",\r\n        render: () => (\r\n          <Table\r\n            data={this.state.items.filter((item) => item.tableData?.checked)}\r\n            columns={cartColumnSet}\r\n            title={<h3>Cart</h3>}\r\n            onRowClick={(event, rowData) =>\r\n              this.handleRowItemClick(event, rowData)\r\n            }\r\n            options={{ selection: true }}\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n\r\n    let pageOp;\r\n    if (this.state.op === \"checkin\") {\r\n      pageOp = (\r\n        <div className=\"checkinout-viewuser\">\r\n          <Row className=\"page-menu\">\r\n            <h1>\r\n              {this.props.selectedUser.fname +\r\n                \" \" +\r\n                this.props.selectedUser.lname}{\" \"}\r\n              -- Check In/Return\r\n            </h1>\r\n            <Button\r\n              onClick={(e) => {\r\n                this.handleOpSelectClick(e, \"\");\r\n              }}\r\n              size=\"big\"\r\n              animated\r\n              color=\"green\"\r\n            >\r\n              <Button.Content visible>Back</Button.Content>\r\n              <Button.Content hidden>\r\n                <Icon name=\"arrow circle left\" />\r\n              </Button.Content>\r\n            </Button>\r\n          </Row>\r\n          <Row>\r\n            <div className=\"current-table-container\">\r\n              <Table\r\n                data={this.state.transactions}\r\n                columns={currentlyHeldColumnSet}\r\n                title={<h3>Currently held items:</h3>}\r\n                onRowClick={(event, rowData) =>\r\n                  this.handleRowItemClick(event, rowData)\r\n                }\r\n                options={{ selection: true }}\r\n              />\r\n            </div>\r\n          </Row>\r\n          <Row className=\"flex-end\">\r\n            <Button\r\n              onClick={(e) => {\r\n                this.handleOpSelectClick(e, \"\");\r\n              }}\r\n              color=\"red\"\r\n              size=\"big\"\r\n            >\r\n              <Button.Content visible>Cancel</Button.Content>\r\n            </Button>\r\n            <Button\r\n              onClick={(e) => {\r\n                this.handleReturnSelectedItemsClick(e);\r\n              }}\r\n              color=\"orange\"\r\n              size=\"big\"\r\n            >\r\n              <Button.Content visible>Return Selected Items</Button.Content>\r\n            </Button>\r\n          </Row>\r\n        </div>\r\n      );\r\n    } else if (this.state.op === \"checkout\") {\r\n      pageOp = (\r\n        <div className=\"checkinout-viewuser\">\r\n          <Row className=\"page-menu\">\r\n            <h1>\r\n              {this.props.selectedUser.fname +\r\n                \" \" +\r\n                this.props.selectedUser.lname}{\" \"}\r\n              -- Check Out/Borrow\r\n            </h1>\r\n            <Button\r\n              onClick={(e) => {\r\n                this.handleOpSelectClick(e, \"\");\r\n              }}\r\n              size=\"big\"\r\n              animated\r\n              color=\"green\"\r\n            >\r\n              <Button.Content visible>Back</Button.Content>\r\n              <Button.Content hidden>\r\n                <Icon name=\"arrow circle left\" />\r\n              </Button.Content>\r\n            </Button>\r\n          </Row>\r\n          <Row>\r\n            <div className=\"checkout-table-wrapper\">\r\n              <Tab className=\"checkout-inv-table\" panes={itemPanes} />\r\n              <Tab className=\"checkout-cart-table\" panes={cartPanes} />\r\n            </div>\r\n          </Row>\r\n          <Row className=\"flex-end\">\r\n            <Button\r\n              onClick={(e) => {\r\n                this.handleOpSelectClick(e, \"\");\r\n              }}\r\n              color=\"red\"\r\n              size=\"big\"\r\n            >\r\n              <Button.Content visible>Cancel</Button.Content>\r\n            </Button>\r\n            <Button\r\n              onClick={(e) => {\r\n                this.handleCheckOutCartButtonClick(e);\r\n              }}\r\n              color=\"blue\"\r\n              size=\"big\"\r\n            >\r\n              <Button.Content visible>Check Out Selected Items</Button.Content>\r\n            </Button>\r\n          </Row>\r\n        </div>\r\n      );\r\n    } else {\r\n      pageOp = (\r\n        <div className=\"checkinout-viewuser\">\r\n          <Row className=\"page-menu\">\r\n            <h1>\r\n              {this.props.selectedUser.fname +\r\n                \" \" +\r\n                this.props.selectedUser.lname}\r\n            </h1>\r\n            <Button\r\n              onClick={this.handleDoneClick}\r\n              size=\"big\"\r\n              animated\r\n              color=\"green\"\r\n            >\r\n              <Button.Content visible>Complete Transactions</Button.Content>\r\n              <Button.Content hidden>\r\n                <Icon name=\"check\" />\r\n              </Button.Content>\r\n            </Button>\r\n          </Row>\r\n          <Row>\r\n            <div className=\"current-table-container\">\r\n              <Table\r\n                data={this.state.transactions}\r\n                columns={currentlyHeldColumnSet}\r\n                title={<h3>Currently held items:</h3>}\r\n                onRowClick={(event, rowData) =>\r\n                  this.handleRowItemClick(event, rowData)\r\n                }\r\n              />\r\n              <Modal\r\n                centered\r\n                size={this.state.selectedItemId >= 0 ? \"lg\" : \"lg\"}\r\n                show={selectedItemId != null}\r\n                onHide={this.close}\r\n              >\r\n                <Modal.Header closeButton bsPrefix=\"modal-header\">\r\n                  <Modal.Title>Item</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                  <Row>\r\n                    <Col>\r\n                      <Form>\r\n                        <Form.Field>\r\n                          <label>\r\n                            First Name:\r\n                            {this.state.nameError && (\r\n                              <span className=\"error-text modal-label-error-text\">\r\n                                Error: Field cannot be empty.\r\n                              </span>\r\n                            )}\r\n                          </label>\r\n                          <Form.Input\r\n                            error={this.state.nameError}\r\n                            name=\"fname\"\r\n                            placeholder=\"First Name\"\r\n                            defaultValue={selectedItem.fname}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                          <label>\r\n                            Last Name:\r\n                            {this.state.nameError && (\r\n                              <span className=\"error-text modal-label-error-text\">\r\n                                Error: Field cannot be empty.\r\n                              </span>\r\n                            )}\r\n                          </label>\r\n                          <Form.Input\r\n                            error={this.state.nameError}\r\n                            name=\"lname\"\r\n                            placeholder=\"Last Name\"\r\n                            defaultValue={selectedItem.lname}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                          <label>\r\n                            Item Name:\r\n                            {this.state.categoryError && (\r\n                              <span className=\"error-text modal-label-error-text\">\r\n                                Error: Field cannot be empty.\r\n                              </span>\r\n                            )}\r\n                          </label>\r\n                          <Form.Input\r\n                            error={this.state.categoryError}\r\n                            name=\"name\"\r\n                            placeholder=\"name\"\r\n                            defaultValue={selectedItem.category}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                          <label>\r\n                            Category:\r\n                            {this.state.notesError && (\r\n                              <span className=\"error-text modal-label-error-text\">\r\n                                Error: Field cannot be empty.\r\n                              </span>\r\n                            )}\r\n                          </label>\r\n                          <Form.Input\r\n                            name=\"category\"\r\n                            error={this.state.notesError}\r\n                            placeholder=\"Category\"\r\n                            defaultValue={selectedItem.notes}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                          <label>\r\n                            Serial:\r\n                            {this.state.serialError && (\r\n                              <span className=\"error-text modal-label-error-text\">\r\n                                Error: Field cannot be empty.\r\n                              </span>\r\n                            )}\r\n                          </label>\r\n                          <Form.Input\r\n                            name=\"serial\"\r\n                            error={this.state.serialError}\r\n                            placeholder=\"Serial\"\r\n                            defaultValue={selectedItem.serial}\r\n                            onChange={(e) => {\r\n                              this.handleChange(e, \"serial\");\r\n                            }}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                          <label>\r\n                            Notes:\r\n                            {this.state.notesError && (\r\n                              <span className=\"error-text modal-label-error-text\">\r\n                                Error: Field cannot be empty.\r\n                              </span>\r\n                            )}\r\n                          </label>\r\n                          <Form.Input\r\n                            name=\"notes\"\r\n                            error={this.state.notesError}\r\n                            placeholder=\"Notes\"\r\n                            defaultValue={selectedItem.notes}\r\n                            onChange={(e) => {\r\n                              this.handleChange(e, \"notes\");\r\n                            }}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                          <label>Checked Out:</label>\r\n                          <Form.Input\r\n                            name=\"checkedOut\"\r\n                            placeholder=\"Checked Out\"\r\n                            defaultValue={selectedItem.checkedOutDate}\r\n                            onChange={(e) => {\r\n                              this.handleChange(e, \"checkedOutDate\");\r\n                            }}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                          <label>Checked In:</label>\r\n                          <Form.Input\r\n                            name=\"checkedIn\"\r\n                            placeholder=\"Checked In\"\r\n                            error={!selectedItem.checkedInDate}\r\n                            defaultValue={selectedItem.checkedInDate}\r\n                            onChange={(e) => {\r\n                              this.handleChange(e, \"checkedInDate\");\r\n                            }}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                          <label>Due Date:</label>\r\n                          <Form.Input\r\n                            name=\"due\"\r\n                            placeholder=\"Due Date\"\r\n                            defaultValue={selectedItem.dueDate}\r\n                            onChange={(e) => {\r\n                              this.handleChange(e, \"dueDate\");\r\n                            }}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                      </Form>\r\n                    </Col>\r\n                  </Row>\r\n                </Modal.Body>\r\n                <Modal.Footer></Modal.Footer>\r\n              </Modal>\r\n            </div>\r\n          </Row>\r\n          <Row className=\"checkinout-buttons\">\r\n            <Button\r\n              onClick={(e) => {\r\n                this.handleOpSelectClick(e, \"checkin\");\r\n              }}\r\n              color=\"orange\"\r\n              size=\"big\"\r\n            >\r\n              <Button.Content visible>Check In/Return</Button.Content>\r\n            </Button>\r\n            <Button\r\n              onClick={(e) => {\r\n                this.handleOpSelectClick(e, \"checkout\");\r\n              }}\r\n              color=\"blue\"\r\n              size=\"big\"\r\n            >\r\n              <Button.Content visible>Check Out/Borrow</Button.Content>\r\n            </Button>\r\n          </Row>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return pageOp;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Divider, Button, Form, Dropdown, Tab } from \"semantic-ui-react\";\r\nimport { Col, Row, Modal } from \"react-bootstrap\";\r\nimport Table from \"../common/Table\";\r\n\r\nclass Users extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.state = {\r\n      dataSet: [\r\n        {\r\n          fname: \"Seamus\",\r\n          lname: \"Rioux\",\r\n          courses: [\"Photography I\", \"Photography II\"],\r\n          id: \"54321\",\r\n          email: \"seamus.rioux3@gmail.com\",\r\n          phone: \"123-456-7890\",\r\n        },\r\n        {\r\n          fname: \"Greg\",\r\n          lname: \"Smelkov\",\r\n          courses: [\"Photography I\"],\r\n          id: \"12345\",\r\n          email: \"greg@gmail.com\",\r\n          phone: \"123-456-7890\",\r\n        },\r\n      ],\r\n      columnSet: [\r\n        { title: \"First Name\", field: \"fname\" },\r\n        { title: \"Last Name\", field: \"lname\" },\r\n        {\r\n          title: \"Courses\",\r\n          field: \"courses\",\r\n          render: (rowData) => {\r\n            return rowData.courses.length > 0\r\n              ? rowData.courses.reduce((result, item) => (\r\n                  <>\r\n                    {result}\r\n                    {\", \"}\r\n                    {item}\r\n                  </>\r\n                ))\r\n              : \"\";\r\n          },\r\n        },\r\n      ],\r\n      open: false,\r\n\r\n      firstNameError: false,\r\n      lastNameError: false,\r\n      idError: false,\r\n      emailError: false,\r\n\r\n      selectedUserId: null,\r\n      selectedUser: {\r\n        fname: \"\",\r\n        lname: \"\",\r\n        courses: [],\r\n        id: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n      },\r\n      courseOptions: [\r\n        { text: \"Photography I\", value: \"Photography I\" },\r\n        { text: \"Photography II\", value: \"Photography II\" },\r\n        { text: \"Documentary Image\", value: \"Documentary Image\" },\r\n      ],\r\n    };\r\n  }\r\n\r\n  close = () =>\r\n    this.setState({\r\n      selectedUserId: null,\r\n      firstNameError: false,\r\n      lastNameError: false,\r\n      idError: false,\r\n      emailError: false,\r\n    });\r\n\r\n  handleChange = (e, userProp) => {\r\n    const val = e.target.value;\r\n    this.setState((prevState) => {\r\n      let selectedUser = Object.assign({}, prevState.selectedUser);\r\n      selectedUser[userProp] = val;\r\n      return { selectedUser };\r\n    });\r\n  };\r\n\r\n  handleUserSelectClick = (e, rowData) => {\r\n    this.setState({\r\n      selectedUserId: rowData.tableData.id,\r\n      selectedUser: this.state.dataSet[rowData.tableData.id],\r\n    });\r\n  };\r\n\r\n  handleAddUserClick = () => {\r\n    this.setState({\r\n      selectedUserId: -1,\r\n      selectedUser: {\r\n        fname: \"\",\r\n        lname: \"\",\r\n        courses: [],\r\n        id: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n      },\r\n    });\r\n  };\r\n\r\n  checkErrorUpdateDataSet = () => {\r\n    if (\r\n      !this.state.firstNameError &&\r\n      !this.state.lastNameError &&\r\n      !this.state.idError &&\r\n      !this.state.emailError\r\n    ) {\r\n      this.setState((prevState) => {\r\n        let dataSet = Array.from(prevState.dataSet);\r\n        if (this.state.selectedUserId >= 0) {\r\n          dataSet[this.state.selectedUserId] = this.state.selectedUser;\r\n        } else {\r\n          dataSet.push(this.state.selectedUser);\r\n        }\r\n        return { dataSet };\r\n      }, this.close);\r\n    }\r\n  };\r\n\r\n  handleSubmitClick = () => {\r\n    this.setState(\r\n      {\r\n        firstNameError: this.state.selectedUser.fname === \"\",\r\n        lastNameError: this.state.selectedUser.lname === \"\",\r\n        idError: this.state.selectedUser.id === \"\",\r\n        emailError: this.state.selectedUser.email === \"\",\r\n      },\r\n      this.checkErrorUpdateDataSet\r\n    );\r\n  };\r\n\r\n  handleDropdownAddition = (e, { value }) => {\r\n    this.setState((prevState) => ({\r\n      courseOptions: [{ text: value, value }, ...prevState.courseOptions],\r\n    }));\r\n  };\r\n\r\n  handleDropdownChange = (e, { value }) => {\r\n    const val = value;\r\n    this.setState((prevState) => {\r\n      let selectedUser = Object.assign({}, prevState.selectedUser);\r\n      selectedUser.courses = val;\r\n      return { selectedUser };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const selectedUserId = this.state.selectedUserId;\r\n    const selectedUser = this.state.selectedUser;\r\n    let table;\r\n    if (this.state.selectedUserId != null) {\r\n      if (this.state.selectedUserId >= 0) {\r\n        const panes = [\r\n          {\r\n            menuItem: \"Due Items\",\r\n            render: () => (\r\n              <Table\r\n                title={\r\n                  this.state.selectedUser.fname +\r\n                  \" \" +\r\n                  this.state.selectedUser.lname\r\n                }\r\n              ></Table>\r\n            ),\r\n          },\r\n          {\r\n            menuItem: \"Completed Transactions\",\r\n            render: () => (\r\n              <Table\r\n                title={\r\n                  this.state.selectedUser.fname +\r\n                  \" \" +\r\n                  this.state.selectedUser.lname\r\n                }\r\n              ></Table>\r\n            ),\r\n          },\r\n        ];\r\n        table = (\r\n          <Col>\r\n            <Tab panes={panes} className=\"stretch-h flex-col\" />\r\n          </Col>\r\n        );\r\n      }\r\n    }\r\n\r\n    const courseOptions = this.state.courseOptions;\r\n    return (\r\n      <div className=\"page-content stretch-h\">\r\n        <Col className=\"stretch-h flex-col\">\r\n          <div className=\"topbar\">\r\n            <Button basic onClick={this.handleAddUserClick}>\r\n              Create New User\r\n            </Button>\r\n            <Divider clearing />\r\n          </div>\r\n          <Table\r\n            data={Array.from(this.state.dataSet)}\r\n            columns={this.state.columnSet}\r\n            title={<h2>Users</h2>}\r\n            onRowClick={(event, rowData) =>\r\n              this.handleUserSelectClick(event, rowData)\r\n            }\r\n          />\r\n          <Modal\r\n            centered\r\n            size={this.state.selectedUserId >= 0 ? \"xl\" : \"lg\"}\r\n            show={selectedUserId != null}\r\n            onHide={this.close}\r\n          >\r\n            <Modal.Header closeButton bsPrefix=\"modal-header\">\r\n              <Modal.Title>User</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <Row>\r\n                <Col>\r\n                  <Form>\r\n                    <Form.Field>\r\n                      <label>\r\n                        First Name:\r\n                        {this.state.firstNameError && (\r\n                          <span className=\"error-text modal-label-error-text\">\r\n                            Error: Field cannot be empty.\r\n                          </span>\r\n                        )}\r\n                      </label>\r\n                      <Form.Input\r\n                        error={this.state.firstNameError}\r\n                        name=\"fname\"\r\n                        placeholder=\"First Name\"\r\n                        defaultValue={selectedUser.fname}\r\n                        onChange={(e) => {\r\n                          this.handleChange(e, \"fname\");\r\n                        }}\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>\r\n                        Last Name:\r\n                        {this.state.lastNameError && (\r\n                          <span className=\"error-text modal-label-error-text\">\r\n                            Error: Field cannot be empty.\r\n                          </span>\r\n                        )}\r\n                      </label>\r\n                      <Form.Input\r\n                        error={this.state.lastNameError}\r\n                        name=\"lname\"\r\n                        placeholder=\"Last Name\"\r\n                        defaultValue={selectedUser.lname}\r\n                        onChange={(e) => {\r\n                          this.handleChange(e, \"lname\");\r\n                        }}\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>Courses:</label>\r\n                      <Dropdown\r\n                        placeholder=\"Courses\"\r\n                        name=\"courses\"\r\n                        fluid\r\n                        multiple\r\n                        search\r\n                        selection\r\n                        allowAdditions\r\n                        options={courseOptions}\r\n                        value={selectedUser.courses}\r\n                        onAddItem={this.handleDropdownAddition}\r\n                        onChange={this.handleDropdownChange}\r\n                      />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>\r\n                        UML ID:\r\n                        {this.state.idError && (\r\n                          <span className=\"error-text modal-label-error-text\">\r\n                            Error: Field cannot be empty.\r\n                          </span>\r\n                        )}\r\n                      </label>\r\n                      <Form.Input\r\n                        name=\"id\"\r\n                        error={this.state.idError}\r\n                        placeholder=\"UML ID\"\r\n                        defaultValue={selectedUser.id}\r\n                        onChange={(e) => {\r\n                          this.handleChange(e, \"id\");\r\n                        }}\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>\r\n                        Email:\r\n                        {this.state.emailError && (\r\n                          <span className=\"error-text modal-label-error-text\">\r\n                            Error: Field cannot be empty.\r\n                          </span>\r\n                        )}\r\n                      </label>\r\n                      <Form.Input\r\n                        name=\"email\"\r\n                        error={this.state.emailError}\r\n                        placeholder=\"Email\"\r\n                        defaultValue={selectedUser.email}\r\n                        onChange={(e) => {\r\n                          this.handleChange(e, \"email\");\r\n                        }}\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>Phone Number:</label>\r\n                      <Form.Input\r\n                        name=\"phone\"\r\n                        placeholder=\"Phone Number\"\r\n                        defaultValue={selectedUser.phone}\r\n                        onChange={(e) => {\r\n                          this.handleChange(e, \"phone\");\r\n                        }}\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                  </Form>\r\n                </Col>\r\n                {table}\r\n              </Row>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button\r\n                id=\"add-icon-handler\"\r\n                variant=\"primary\"\r\n                onClick={this.handleSubmitClick}\r\n              >\r\n                Submit\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n        </Col>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Users;\r\n","import React, { Component } from \"react\";\r\nimport { Divider, Button, Form, Dropdown, Tab } from \"semantic-ui-react\";\r\nimport { Col, Row, Modal } from \"react-bootstrap\";\r\nimport Table from \"../common/Table\";\r\n\r\nclass Inventory extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.state = {\r\n      dataSet: [\r\n        {\r\n          name: \"Canon 5D Mk II\",\r\n          category: \"Camera\",\r\n          courses: [\"Photography I\", \"Photography II\"],\r\n          serial: \"125\",\r\n          notes: \"Missing lens cap\",\r\n        },\r\n        {\r\n          name: \"Canon Eos\",\r\n          category: \"Camera\",\r\n          courses: [\"Photography I\", \"Photography II\"],\r\n          serial: \"124\",\r\n          notes: \"Missing SD Card cover, otherwise works fine\",\r\n        },\r\n      ],\r\n      columnSet: [\r\n        { title: \"Name\", field: \"name\" },\r\n        { title: \"Category\", field: \"category\" },\r\n        { title: \"Serial\", field: \"serial\" },\r\n        { title: \"Notes\", field: \"notes\" },\r\n        {\r\n          title: \"Courses\",\r\n          field: \"courses\",\r\n          render: (rowData) => {\r\n            return rowData.courses.length > 0\r\n              ? rowData.courses.reduce((result, item) => (\r\n                  <>\r\n                    {result}\r\n                    {\", \"}\r\n                    {item}\r\n                  </>\r\n                ))\r\n              : \"\";\r\n          },\r\n        },\r\n      ],\r\n      open: false,\r\n\r\n      nameError: false,\r\n      categoryError: false,\r\n      serialError: false,\r\n      notesError: false,\r\n\r\n      selectedItemId: null,\r\n      selectedItem: {\r\n        name: \"\",\r\n        category: \"\",\r\n        courses: [],\r\n        serial: \"\",\r\n        notes: \"\",\r\n      },\r\n      courseOptions: [\r\n        { text: \"Photography I\", value: \"Photography I\" },\r\n        { text: \"Photography II\", value: \"Photography II\" },\r\n        { text: \"Documentary Image\", value: \"Documentary Image\" },\r\n      ],\r\n    };\r\n  }\r\n\r\n  close = () =>\r\n    this.setState({\r\n      selectedItemId: null,\r\n      nameError: false,\r\n      categoryError: false,\r\n      serialError: false,\r\n      notesError: false,\r\n    });\r\n\r\n  handleChange = (e, userProp) => {\r\n    const val = e.target.value;\r\n    this.setState((prevState) => {\r\n      let selectedItem = Object.assign({}, prevState.selectedItem);\r\n      selectedItem[userProp] = val;\r\n      return { selectedItem };\r\n    });\r\n  };\r\n\r\n  handleUserSelectClick = (e, rowData) => {\r\n    this.setState({\r\n      selectedItemId: rowData.tableData.id,\r\n      selectedItem: this.state.dataSet[rowData.tableData.id],\r\n    });\r\n  };\r\n\r\n  handleAddUserClick = () => {\r\n    this.setState({\r\n      selectedItemId: -1,\r\n      selectedItem: {\r\n        name: \"\",\r\n        category: \"\",\r\n        courses: [],\r\n        serial: \"\",\r\n        notes: \"\",\r\n        phone: \"\",\r\n      },\r\n    });\r\n  };\r\n\r\n  checkErrorUpdateDataSet = () => {\r\n    if (\r\n      !this.state.nameError &&\r\n      !this.state.categoryError &&\r\n      !this.state.serialError &&\r\n      !this.state.notesError\r\n    ) {\r\n      this.setState((prevState) => {\r\n        let dataSet = Array.from(prevState.dataSet);\r\n        if (this.state.selectedItemId >= 0) {\r\n          dataSet[this.state.selectedItemId] = this.state.selectedItem;\r\n        } else {\r\n          dataSet.push(this.state.selectedItem);\r\n        }\r\n        return { dataSet };\r\n      }, this.close);\r\n    }\r\n  };\r\n\r\n  handleSubmitClick = () => {\r\n    this.setState(\r\n      {\r\n        nameError: this.state.selectedItem.name === \"\",\r\n        categoryError: this.state.selectedItem.category === \"\",\r\n        serialError: this.state.selectedItem.serial === \"\",\r\n        notesError: this.state.selectedItem.notes === \"\",\r\n      },\r\n      this.checkErrorUpdateDataSet\r\n    );\r\n  };\r\n\r\n  handleDropdownAddition = (e, { value }) => {\r\n    this.setState((prevState) => ({\r\n      courseOptions: [{ text: value, value }, ...prevState.courseOptions],\r\n    }));\r\n  };\r\n\r\n  handleDropdownChange = (e, { value }) => {\r\n    const val = value;\r\n    this.setState((prevState) => {\r\n      let selectedItem = Object.assign({}, prevState.selectedItem);\r\n      selectedItem.courses = val;\r\n      return { selectedItem };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const selectedItemId = this.state.selectedItemId;\r\n    const selectedItem = this.state.selectedItem;\r\n\r\n    const courseOptions = this.state.courseOptions;\r\n    return (\r\n      <div className=\"page-content stretch-h\">\r\n        <Col className=\"stretch-h flex-col\">\r\n          <div className=\"topbar\">\r\n            <Button basic onClick={this.handleAddUserClick}>\r\n              Create New Item\r\n            </Button>\r\n            <Divider clearing />\r\n          </div>\r\n          <Table\r\n            data={Array.from(this.state.dataSet)}\r\n            columns={this.state.columnSet}\r\n            title={<h2>Inventory</h2>}\r\n            onRowClick={(event, rowData) =>\r\n              this.handleUserSelectClick(event, rowData)\r\n            }\r\n          />\r\n          <Modal\r\n            centered\r\n            size={this.state.selectedItemId >= 0 ? \"lg\" : \"lg\"}\r\n            show={selectedItemId != null}\r\n            onHide={this.close}\r\n          >\r\n            <Modal.Header closeButton bsPrefix=\"modal-header\">\r\n              <Modal.Title>Item</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <Row>\r\n                <Col>\r\n                  <Form>\r\n                    <Form.Field>\r\n                      <label>\r\n                        Name:\r\n                        {this.state.nameError && (\r\n                          <span className=\"error-text modal-label-error-text\">\r\n                            Error: Field cannot be empty.\r\n                          </span>\r\n                        )}\r\n                      </label>\r\n                      <Form.Input\r\n                        error={this.state.nameError}\r\n                        name=\"name\"\r\n                        placeholder=\"Name\"\r\n                        defaultValue={selectedItem.name}\r\n                        onChange={(e) => {\r\n                          this.handleChange(e, \"name\");\r\n                        }}\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>\r\n                        Category:\r\n                        {this.state.categoryError && (\r\n                          <span className=\"error-text modal-label-error-text\">\r\n                            Error: Field cannot be empty.\r\n                          </span>\r\n                        )}\r\n                      </label>\r\n                      <Form.Input\r\n                        error={this.state.categoryError}\r\n                        name=\"category\"\r\n                        placeholder=\"Category\"\r\n                        defaultValue={selectedItem.category}\r\n                        onChange={(e) => {\r\n                          this.handleChange(e, \"category\");\r\n                        }}\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>Courses:</label>\r\n                      <Dropdown\r\n                        placeholder=\"Courses\"\r\n                        name=\"courses\"\r\n                        fluid\r\n                        multiple\r\n                        search\r\n                        selection\r\n                        allowAdditions\r\n                        options={courseOptions}\r\n                        value={selectedItem.courses}\r\n                        onAddItem={this.handleDropdownAddition}\r\n                        onChange={this.handleDropdownChange}\r\n                      />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>\r\n                        UML Serial:\r\n                        {this.state.serialError && (\r\n                          <span className=\"error-text modal-label-error-text\">\r\n                            Error: Field cannot be empty.\r\n                          </span>\r\n                        )}\r\n                      </label>\r\n                      <Form.Input\r\n                        name=\"serial\"\r\n                        error={this.state.serialError}\r\n                        placeholder=\"UML ID\"\r\n                        defaultValue={selectedItem.serial}\r\n                        onChange={(e) => {\r\n                          this.handleChange(e, \"serial\");\r\n                        }}\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>\r\n                        Notes:\r\n                        {this.state.notesError && (\r\n                          <span className=\"error-text modal-label-error-text\">\r\n                            Error: Field cannot be empty.\r\n                          </span>\r\n                        )}\r\n                      </label>\r\n                      <Form.Input\r\n                        name=\"notes\"\r\n                        error={this.state.notesError}\r\n                        placeholder=\"Notes\"\r\n                        defaultValue={selectedItem.notes}\r\n                        onChange={(e) => {\r\n                          this.handleChange(e, \"notes\");\r\n                        }}\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                  </Form>\r\n                </Col>\r\n              </Row>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button\r\n                id=\"add-icon-handler\"\r\n                variant=\"primary\"\r\n                onClick={this.handleSubmitClick}\r\n              >\r\n                Submit\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n        </Col>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Inventory;\r\n","import React, { Component } from \"react\";\r\nimport { Divider, Button, Form, Dropdown, Tab } from \"semantic-ui-react\";\r\nimport { Col, Row, Modal } from \"react-bootstrap\";\r\nimport Table from \"../common/Table\";\r\n\r\nclass Staff extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.state = {\r\n      dataSet: [\r\n        {\r\n          fname: \"Seamus\",\r\n          lname: \"Rioux\",\r\n          courses: [\"Photography I\", \"Photography II\"],\r\n          roles: [\"Admin\", \"Staff\"],\r\n          id: \"54321\",\r\n          email: \"seamus.rioux3@gmail.com\",\r\n          phone: \"123-456-7890\",\r\n        },\r\n        {\r\n          fname: \"Greg\",\r\n          lname: \"Smelkov\",\r\n          courses: [\"Photography I\"],\r\n          roles: [\"Admin\"],\r\n          id: \"12345\",\r\n          email: \"greg@gmail.com\",\r\n          phone: \"123-456-7890\",\r\n        },\r\n      ],\r\n      columnSet: [\r\n        { title: \"First Name\", field: \"fname\" },\r\n        { title: \"Last Name\", field: \"lname\" },\r\n        {\r\n          title: \"Courses\",\r\n          field: \"courses\",\r\n          render: (rowData) => {\r\n            return rowData.courses.length > 0\r\n              ? rowData.courses.reduce((result, item) => (\r\n                  <>\r\n                    {result}\r\n                    {\", \"}\r\n                    {item}\r\n                  </>\r\n                ))\r\n              : \"\";\r\n          },\r\n        },\r\n        {\r\n          title: \"Roles\",\r\n          field: \"roles\",\r\n          render: (rowData) => {\r\n            return rowData.roles.length > 0\r\n              ? rowData.roles.reduce((result, item) => (\r\n                  <>\r\n                    {result}\r\n                    {\", \"}\r\n                    {item}\r\n                  </>\r\n                ))\r\n              : \"\";\r\n          },\r\n        },\r\n      ],\r\n      open: false,\r\n\r\n      firstNameError: false,\r\n      lastNameError: false,\r\n      idError: false,\r\n      emailError: false,\r\n\r\n      selectedUserId: null,\r\n      selectedUser: {\r\n        fname: \"\",\r\n        lname: \"\",\r\n        courses: [],\r\n        roles: [],\r\n        id: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n      },\r\n      courseOptions: [\r\n        { text: \"Photography I\", value: \"Photography I\" },\r\n        { text: \"Photography II\", value: \"Photography II\" },\r\n        { text: \"Documentary Image\", value: \"Documentary Image\" },\r\n      ],\r\n      roleOptions: [\r\n        { text: \"Admin\", value: \"Admin\" },\r\n        { text: \"Staff\", value: \"Staff\" },\r\n      ],\r\n    };\r\n  }\r\n\r\n  close = () =>\r\n    this.setState({\r\n      selectedUserId: null,\r\n      firstNameError: false,\r\n      lastNameError: false,\r\n      idError: false,\r\n      emailError: false,\r\n    });\r\n\r\n  handleChange = (e, userProp) => {\r\n    const val = e.target.value;\r\n    this.setState((prevState) => {\r\n      let selectedUser = Object.assign({}, prevState.selectedUser);\r\n      selectedUser[userProp] = val;\r\n      return { selectedUser };\r\n    });\r\n  };\r\n\r\n  handleUserSelectClick = (e, rowData) => {\r\n    this.setState({\r\n      selectedUserId: rowData.tableData.id,\r\n      selectedUser: this.state.dataSet[rowData.tableData.id],\r\n    });\r\n  };\r\n\r\n  handleAddUserClick = () => {\r\n    this.setState({\r\n      selectedUserId: -1,\r\n      selectedUser: {\r\n        fname: \"\",\r\n        lname: \"\",\r\n        courses: [],\r\n        roles: [],\r\n        id: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n      },\r\n    });\r\n  };\r\n\r\n  checkErrorUpdateDataSet = () => {\r\n    if (\r\n      !this.state.firstNameError &&\r\n      !this.state.lastNameError &&\r\n      !this.state.idError &&\r\n      !this.state.emailError\r\n    ) {\r\n      this.setState((prevState) => {\r\n        let dataSet = Array.from(prevState.dataSet);\r\n        if (this.state.selectedUserId >= 0) {\r\n          dataSet[this.state.selectedUserId] = this.state.selectedUser;\r\n        } else {\r\n          dataSet.push(this.state.selectedUser);\r\n        }\r\n        return { dataSet };\r\n      }, this.close);\r\n    }\r\n  };\r\n\r\n  handleSubmitClick = () => {\r\n    this.setState(\r\n      {\r\n        firstNameError: this.state.selectedUser.fname === \"\",\r\n        lastNameError: this.state.selectedUser.lname === \"\",\r\n        idError: this.state.selectedUser.id === \"\",\r\n        emailError: this.state.selectedUser.email === \"\",\r\n      },\r\n      this.checkErrorUpdateDataSet\r\n    );\r\n  };\r\n\r\n  handleDropdownAdditionRoles = (e, { value }) => {\r\n    this.setState((prevState) => ({\r\n      roleOptions: [{ text: value, value }, ...prevState.roleOptions],\r\n    }));\r\n  };\r\n\r\n  handleDropdownAdditionCourses = (e, { value }) => {\r\n    this.setState((prevState) => ({\r\n      courseOptions: [{ text: value, value }, ...prevState.courseOptions],\r\n    }));\r\n  };\r\n\r\n  handleDropdownChangeCourses = (e, { value }) => {\r\n    const val = value;\r\n    this.setState((prevState) => {\r\n      let selectedUser = Object.assign({}, prevState.selectedUser);\r\n      selectedUser.courses = val;\r\n      return { selectedUser };\r\n    });\r\n  };\r\n\r\n  handleDropdownChangeRoles = (e, { value }) => {\r\n    const val = value;\r\n    this.setState((prevState) => {\r\n      let selectedUser = Object.assign({}, prevState.selectedUser);\r\n      selectedUser.roles = val;\r\n      return { selectedUser };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const selectedUserId = this.state.selectedUserId;\r\n    const selectedUser = this.state.selectedUser;\r\n    let table;\r\n    if (this.state.selectedUserId != null) {\r\n      if (this.state.selectedUserId >= 0) {\r\n        const panes = [\r\n          {\r\n            menuItem: \"Due Items\",\r\n            render: () => (\r\n              <Table\r\n                title={\r\n                  this.state.selectedUser.fname +\r\n                  \" \" +\r\n                  this.state.selectedUser.lname\r\n                }\r\n              ></Table>\r\n            ),\r\n          },\r\n          {\r\n            menuItem: \"Completed Transactions\",\r\n            render: () => (\r\n              <Table\r\n                title={\r\n                  this.state.selectedUser.fname +\r\n                  \" \" +\r\n                  this.state.selectedUser.lname\r\n                }\r\n              ></Table>\r\n            ),\r\n          },\r\n        ];\r\n        table = (\r\n          <Col>\r\n            <Tab panes={panes} className=\"stretch-h flex-col\" />\r\n          </Col>\r\n        );\r\n      }\r\n    }\r\n\r\n    const courseOptions = this.state.courseOptions;\r\n    const roleOptions = this.state.roleOptions;\r\n    return (\r\n      <div className=\"page-content stretch-h\">\r\n        <Col className=\"stretch-h flex-col\">\r\n          <div className=\"topbar\">\r\n            <Button basic onClick={this.handleAddUserClick}>\r\n              Create New Staff\r\n            </Button>\r\n            <Divider clearing />\r\n          </div>\r\n          <Table\r\n            data={Array.from(this.state.dataSet)}\r\n            columns={this.state.columnSet}\r\n            title={<h2>Staff</h2>}\r\n            onRowClick={(event, rowData) =>\r\n              this.handleUserSelectClick(event, rowData)\r\n            }\r\n          />\r\n          <Modal\r\n            centered\r\n            size={this.state.selectedUserId >= 0 ? \"xl\" : \"lg\"}\r\n            show={selectedUserId != null}\r\n            onHide={this.close}\r\n          >\r\n            <Modal.Header closeButton bsPrefix=\"modal-header\">\r\n              <Modal.Title>Staff</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <Row>\r\n                <Col>\r\n                  <Form>\r\n                    <Form.Field>\r\n                      <label>\r\n                        First Name:\r\n                        {this.state.firstNameError && (\r\n                          <span className=\"error-text modal-label-error-text\">\r\n                            Error: Field cannot be empty.\r\n                          </span>\r\n                        )}\r\n                      </label>\r\n                      <Form.Input\r\n                        error={this.state.firstNameError}\r\n                        name=\"fname\"\r\n                        placeholder=\"First Name\"\r\n                        defaultValue={selectedUser.fname}\r\n                        onChange={(e) => {\r\n                          this.handleChange(e, \"fname\");\r\n                        }}\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>\r\n                        Last Name:\r\n                        {this.state.lastNameError && (\r\n                          <span className=\"error-text modal-label-error-text\">\r\n                            Error: Field cannot be empty.\r\n                          </span>\r\n                        )}\r\n                      </label>\r\n                      <Form.Input\r\n                        error={this.state.lastNameError}\r\n                        name=\"lname\"\r\n                        placeholder=\"Last Name\"\r\n                        defaultValue={selectedUser.lname}\r\n                        onChange={(e) => {\r\n                          this.handleChange(e, \"lname\");\r\n                        }}\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>Courses:</label>\r\n                      <Dropdown\r\n                        placeholder=\"Courses\"\r\n                        name=\"courses\"\r\n                        fluid\r\n                        multiple\r\n                        search\r\n                        selection\r\n                        allowAdditions\r\n                        options={courseOptions}\r\n                        value={selectedUser.courses}\r\n                        onAddItem={this.handleDropdownAdditionCourses}\r\n                        onChange={this.handleDropdownChangeCourses}\r\n                      />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>Roles:</label>\r\n                      <Dropdown\r\n                        placeholder=\"Roles\"\r\n                        name=\"roles\"\r\n                        fluid\r\n                        multiple\r\n                        search\r\n                        selection\r\n                        allowAdditions\r\n                        options={roleOptions}\r\n                        value={selectedUser.roles}\r\n                        onAddItem={this.handleDropdownAdditionRoles}\r\n                        onChange={this.handleDropdownChangeRoles}\r\n                      />\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>\r\n                        UML ID:\r\n                        {this.state.idError && (\r\n                          <span className=\"error-text modal-label-error-text\">\r\n                            Error: Field cannot be empty.\r\n                          </span>\r\n                        )}\r\n                      </label>\r\n                      <Form.Input\r\n                        name=\"id\"\r\n                        error={this.state.idError}\r\n                        placeholder=\"UML ID\"\r\n                        defaultValue={selectedUser.id}\r\n                        onChange={(e) => {\r\n                          this.handleChange(e, \"id\");\r\n                        }}\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>\r\n                        Email:\r\n                        {this.state.emailError && (\r\n                          <span className=\"error-text modal-label-error-text\">\r\n                            Error: Field cannot be empty.\r\n                          </span>\r\n                        )}\r\n                      </label>\r\n                      <Form.Input\r\n                        name=\"email\"\r\n                        error={this.state.emailError}\r\n                        placeholder=\"Email\"\r\n                        defaultValue={selectedUser.email}\r\n                        onChange={(e) => {\r\n                          this.handleChange(e, \"email\");\r\n                        }}\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>Phone Number:</label>\r\n                      <Form.Input\r\n                        type=\"phone\"\r\n                        placeholder=\"Phone Number\"\r\n                        defaultValue={selectedUser.phone}\r\n                        onChange={(e) => {\r\n                          this.handleChange(e, \"phone\");\r\n                        }}\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                  </Form>\r\n                </Col>\r\n                {table}\r\n              </Row>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button\r\n                id=\"add-icon-handler\"\r\n                variant=\"primary\"\r\n                onClick={this.handleSubmitClick}\r\n              >\r\n                Submit\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n        </Col>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Staff;\r\n","import React, { Component } from \"react\";\r\nimport { Divider, Button, Form, Dropdown, Tab } from \"semantic-ui-react\";\r\nimport { Col, Row, Modal } from \"react-bootstrap\";\r\nimport Table from \"../common/Table\";\r\n\r\nclass Transactions extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.state = {\r\n      columnSet: [\r\n        { title: \"First Name\", field: \"fname\" },\r\n        { title: \"Last Name\", field: \"lname\" },\r\n        { title: \"Item Name\", field: \"name\" },\r\n        { title: \"Category\", field: \"category\" },\r\n        { title: \"Notes\", field: \"notes\" },\r\n        {\r\n          title: \"Checked Out\",\r\n          field: \"checkedOutDate\",\r\n          render: (rowData) => this.formatDate(rowData.checkedOutDate),\r\n        },\r\n        {\r\n          title: \"Due Date\",\r\n          field: \"dueDate\",\r\n          render: (rowData) => this.formatDate(rowData.dueDate),\r\n        },\r\n        {\r\n          title: \"Checked In\",\r\n          field: \"checkedInDate\",\r\n          render: (rowData) => this.formatDate(rowData.checkedInDate),\r\n        },\r\n      ],\r\n      open: false,\r\n\r\n      selectedItemId: null,\r\n      selectedItem: {\r\n        fname: \"\",\r\n        lname: \"\",\r\n        name: \"\",\r\n        category: \"\",\r\n        notes: \"\",\r\n        checkedOutDate: \"\",\r\n        checkedInDate: \"\",\r\n        dueDate: \"\",\r\n      },\r\n    };\r\n  }\r\n\r\n  close = () =>\r\n    this.setState({\r\n      selectedItemId: null,\r\n    });\r\n\r\n  handleChange = (e, userProp) => {\r\n    const val = e.target.value;\r\n    this.setState((prevState) => {\r\n      let selectedItem = Object.assign({}, prevState.selectedItem);\r\n      selectedItem[userProp] = val;\r\n      return { selectedItem };\r\n    });\r\n  };\r\n\r\n  handleUserSelectClick = (e, rowData) => {\r\n    this.setState({\r\n      selectedItemId: rowData.tid,\r\n      selectedItem: rowData,\r\n    });\r\n  };\r\n\r\n  handleDropdownAddition = (e, { value }) => {\r\n    this.setState((prevState) => ({\r\n      courseOptions: [{ text: value, value }, ...prevState.courseOptions],\r\n    }));\r\n  };\r\n\r\n  handleDropdownChange = (e, { value }) => {\r\n    const val = value;\r\n    this.setState((prevState) => {\r\n      let selectedItem = Object.assign({}, prevState.selectedItem);\r\n      selectedItem.courses = val;\r\n      return { selectedItem };\r\n    });\r\n  };\r\n\r\n  formatDate = (dateString) => {\r\n    if (!dateString) return \"\";\r\n    const date = new Date(dateString);\r\n    return (\r\n      date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear()\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const selectedItemId = this.state.selectedItemId;\r\n    const selectedItem = this.state.selectedItem;\r\n\r\n    let transactions = Array.from(this.props.data.transactions);\r\n    transactions.forEach((transaction) => {\r\n      let result = this.props.data.users.filter(\r\n        (user) => transaction.uid === user.uid\r\n      );\r\n      transaction.fname = result[0] ? result[0].fname : \"\";\r\n      transaction.lname = result[0] ? result[0].lname : \"\";\r\n      result = this.props.data.items.filter(\r\n        (item) => transaction.iid === item.iid\r\n      );\r\n      transaction.name = result[0] ? result[0].name : \"\";\r\n      transaction.category = result[0] ? result[0].category : \"\";\r\n\r\n      transaction.backgroundColor =\r\n        !transaction.checkedInDate &&\r\n        new Date(transaction.dueDate).getTime() < new Date().getTime()\r\n          ? \"mistyrose\"\r\n          : \"\";\r\n    });\r\n\r\n    const courseOptions = this.state.courseOptions;\r\n    return (\r\n      <div className=\"page-content stretch-h\">\r\n        <Col className=\"stretch-h flex-col\">\r\n          <Table\r\n            data={transactions}\r\n            columns={this.state.columnSet}\r\n            title={<h2>Transactions</h2>}\r\n            onRowClick={(event, rowData) =>\r\n              this.handleUserSelectClick(event, rowData)\r\n            }\r\n          />\r\n          <Modal\r\n            centered\r\n            size={this.state.selectedItemId >= 0 ? \"lg\" : \"lg\"}\r\n            show={selectedItemId != null}\r\n            onHide={this.close}\r\n          >\r\n            <Modal.Header closeButton bsPrefix=\"modal-header\">\r\n              <Modal.Title>Item</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              <Row>\r\n                <Col>\r\n                  <Form>\r\n                    <Form.Field>\r\n                      <label>\r\n                        First Name:\r\n                        {this.state.nameError && (\r\n                          <span className=\"error-text modal-label-error-text\">\r\n                            Error: Field cannot be empty.\r\n                          </span>\r\n                        )}\r\n                      </label>\r\n                      <Form.Input\r\n                        error={this.state.nameError}\r\n                        name=\"fname\"\r\n                        placeholder=\"First Name\"\r\n                        defaultValue={selectedItem.fname}\r\n                        readOnly\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>\r\n                        Last Name:\r\n                        {this.state.nameError && (\r\n                          <span className=\"error-text modal-label-error-text\">\r\n                            Error: Field cannot be empty.\r\n                          </span>\r\n                        )}\r\n                      </label>\r\n                      <Form.Input\r\n                        error={this.state.nameError}\r\n                        name=\"lname\"\r\n                        placeholder=\"Last Name\"\r\n                        defaultValue={selectedItem.lname}\r\n                        readOnly\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>\r\n                        Item Name:\r\n                        {this.state.categoryError && (\r\n                          <span className=\"error-text modal-label-error-text\">\r\n                            Error: Field cannot be empty.\r\n                          </span>\r\n                        )}\r\n                      </label>\r\n                      <Form.Input\r\n                        error={this.state.categoryError}\r\n                        name=\"name\"\r\n                        placeholder=\"name\"\r\n                        defaultValue={selectedItem.category}\r\n                        readOnly\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>\r\n                        Category:\r\n                        {this.state.notesError && (\r\n                          <span className=\"error-text modal-label-error-text\">\r\n                            Error: Field cannot be empty.\r\n                          </span>\r\n                        )}\r\n                      </label>\r\n                      <Form.Input\r\n                        name=\"category\"\r\n                        error={this.state.notesError}\r\n                        placeholder=\"Category\"\r\n                        defaultValue={selectedItem.notes}\r\n                        readOnly\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>\r\n                        Serial:\r\n                        {this.state.serialError && (\r\n                          <span className=\"error-text modal-label-error-text\">\r\n                            Error: Field cannot be empty.\r\n                          </span>\r\n                        )}\r\n                      </label>\r\n                      <Form.Input\r\n                        name=\"serial\"\r\n                        error={this.state.serialError}\r\n                        placeholder=\"Serial\"\r\n                        defaultValue={selectedItem.serial}\r\n                        onChange={(e) => {\r\n                          this.handleChange(e, \"serial\");\r\n                        }}\r\n                        readOnly\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>\r\n                        Notes:\r\n                        {this.state.notesError && (\r\n                          <span className=\"error-text modal-label-error-text\">\r\n                            Error: Field cannot be empty.\r\n                          </span>\r\n                        )}\r\n                      </label>\r\n                      <Form.Input\r\n                        name=\"notes\"\r\n                        error={this.state.notesError}\r\n                        placeholder=\"Notes\"\r\n                        defaultValue={selectedItem.notes}\r\n                        onChange={(e) => {\r\n                          this.handleChange(e, \"notes\");\r\n                        }}\r\n                        readOnly\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>Checked Out:</label>\r\n                      <Form.Input\r\n                        name=\"checkedOut\"\r\n                        placeholder=\"Checked Out\"\r\n                        defaultValue={selectedItem.checkedOutDate}\r\n                        onChange={(e) => {\r\n                          this.handleChange(e, \"checkedOutDate\");\r\n                        }}\r\n                        readOnly\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>Checked In:</label>\r\n                      <Form.Input\r\n                        name=\"checkedIn\"\r\n                        placeholder=\"Checked In\"\r\n                        error={!selectedItem.checkedInDate}\r\n                        defaultValue={selectedItem.checkedInDate}\r\n                        onChange={(e) => {\r\n                          this.handleChange(e, \"checkedInDate\");\r\n                        }}\r\n                        readOnly\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                      <label>Due Date:</label>\r\n                      <Form.Input\r\n                        name=\"due\"\r\n                        placeholder=\"Due Date\"\r\n                        defaultValue={selectedItem.dueDate}\r\n                        onChange={(e) => {\r\n                          this.handleChange(e, \"dueDate\");\r\n                        }}\r\n                        readOnly\r\n                      ></Form.Input>\r\n                    </Form.Field>\r\n                  </Form>\r\n                </Col>\r\n              </Row>\r\n            </Modal.Body>\r\n            <Modal.Footer></Modal.Footer>\r\n          </Modal>\r\n        </Col>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Transactions;\r\n","import React, { Component } from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nimport Header from \"./common/Header\";\r\nimport Sidebar from \"./common/Sidebar\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport \"./App.scss\";\r\nimport CheckInOut from \"./pages/CheckInOut\";\r\nimport Users from \"./pages/Users\";\r\nimport Inventory from \"./pages/Inventory\";\r\nimport Staff from \"./pages/Staff\";\r\nimport Transactions from \"./pages/Transactions\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleDataUpdate = this.handleDataUpdate.bind(this);\r\n    this.state = {\r\n      data: {\r\n        users: [\r\n          {\r\n            fname: \"Seamus\",\r\n            lname: \"Rioux\",\r\n            uid: \"54321\",\r\n            email: \"srioux@email.com\",\r\n            phone: \"123-456-7890\",\r\n            notes: \"Optional notes for Seamus\",\r\n            courses: [\"Photography I\"],\r\n          },\r\n          {\r\n            fname: \"Greg\",\r\n            lname: \"Smelkov\",\r\n            uid: \"12345\",\r\n            courses: [\"Photography I\", \"Photography II\"],\r\n          },\r\n        ],\r\n        items: [\r\n          {\r\n            name: \"Canon 5D Mk II\",\r\n            iid: \"1\",\r\n            category: \"Camera\",\r\n            notes: \"\",\r\n            atid: \"3\",\r\n            courses: [\"Photography II\"],\r\n          },\r\n          {\r\n            name: \"Canon 18-55 F4.0\",\r\n            iid: \"2\",\r\n            category: \"Lens\",\r\n            notes: \"Missing lens cap\",\r\n            atid: \"4\",\r\n            courses: [\"Photography I\", \"Photography II\"],\r\n          },\r\n          {\r\n            name: \"Mavic Drone\",\r\n            iid: \"3\",\r\n            category: \"Other\",\r\n            notes: \"Goes whirrr\",\r\n            atid: \"\",\r\n            courses: [\"Photography I\", \"Photography II\"],\r\n          },\r\n          {\r\n            name: \"Canon 5D Mk II\",\r\n            iid: \"4\",\r\n            category: \"Camera\",\r\n            notes: \"\",\r\n            atid: \"\",\r\n            courses: [\"Photography II\"],\r\n          },\r\n          {\r\n            name: \"Canon 18-55 F4.0\",\r\n            iid: \"5\",\r\n            category: \"Lens\",\r\n            notes: \"Missing lens cap\",\r\n            atid: \"\",\r\n            courses: [\"Photography I\", \"Photography II\"],\r\n          },\r\n        ],\r\n        transactions: [\r\n          {\r\n            tid: \"1\",\r\n            uid: \"54321\",\r\n            iid: \"1\",\r\n            checkedOutDate: new Date(\"7/22/2020\").getTime(),\r\n            dueDate: new Date(\"7/26/2020\").getTime(),\r\n            checkedInDate: new Date(\"7/24/2020\").getTime(),\r\n          },\r\n          {\r\n            tid: \"2\",\r\n            uid: \"54321\",\r\n            iid: \"2\",\r\n            checkedOutDate: new Date(\"7/22/2020\").getTime(),\r\n            dueDate: new Date(\"7/26/2020\").getTime(),\r\n            checkedInDate: new Date(\"7/24/2020\").getTime(),\r\n          },\r\n          {\r\n            tid: \"3\",\r\n            uid: \"12345\",\r\n            iid: \"1\",\r\n            checkedOutDate: new Date(\"7/25/2020\").getTime(),\r\n            dueDate: new Date(\"7/27/2020\").getTime(),\r\n            checkedInDate: \"\",\r\n            notes: \"Example of transaction notes\",\r\n          },\r\n          {\r\n            tid: \"4\",\r\n            uid: \"12345\",\r\n            iid: \"2\",\r\n            checkedOutDate: new Date(\"7/25/2020\").getTime(),\r\n            dueDate: new Date(\"7/27/2020\").getTime(),\r\n            checkedInDate: \"\",\r\n          },\r\n        ],\r\n      },\r\n    };\r\n  }\r\n\r\n  handleDataUpdate(data) {\r\n    this.setState({ data });\r\n    // console.log(\"Data Updated\", data);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Container fluid className=\"no-gutters flex-col stretch-hw\">\r\n          <Header />\r\n          <Row className=\"flex-grow no-gutters\">\r\n            <Col md=\"auto\" className=\"no-gutters\">\r\n              <Sidebar />\r\n            </Col>\r\n            <Col className=\"no-gutters\">\r\n              <Switch>\r\n                <Route exact path=\"/\">\r\n                  Home\r\n                </Route>\r\n                <Route path=\"/checkinout\">\r\n                  <CheckInOut\r\n                    data={this.state.data}\r\n                    onUpdateData={this.handleDataUpdate}\r\n                  />\r\n                </Route>\r\n                <Route path=\"/users\">\r\n                  <Users onUpdateData={this.handleDataUpdate} />\r\n                </Route>\r\n                <Route path=\"/inventory\">\r\n                  <Inventory onUpdateData={this.handleDataUpdate} />\r\n                </Route>\r\n                <Route path=\"/staff\">\r\n                  <Staff onUpdateData={this.handleDataUpdate} />\r\n                </Route>\r\n                <Route path=\"/transactions\">\r\n                  <Transactions\r\n                    data={this.state.data}\r\n                    onUpdateData={this.handleDataUpdate}\r\n                  />\r\n                </Route>\r\n              </Switch>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}