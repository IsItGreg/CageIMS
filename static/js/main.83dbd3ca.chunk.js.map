{"version":3,"sources":["common/Header.js","common/Sidebar.js","common/Table.js","pages/CheckInOut.js","pages/Users.js","pages/Inventory.js","pages/Staff.js","pages/Transactions.js","App.js","serviceWorker.js","index.js"],"names":["trigger","Icon","name","Header","props","state","curTime","Date","toLocaleString","weekday","month","day","hour","minute","hour12","split","join","setInterval","setState","Row","className","style","display","flexDirection","Col","Nav","Link","href","xs","span","offset","this","Dropdown","icon","direction","Menu","Item","text","as","to","Component","Sidebar","Navbar","variant","active","location","pathname","Divider","withRouter","tableIcons","Add","forwardRef","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","color","Search","size","SortArrow","ThirdStateCheck","ViewColumn","Table","flexGrow","components","Toolbar","toolbarComponents","icons","title","columns","data","localization","toolbar","nRowsSelected","itemType","options","search","paging","rowStyle","rowData","backgroundColor","tableData","id","searchFieldStyle","onRowClick","onSelectionChange","CheckInOut","handleSearchResult","bind","handleTransactionsChanges","handleDataChanges","error","userFound","onUpdateData","page","onDoneClick","selectedUser","users","onSuccessfulSearchResult","Container","handleChange","e","searchInput","target","value","handleSearchButtonClick","filter","user","uid","length","handleKeyDown","key","isError","Input","onChange","onKeyPress","fluid","iconPosition","placeholder","Button","animated","onClick","Content","visible","hidden","React","CheckInOutViewUser","getTransactionsToShow","preSetTransactions","transactions","Array","from","item","checkedInDate","forEach","transaction","result","fname","lname","items","iid","category","dueDate","getTime","getItemsToShow","preSetItems","atid","courses","some","course","includes","handleDoneClick","handleOpSelectClick","op","checked","isCheckoutModalOpen","close","selectedItemId","userProp","val","prevState","selectedItem","Object","assign","handleRowItemClick","rowClick","index","indexOf","find","tid","handleReturnSelectedItemsClick","map","handleCheckOutCartButtonClick","itemsToCheckOut","newTransactions","newAtid","Math","max","concat","t","toString","push","checkedOutDate","handleConfirmCheckOutButtonClick","formatDate","dateString","date","getMonth","getDate","getFullYear","selectedItemsToReturn","isCheckoutModalAllDateSelectorOpen","currentlyHeldColumnSet","field","render","itemsColumnSet","cartColumnSet","checkOutColumnSet","autoOk","inputVariant","label","format","InputAdornmentProps","position","handleDateChange","itemPanes","menuItem","event","selection","Set","sort","cartPanes","JSON","parse","stringify","Tab","panes","Modal","centered","selectedUserId","show","onHide","bsPrefix","Title","Body","IconButton","DatePicker","open","onClose","handleAllCheckoutDateChange","Footer","closeButton","Form","Field","nameError","defaultValue","readOnly","categoryError","notesError","notes","serialError","serial","Users","email","phone","creationDate","firstNameError","lastNameError","idError","emailError","editable","submitName","submitIcon","isChangesMadeToModal","showImportExcelModal","importedExcelData","importEmailErrors","handleUserEditClick","handleUserSelectClick","handleAddUserClick","tranactions","handleImportSpreadsheetClick","refs","fileUploader","click","handleClearAllCoursesClick","window","confirm","checkErrorUpdateDataSet","handleSubmitClick","handleSaveImportStudents","every","newUsers","undefined","nuser","handleDropdownChange","formatUserDate","hours","getHours","daynnite","getMinutes","getSeconds","updateImportEmail","test","handleItemClick","activeItem","columnSet","defaultSort","reduce","fileObj","files","reader","FileReader","rABS","readAsBinaryString","onload","wb","XLSX","read","type","bookVBA","utils","sheet_to_json","Sheets","SheetNames","repeat","existingUser","readAsArrayBuffer","formTablePanes","courseOptions","apply","importColumns","TextField","helperText","basic","onChangeFile","clearing","multiple","allowAdditions","dialogClassName","Group","widths","disabled","toggle","compact","Inventory","isItemIdUnavailable","handleItemIdVerify","handleItemSelectClick","handleItemAddClick","generateInitialNextItemId","expected","handleItemEditClick","iidError","formatDateForSearchBar","formatItemDate","toLocaleDateString","year","handleCourseDropdownChange","handleBrandDropdownChange","brand","handleCategoryDropdownChange","isNaN","fullID","i","ids","parseInt","a","b","newId","headerStyleGrey","fontSize","headerStyle","customFilterAndSearch","term","inventoryTablePanes","brandOptions","categoryOptions","maxLength","clearable","Staff","dataSet","roles","handleDropdownAdditionRoles","roleOptions","handleDropdownAdditionCourses","handleDropdownChangeCourses","handleDropdownChangeRoles","onAddItem","Transactions","handleDropdownAddition","console","log","App","handleDataUpdate","DateFnsUtils","md","exact","path","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.83dbd3ca.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Row, Col, Nav } from \"react-bootstrap\";\nimport { Dropdown, Icon } from \"semantic-ui-react\";\n\n// const sampleUser = { firstName: \"User\", lastName: \"Name\" };\n\nconst trigger = (\n  <h3>\n    User Name <Icon name=\"chevron down\" />\n  </h3>\n);\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      curTime: new Date()\n        .toLocaleString(\n          [],\n          (\"en-US\",\n          {\n            weekday: \"short\",\n            month: \"short\",\n            day: \"numeric\",\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n            hour12: true,\n          })\n        )\n        .split(\",\")\n        .join(\"\\t\"),\n    };\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this.setState({\n        curTime: new Date()\n          .toLocaleString(\n            [],\n            (\"en-US\",\n            {\n              weekday: \"short\",\n              month: \"short\",\n              day: \"numeric\",\n              hour: \"2-digit\",\n              minute: \"2-digit\",\n              hour12: true,\n            })\n          )\n          .split(\",\")\n          .join(\"\\t\"),\n      });\n    }, 1000);\n  }\n\n  render() {\n    return (\n      <Row\n        className=\"header align-items-center\"\n        style={{ display: \"flex\", flexDirection: \"row\" }}\n      >\n        <Col>\n          <Nav.Link href=\"#/\">\n            <h2>\n              <Icon name=\"camera\" />\n              CageIMS\n            </h2>\n          </Nav.Link>\n        </Col>\n        <Col xs={{ span: 3, offset: 3 }}>\n          <div>\n            <h5>{this.state.curTime}</h5>\n          </div>\n        </Col>\n        <Col>\n          <Dropdown\n            className=\"header-dropdown\"\n            trigger={trigger}\n            icon={null}\n            direction=\"left\"\n          >\n            <Dropdown.Menu>\n              <Dropdown.Item icon=\"settings\" text=\"Settings\" />\n              <Dropdown.Item\n                icon=\"sign-out\"\n                text=\"Sign Out\"\n                as={Link}\n                to=\"/logout\"\n              />\n            </Dropdown.Menu>\n          </Dropdown>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport { Icon } from \"semantic-ui-react\";\nimport { Nav, Navbar, Dropdown } from \"react-bootstrap\";\nimport { withRouter } from \"react-router-dom\";\n\nclass Sidebar extends Component {\n  render() {\n    return (\n      <Navbar variant=\"light\" className=\"sidebar flex-column\">\n        <Nav variant=\"pills\" className=\"flex-column\">\n          <Nav.Item>\n            <Nav.Link href=\"#/\" active={this.props.location.pathname === \"/\"}>\n              <h5>\n                <Icon name=\"handshake\" />\n                Check In/Out\n              </h5>\n            </Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link\n              href=\"#/users\"\n              active={this.props.location.pathname === \"/users\"}\n            >\n              <h5>\n                <Icon name=\"users\" />\n                Users\n              </h5>\n            </Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link\n              href=\"#/inventory\"\n              active={this.props.location.pathname === \"/inventory\"}\n            >\n              <h5>\n                <Icon name=\"camera\" />\n                Inventory\n              </h5>\n            </Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link\n              href=\"#/transactions\"\n              active={this.props.location.pathname === \"/transactions\"}\n            >\n              <h5>\n                <Icon name=\"book\" />\n                History\n              </h5>\n            </Nav.Link>\n          </Nav.Item>\n          <Nav.Item>\n            <Nav.Link\n              href=\"#/staff\"\n              active={this.props.location.pathname === \"/staff\"}\n            >\n              <h5>\n                <Icon name=\"id card\" />\n                Staff\n              </h5>\n            </Nav.Link>\n          </Nav.Item>\n          <Dropdown.Divider />\n        </Nav>\n      </Navbar>\n    );\n  }\n}\n\nexport default withRouter(Sidebar);\n","import React, { Component } from \"react\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport { Icon } from \"semantic-ui-react\";\nimport { forwardRef } from \"react\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => (\n    <ChevronRight {...props} ref={ref} />\n  )),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => (\n    <ChevronLeft {...props} ref={ref} />\n  )),\n  ResetSearch: forwardRef((props, ref) => (\n    <Clear style={{ color: \"#12558f\" }} {...props} ref={ref} />\n  )),\n  Search: forwardRef((props, ref) => (\n    <Icon\n      name=\"search\"\n      size=\"large\"\n      style={{ color: \"#12558f\" }}\n      {...props}\n      ref={ref}\n    />\n  )),\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n};\nclass Table extends Component {\n  render() {\n    return (\n      <MaterialTable\n        style={{ flexGrow: 1 }}\n        components={{\n          Toolbar: (props) => (\n            <div>\n              <div className=\"table-header MuiPaper-rounded MuiPaper-elevation2\">\n                <MTableToolbar {...props} />\n              </div>\n              {this.props.toolbarComponents}\n            </div>\n          ),\n        }}\n        icons={tableIcons}\n        title={this.props.title}\n        columns={this.props.columns}\n        data={this.props.data}\n        localization={{\n          toolbar: {\n            nRowsSelected:\n              \"{0} \" +\n              (this.props.itemType ? this.props.itemType : \"row\") +\n              \"(s) selected\",\n          },\n        }}\n        options={{\n          ...{\n            search: true,\n            paging: false,\n            rowStyle: (rowData) => ({\n              backgroundColor: rowData.backgroundColor\n                ? rowData.backgroundColor\n                : rowData.tableData.id % 2 === 0\n                ? \"#FAFAFA\"\n                : \"#FFFFFF\",\n            }),\n            searchFieldStyle: { backgroundColor: \"white\", color: \"black\" },\n          },\n          ...this.props.options,\n        }}\n        onRowClick={this.props.onRowClick}\n        onSelectionChange={this.props.onSelectionChange}\n      ></MaterialTable>\n    );\n  }\n}\n\nexport default Table;\n","import React, { Component } from \"react\";\nimport { Input, Button, Icon, Form, Tab } from \"semantic-ui-react\";\nimport { Container, Col, Row, Modal } from \"react-bootstrap\";\nimport Table from \"../common/Table\";\nimport { KeyboardDatePicker, DatePicker } from \"@material-ui/pickers\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DateRange from \"@material-ui/icons/DateRange\";\n\nclass CheckInOut extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSearchResult = this.handleSearchResult.bind(this);\n    this.handleTransactionsChanges = this.handleDataChanges.bind(this);\n    this.state = {\n      error: false,\n      userFound: \"\",\n      // {\n      //     fname: \"Greg\",\n      //     lname: \"Smelkov\",\n      //     uid: \"12345\",\n      //     courses: [\"Photography I\", \"Photography II\"],\n      // },\n    };\n  }\n\n  handleSearchResult(userFound) {\n    // console.log(userFound);\n    this.setState({ userFound });\n  }\n\n  handleDataChanges(data) {\n    this.props.onUpdateData(data);\n  }\n\n  render() {\n    const userFound = this.state.userFound;\n    let page;\n    if (!userFound)\n      page = (\n        <Search\n          users={this.props.data.users}\n          onSuccessfulSearchResult={this.handleSearchResult}\n        />\n      );\n    else\n      page = (\n        <CheckInOutViewUser\n          data={this.props.data}\n          onDoneClick={this.handleSearchResult}\n          selectedUser={this.state.userFound}\n          onUpdateData={this.handleTransactionsChanges}\n        />\n      );\n    return <Container className=\"checkinout\">{page}</Container>;\n  }\n}\n\nexport default CheckInOut;\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: false,\n    };\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchInput: e.target.value });\n  };\n\n  handleSearchButtonClick = () => {\n    const users = this.props.users.filter(\n      (user) => user.uid === this.state.searchInput\n    );\n    if (users.length > 0) {\n      this.props.onSuccessfulSearchResult(users[0]);\n    } else {\n      this.setState({ error: true });\n    }\n  };\n\n  handleKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      this.handleSearchButtonClick();\n    }\n  };\n\n  render() {\n    const isError = this.state.error;\n    return (\n      <div className=\"checkinout-search\">\n        <h1>Check In/Out</h1>\n        <Input\n          error={this.state.error}\n          onChange={this.handleChange}\n          onKeyPress={this.handleKeyDown}\n          size=\"huge\"\n          fluid\n          icon=\"users\"\n          iconPosition=\"left\"\n          placeholder=\"Search by exact ID...\"\n        />\n        {isError && (\n          <div className=\"error-text\">\n            <p>Error: ID is invalid.</p>\n          </div>\n        )}\n        <Button size=\"big\" animated onClick={this.handleSearchButtonClick}>\n          <Button.Content visible>Search</Button.Content>\n          <Button.Content hidden>\n            <Icon name=\"search\" />\n          </Button.Content>\n        </Button>\n      </div>\n    );\n  }\n}\n\nclass CheckInOutViewUser extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      op: \"\",\n\n      selectedItemId: null,\n      selectedItem: {},\n\n      selectedItemsToReturn: [],\n\n      transactions: [],\n      items: [],\n\n      newTransactions: [],\n\n      isCheckoutModalOpen: false,\n      isCheckoutModalAllDateSelectorOpen: false,\n    };\n  }\n\n  getTransactionsToShow = (preSetTransactions) => {\n    let transactions = Array.from(\n      (preSetTransactions\n        ? preSetTransactions\n        : this.props.data.transactions\n      ).filter(\n        (item) =>\n          item.uid === this.props.selectedUser.uid && !item.checkedInDate\n      )\n    );\n    transactions.forEach((transaction) => {\n      let result = this.props.data.users.filter(\n        (user) => transaction.uid === user.uid\n      );\n      transaction.fname = result[0] ? result[0].fname : \"\";\n      transaction.lname = result[0] ? result[0].lname : \"\";\n      result = this.props.data.items.filter(\n        (item) => transaction.iid === item.iid\n      );\n      transaction.name = result[0] ? result[0].name : \"\";\n      transaction.category = result[0] ? result[0].category : \"\";\n\n      transaction.backgroundColor =\n        !transaction.checkedInDate &&\n        new Date(transaction.dueDate).getTime() < new Date().getTime()\n          ? \"mistyrose\"\n          : \"\";\n    });\n    return transactions;\n  };\n\n  getItemsToShow = (preSetItems) => {\n    let items = Array.from(\n      (preSetItems ? preSetItems : this.props.data.items).filter(\n        (item) =>\n          !item.atid &&\n          this.props.selectedUser.courses.some((course) =>\n            item.courses.includes(course)\n          )\n      )\n    );\n    return items;\n  };\n\n  componentDidMount() {\n    this.setState({\n      transactions: this.getTransactionsToShow(),\n      items: this.getItemsToShow(),\n    });\n  }\n\n  handleDoneClick = () => {\n    this.props.onDoneClick(\"\");\n  };\n\n  handleOpSelectClick = (e, op) => {\n    this.state.transactions.forEach((transaction) => {\n      if (transaction.tableData) transaction.tableData.checked = false;\n    });\n    this.state.items.forEach((item) => {\n      if (item.tableData) item.tableData.checked = false;\n    });\n    this.setState({ op, isCheckoutModalOpen: false });\n  };\n\n  close = () =>\n    this.setState({\n      selectedItemId: null,\n      isCheckoutModalOpen: false,\n    });\n\n  handleChange = (e, userProp) => {\n    const val = e.target.value;\n    this.setState((prevState) => {\n      let selectedItem = Object.assign({}, prevState.selectedItem);\n      selectedItem[userProp] = val;\n      return { selectedItem };\n    });\n  };\n\n  handleRowItemClick = (e, rowData, rowClick = true) => {\n    if (this.state.op === \"checkin\") {\n      let transactions = this.state.transactions;\n      const index = transactions.indexOf(rowData);\n      transactions[index].tableData.checked = !transactions[index].tableData\n        .checked;\n      this.setState({ transactions });\n    } else if (this.state.op === \"checkout\") {\n      let items = this.state.items;\n      const item = items.find((item) => item.iid === rowData.iid);\n      if (rowClick) item.tableData.checked = !item.tableData.checked;\n      this.setState({ items });\n    } else {\n      this.setState({\n        selectedItemId: rowData.tid,\n        selectedItem: rowData,\n      });\n    }\n  };\n\n  handleReturnSelectedItemsClick = (e) => {\n    let data = Object.assign({}, this.props.data);\n    const completedTransactionIds = this.state.transactions\n      .filter((transaction) => transaction.tableData?.checked)\n      .map((transaction) => transaction.tid);\n    completedTransactionIds.forEach((id) => {\n      let transaction = data.transactions.find(\n        (transaction) => transaction.tid === id\n      );\n      transaction.checkedInDate = new Date().getTime();\n      let item = data.items.find((item) => item.iid === transaction.iid);\n      item.atid = \"\";\n    });\n\n    this.props.onUpdateData(data);\n\n    this.setState(\n      {\n        transactions: this.getTransactionsToShow(),\n        items: this.getItemsToShow(),\n      },\n      this.handleOpSelectClick(e, \"\")\n    );\n  };\n\n  handleCheckOutCartButtonClick = (e) => {\n    let data = Object.assign({}, this.props.data);\n    const itemsToCheckOut = this.state.items.filter(\n      (item) => item.tableData?.checked\n    );\n    let newTransactions = [];\n    itemsToCheckOut.forEach((item) => {\n      let newAtid = (\n        Math.max(\n          ...data.transactions.concat(newTransactions).map((t) => t.tid)\n        ) + 1\n      ).toString();\n      newTransactions.push({\n        tid: newAtid,\n        uid: this.props.selectedUser.uid,\n        iid: item.iid,\n        checkedOutDate: new Date().getTime(),\n        dueDate: null,\n        checkedInDate: \"\",\n      });\n    });\n\n    this.setState({ newTransactions, isCheckoutModalOpen: true });\n  };\n\n  handleConfirmCheckOutButtonClick = (e) => {\n    if (this.state.newTransactions.some((transaction) => !transaction.dueDate))\n      return;\n\n    let data = Object.assign({}, this.props.data);\n    data.transactions = data.transactions.concat(this.state.newTransactions);\n    this.state.newTransactions.forEach(\n      (transaction) =>\n        (data.items.find((item) => item.iid === transaction.iid).atid =\n          transaction.tid)\n    );\n\n    this.props.onUpdateData(data);\n    this.setState(\n      {\n        transactions: this.getTransactionsToShow(data.transactions),\n        items: this.getItemsToShow(),\n      },\n      this.handleOpSelectClick(e, \"\")\n    );\n  };\n\n  formatDate = (dateString) => {\n    if (!dateString) return \"\";\n    const date = new Date(dateString);\n    return (\n      date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear()\n    );\n  };\n\n  render() {\n    const selectedItemId = this.state.selectedItemId;\n    const selectedItem = this.state.selectedItem;\n\n    const handleDateChange = (date, iid) => {\n      let newTransactions = Array.from(this.state.newTransactions);\n      newTransactions.find(\n        (transaction) => transaction.iid === iid\n      ).dueDate = date.getTime();\n      this.setState({ newTransactions });\n    };\n\n    const handleAllCheckoutDateChange = (date) => {\n      let newTransactions = Array.from(this.state.newTransactions);\n      newTransactions.forEach(\n        (transaction) => (transaction.dueDate = date.getTime())\n      );\n      this.setState({\n        newTransactions,\n        isCheckoutModalAllDateSelectorOpen: false,\n      });\n    };\n\n    const currentlyHeldColumnSet = [\n      { title: \"Item Name\", field: \"name\" },\n      { title: \"Category\", field: \"category\" },\n      { title: \"Transaction Notes\", field: \"notes\" },\n      {\n        title: \"Checked Out\",\n        field: \"checkedOutDate\",\n        render: (rowData) => this.formatDate(rowData.checkedOutDate),\n      },\n      {\n        title: \"Due Date\",\n        field: \"dueDate\",\n        render: (rowData) => this.formatDate(rowData.dueDate),\n      },\n    ];\n\n    const itemsColumnSet = [\n      { title: \"Item Name\", field: \"name\" },\n      { title: \"Category\", field: \"category\" },\n      { title: \"Notes\", field: \"notes\" },\n    ];\n\n    const cartColumnSet = [\n      { title: \"Item Name\", field: \"name\" },\n      { title: \"Category\", field: \"category\" },\n    ];\n\n    const checkOutColumnSet = [\n      { title: \"Item Name\", field: \"name\" },\n      { title: \"Category\", field: \"category\" },\n      {\n        title: \"Due Date\",\n        field: \"dueDate\",\n        render: (rowData) => (\n          <KeyboardDatePicker\n            autoOk\n            error={\n              !this.state.newTransactions.find(\n                (transaction) => rowData.iid === transaction.iid\n              ).dueDate\n            }\n            variant=\"inline\"\n            inputVariant=\"outlined\"\n            label=\"Select due date\"\n            format=\"MM/dd/yyyy\"\n            value={\n              this.state.newTransactions.find(\n                (transaction) => rowData.iid === transaction.iid\n              ).dueDate\n                ? new Date(\n                    this.state.newTransactions.find(\n                      (transaction) => rowData.iid === transaction.iid\n                    ).dueDate\n                  )\n                : null\n            }\n            InputAdornmentProps={{ position: \"end\" }}\n            onChange={(date) => handleDateChange(date, rowData.iid)}\n          />\n        ),\n      },\n    ];\n\n    let itemPanes = [\n      {\n        menuItem: \"All\",\n        render: () => (\n          <Table\n            data={this.state.items}\n            itemType={\"item\"}\n            columns={itemsColumnSet}\n            title={<h3>All</h3>}\n            onRowClick={(event, rowData) =>\n              this.handleRowItemClick(event, rowData)\n            }\n            onSelectionChange={(event, rowData) => {\n              this.handleRowItemClick(event, rowData, false);\n            }}\n            options={{ selection: true }}\n          />\n        ),\n      },\n    ];\n\n    const categories = [\n      ...new Set(this.state.items.map((item) => item.category)),\n    ].sort();\n    categories.forEach((category) => {\n      itemPanes.push({\n        menuItem: category,\n        render: () => (\n          <Table\n            data={this.state.items.filter((item) => item.category === category)}\n            itemType={\"item\"}\n            columns={itemsColumnSet}\n            title={<h3>{category}</h3>}\n            onRowClick={(event, rowData) =>\n              this.handleRowItemClick(event, rowData)\n            }\n            onSelectionChange={(event, rowData) => {\n              this.handleRowItemClick(event, rowData, false);\n            }}\n            options={{ selection: true }}\n          />\n        ),\n      });\n    });\n\n    const cartPanes = [\n      {\n        menuItem: \"\",\n        render: () => (\n          <Table\n            data={JSON.parse(\n              JSON.stringify(\n                this.state.items.filter((item) => item.tableData?.checked)\n              )\n            )}\n            itemType={\"item\"}\n            columns={cartColumnSet}\n            title={<h3>Cart</h3>}\n            onRowClick={(event, rowData) =>\n              this.handleRowItemClick(event, rowData)\n            }\n            onSelectionChange={(event, rowData) => {\n              this.handleRowItemClick(event, rowData, false);\n            }}\n            options={{ selection: true, search: false }}\n          />\n        ),\n      },\n    ];\n\n    let pageOp;\n    if (this.state.op === \"checkin\") {\n      pageOp = (\n        <div className=\"checkinout-viewuser\">\n          <Row className=\"page-menu\">\n            <h1>\n              {this.props.selectedUser.fname +\n                \" \" +\n                this.props.selectedUser.lname}{\" \"}\n              -- Check In/Return\n            </h1>\n            <Button\n              onClick={(e) => {\n                this.handleOpSelectClick(e, \"\");\n              }}\n              size=\"big\"\n              animated\n              color=\"green\"\n            >\n              <Button.Content visible>Back</Button.Content>\n              <Button.Content hidden>\n                <Icon name=\"arrow circle left\" />\n              </Button.Content>\n            </Button>\n          </Row>\n          <Row>\n            <div className=\"current-table-container\">\n              <Table\n                data={this.state.transactions}\n                itemType={\"item\"}\n                columns={currentlyHeldColumnSet}\n                title={<h3>Currently held items:</h3>}\n                onRowClick={(event, rowData) =>\n                  this.handleRowItemClick(event, rowData)\n                }\n                options={{ selection: true }}\n              />\n            </div>\n          </Row>\n          <Row className=\"flex-end\">\n            <Button\n              onClick={(e) => {\n                this.handleOpSelectClick(e, \"\");\n              }}\n              color=\"red\"\n              size=\"big\"\n            >\n              <Button.Content visible>Cancel</Button.Content>\n            </Button>\n            <Button\n              onClick={(e) => {\n                this.handleReturnSelectedItemsClick(e);\n              }}\n              color=\"orange\"\n              size=\"big\"\n            >\n              <Button.Content visible>Return Selected Items</Button.Content>\n            </Button>\n          </Row>\n        </div>\n      );\n    } else if (this.state.op === \"checkout\") {\n      pageOp = (\n        <div className=\"checkinout-viewuser\">\n          <Row className=\"page-menu\">\n            <h1>\n              {this.props.selectedUser.fname +\n                \" \" +\n                this.props.selectedUser.lname}{\" \"}\n              -- Check Out/Borrow\n            </h1>\n            <Button\n              onClick={(e) => {\n                this.handleOpSelectClick(e, \"\");\n              }}\n              size=\"big\"\n              animated\n              color=\"green\"\n            >\n              <Button.Content visible>Back</Button.Content>\n              <Button.Content hidden>\n                <Icon name=\"arrow circle left\" />\n              </Button.Content>\n            </Button>\n          </Row>\n          <Row>\n            <div className=\"checkout-table-wrapper\">\n              <Tab className=\"checkout-inv-table\" panes={itemPanes} />\n              <Tab className=\"checkout-cart-table\" panes={cartPanes} />\n              <Modal\n                centered\n                size={this.state.selectedUserId >= 0 ? \"xl\" : \"lg\"}\n                show={this.state.isCheckoutModalOpen}\n                onHide={this.close}\n              >\n                <Modal.Header bsPrefix=\"modal-header\">\n                  <Modal.Title>Check Out</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                  <Row>\n                    <Col>\n                      <Table\n                        data={JSON.parse(\n                          JSON.stringify(\n                            this.state.items.filter(\n                              (item) => item.tableData?.checked\n                            )\n                          )\n                        )}\n                        itemType={\"item\"}\n                        columns={checkOutColumnSet}\n                        title={<h3>Cart</h3>}\n                        options={{ selection: false, search: false }}\n                        toolbarComponents={\n                          <div className=\"toolbarSetAllDate\">\n                            <div>\n                              Set all due dates:\n                              <IconButton\n                                onClick={() =>\n                                  this.setState({\n                                    isCheckoutModalAllDateSelectorOpen: true,\n                                  })\n                                }\n                              >\n                                <DateRange />\n                              </IconButton>\n                              <DatePicker\n                                autoOk\n                                variant=\"inline\"\n                                // ERROR: issue with open not finding correct render location,\n                                //   seems like it might be resolved in next datepicker update\n                                //   update plugin when possible\n                                //   otherwise will work temporarily\n                                open={\n                                  this.state.isCheckoutModalAllDateSelectorOpen\n                                }\n                                onClose={() =>\n                                  this.setState({\n                                    isCheckoutModalAllDateSelectorOpen: false,\n                                  })\n                                }\n                                format=\"MM/dd/yyyy\"\n                                onChange={(date) =>\n                                  handleAllCheckoutDateChange(date)\n                                }\n                                value={null}\n                                style={{ display: \"none\" }}\n                              />\n                            </div>\n                          </div>\n                        }\n                      />\n                    </Col>\n                  </Row>\n                </Modal.Body>\n                <Modal.Footer>\n                  <Button\n                    onClick={(e) => {\n                      this.close();\n                    }}\n                    color=\"red\"\n                    size=\"big\"\n                  >\n                    <Button.Content visible>Cancel</Button.Content>\n                  </Button>\n                  <Button\n                    onClick={(e) => {\n                      this.handleConfirmCheckOutButtonClick(e);\n                    }}\n                    color=\"blue\"\n                    size=\"big\"\n                  >\n                    <Button.Content visible>Confirm Check Out</Button.Content>\n                  </Button>\n                </Modal.Footer>\n              </Modal>\n            </div>\n          </Row>\n          <Row className=\"flex-end\">\n            <Button\n              onClick={(e) => {\n                this.handleOpSelectClick(e, \"\");\n              }}\n              color=\"red\"\n              size=\"big\"\n            >\n              <Button.Content visible>Cancel</Button.Content>\n            </Button>\n            <Button\n              onClick={(e) => {\n                this.handleCheckOutCartButtonClick(e);\n              }}\n              color=\"blue\"\n              size=\"big\"\n            >\n              <Button.Content visible>Check Out Selected Items</Button.Content>\n            </Button>\n          </Row>\n        </div>\n      );\n    } else {\n      pageOp = (\n        <div className=\"checkinout-viewuser\">\n          <Row className=\"page-menu\">\n            <h1>\n              {this.props.selectedUser.fname +\n                \" \" +\n                this.props.selectedUser.lname}\n            </h1>\n            <Button\n              onClick={this.handleDoneClick}\n              size=\"big\"\n              animated\n              color=\"green\"\n            >\n              <Button.Content visible>Complete Transactions</Button.Content>\n              <Button.Content hidden>\n                <Icon name=\"check\" />\n              </Button.Content>\n            </Button>\n          </Row>\n          <Row>\n            <div className=\"current-table-container\">\n              <Table\n                data={this.state.transactions}\n                itemType={\"item\"}\n                columns={currentlyHeldColumnSet}\n                title={<h3>Currently held items:</h3>}\n                onRowClick={(event, rowData) =>\n                  this.handleRowItemClick(event, rowData)\n                }\n              />\n              <Modal\n                centered\n                size={this.state.selectedItemId >= 0 ? \"lg\" : \"lg\"}\n                show={selectedItemId != null}\n                onHide={this.close}\n              >\n                <Modal.Header closeButton bsPrefix=\"modal-header\">\n                  <Modal.Title>Item</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                  <Row>\n                    <Col>\n                      <Form>\n                        <Form.Field>\n                          <label>\n                            First Name:\n                            {this.state.nameError && (\n                              <span className=\"error-text modal-label-error-text\">\n                                Error: Field cannot be empty.\n                              </span>\n                            )}\n                          </label>\n                          <Form.Input\n                            error={this.state.nameError}\n                            name=\"fname\"\n                            placeholder=\"First Name\"\n                            defaultValue={selectedItem.fname}\n                            readOnly\n                          ></Form.Input>\n                        </Form.Field>\n                        <Form.Field>\n                          <label>\n                            Last Name:\n                            {this.state.nameError && (\n                              <span className=\"error-text modal-label-error-text\">\n                                Error: Field cannot be empty.\n                              </span>\n                            )}\n                          </label>\n                          <Form.Input\n                            error={this.state.nameError}\n                            name=\"lname\"\n                            placeholder=\"Last Name\"\n                            defaultValue={selectedItem.lname}\n                            readOnly\n                          ></Form.Input>\n                        </Form.Field>\n                        <Form.Field>\n                          <label>\n                            Item Name:\n                            {this.state.categoryError && (\n                              <span className=\"error-text modal-label-error-text\">\n                                Error: Field cannot be empty.\n                              </span>\n                            )}\n                          </label>\n                          <Form.Input\n                            error={this.state.categoryError}\n                            name=\"name\"\n                            placeholder=\"name\"\n                            defaultValue={selectedItem.category}\n                            readOnly\n                          ></Form.Input>\n                        </Form.Field>\n                        <Form.Field>\n                          <label>\n                            Category:\n                            {this.state.notesError && (\n                              <span className=\"error-text modal-label-error-text\">\n                                Error: Field cannot be empty.\n                              </span>\n                            )}\n                          </label>\n                          <Form.Input\n                            name=\"category\"\n                            error={this.state.notesError}\n                            placeholder=\"Category\"\n                            defaultValue={selectedItem.notes}\n                            readOnly\n                          ></Form.Input>\n                        </Form.Field>\n                        <Form.Field>\n                          <label>\n                            Serial:\n                            {this.state.serialError && (\n                              <span className=\"error-text modal-label-error-text\">\n                                Error: Field cannot be empty.\n                              </span>\n                            )}\n                          </label>\n                          <Form.Input\n                            name=\"serial\"\n                            error={this.state.serialError}\n                            placeholder=\"Serial\"\n                            defaultValue={selectedItem.serial}\n                            onChange={(e) => {\n                              this.handleChange(e, \"serial\");\n                            }}\n                            readOnly\n                          ></Form.Input>\n                        </Form.Field>\n                        <Form.Field>\n                          <label>\n                            Notes:\n                            {this.state.notesError && (\n                              <span className=\"error-text modal-label-error-text\">\n                                Error: Field cannot be empty.\n                              </span>\n                            )}\n                          </label>\n                          <Form.Input\n                            name=\"notes\"\n                            error={this.state.notesError}\n                            placeholder=\"Notes\"\n                            defaultValue={selectedItem.notes}\n                            onChange={(e) => {\n                              this.handleChange(e, \"notes\");\n                            }}\n                            readOnly\n                          ></Form.Input>\n                        </Form.Field>\n                        <Form.Field>\n                          <label>Checked Out:</label>\n                          <Form.Input\n                            name=\"checkedOut\"\n                            placeholder=\"Checked Out\"\n                            defaultValue={this.formatDate(\n                              selectedItem.checkedOutDate\n                            )}\n                            onChange={(e) => {\n                              this.handleChange(e, \"checkedOutDate\");\n                            }}\n                            readOnly\n                          ></Form.Input>\n                        </Form.Field>\n                        <Form.Field>\n                          <label>Checked In:</label>\n                          <Form.Input\n                            name=\"checkedIn\"\n                            placeholder=\"Checked In\"\n                            error={!selectedItem.checkedInDate}\n                            defaultValue={this.formatDate(\n                              selectedItem.checkedInDate\n                            )}\n                            onChange={(e) => {\n                              this.handleChange(e, \"checkedInDate\");\n                            }}\n                            readOnly\n                          ></Form.Input>\n                        </Form.Field>\n                        <Form.Field>\n                          <label>Due Date:</label>\n                          <Form.Input\n                            name=\"due\"\n                            placeholder=\"Due Date\"\n                            defaultValue={this.formatDate(selectedItem.dueDate)}\n                            onChange={(e) => {\n                              this.handleChange(e, \"dueDate\");\n                            }}\n                            readOnly\n                          ></Form.Input>\n                        </Form.Field>\n                      </Form>\n                    </Col>\n                  </Row>\n                </Modal.Body>\n                <Modal.Footer></Modal.Footer>\n              </Modal>\n            </div>\n          </Row>\n          <Row className=\"checkinout-buttons\">\n            <Button\n              onClick={(e) => {\n                this.handleOpSelectClick(e, \"checkin\");\n              }}\n              color=\"orange\"\n              size=\"big\"\n            >\n              <Button.Content visible>Return Items</Button.Content>\n            </Button>\n            <Button\n              onClick={(e) => {\n                this.handleOpSelectClick(e, \"checkout\");\n              }}\n              color=\"blue\"\n              size=\"big\"\n            >\n              <Button.Content visible>Check Out Items</Button.Content>\n            </Button>\n          </Row>\n        </div>\n      );\n    }\n\n    return pageOp;\n  }\n}\n","import React, { Component } from \"react\";\r\nimport {\r\n  Divider,\r\n  Button,\r\n  Form,\r\n  Dropdown,\r\n  Tab,\r\n  Icon,\r\n  Menu,\r\n} from \"semantic-ui-react\";\r\nimport { Col, Row, Modal } from \"react-bootstrap\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport XLSX from \"xlsx\";\r\nimport Table from \"../common/Table\";\r\n\r\nclass Users extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleImportSpreadsheetClick = this.handleImportSpreadsheetClick.bind(\r\n      this\r\n    );\r\n    this.state = {\r\n      columnSet: [\r\n        { title: \"Last Name\", field: \"lname\", defaultSort: \"asc\" },\r\n        { title: \"First Name\", field: \"fname\" },\r\n        {\r\n          title: \"Courses\",\r\n          field: \"courses\",\r\n          render: (rowData) => {\r\n            return rowData.courses.length > 0\r\n              ? rowData.courses.reduce((result, item) => (\r\n                  <>\r\n                    {result}\r\n                    {\", \"}\r\n                    {item}\r\n                  </>\r\n                ))\r\n              : \"\";\r\n          },\r\n        },\r\n      ],\r\n\r\n      activeItem: \"user\",\r\n      firstNameError: false,\r\n      lastNameError: false,\r\n      idError: false,\r\n      emailError: false,\r\n      editable: true,\r\n      isChangesMadeToModal: false,\r\n\r\n      showImportExcelModal: false,\r\n      importedExcelData: [],\r\n      importEmailErrors: {},\r\n\r\n      selectedUserId: null,\r\n      selectedUser: {\r\n        fname: \"\",\r\n        lname: \"\",\r\n        courses: [],\r\n        uid: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        notes: \"\",\r\n        transactions: [],\r\n        creationDate: \"\",\r\n      },\r\n    };\r\n  }\r\n\r\n  close = () =>\r\n    this.setState({\r\n      selectedUserId: null,\r\n      selectedUser: {\r\n        fname: \"\",\r\n        lname: \"\",\r\n        courses: [],\r\n        uid: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        notes: \"\",\r\n        transactions: [],\r\n        creationDate: \"\",\r\n      },\r\n      firstNameError: false,\r\n      lastNameError: false,\r\n      idError: false,\r\n      emailError: false,\r\n      editable: true,\r\n      submitName: \"Close\",\r\n      submitIcon: null,\r\n      isChangesMadeToModal: false,\r\n      showImportExcelModal: false,\r\n      importedExcelData: [],\r\n      importEmailErrors: {},\r\n    });\r\n\r\n  handleChange = (e, userProp) => {\r\n    const val = e.target.value;\r\n    this.setState((prevState) => {\r\n      let selectedUser = Object.assign({}, prevState.selectedUser);\r\n      selectedUser[userProp] = val;\r\n      return { selectedUser, isChangesMadeToModal: true };\r\n    });\r\n  };\r\n\r\n  handleUserEditClick = () => {\r\n    this.setState({\r\n      editable: !this.state.editable,\r\n    });\r\n  };\r\n\r\n  handleUserSelectClick = (e, rowData) => {\r\n    this.setState({\r\n      selectedUserId: rowData.tableData.id,\r\n      selectedUser: this.props.data.users[rowData.tableData.id],\r\n    });\r\n    this.setState((prevState) => {\r\n      let selectedUser = Object.assign({}, prevState.selectedUser);\r\n      let transactions = Array.from(\r\n        this.props.data.transactions.filter(\r\n          (name) => name.uid === selectedUser.uid\r\n        )\r\n      );\r\n      transactions.forEach((transaction) => {\r\n        transaction.backgroundColor =\r\n          !transaction.checkedInDate &&\r\n          new Date(transaction.dueDate).getTime() < new Date().getTime()\r\n            ? \"mistyrose\"\r\n            : \"\";\r\n      });\r\n      selectedUser[\"transactions\"] = transactions;\r\n      return { selectedUser };\r\n    });\r\n  };\r\n\r\n  handleAddUserClick = () => {\r\n    this.setState({\r\n      selectedUserId: -1,\r\n      selectedUser: {\r\n        fname: \"\",\r\n        lname: \"\",\r\n        courses: [],\r\n        uid: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        notes: \"\",\r\n        creationDate: new Date().getTime(),\r\n        tranactions: [],\r\n      },\r\n      editable: false,\r\n    });\r\n  };\r\n\r\n  handleImportSpreadsheetClick = () => {\r\n    this.refs.fileUploader.click();\r\n  };\r\n\r\n  handleClearAllCoursesClick = () => {\r\n    if (\r\n      window.confirm(\r\n        \"Are you sure you want to clear every user's courses? This process is irreversible.\"\r\n      )\r\n    ) {\r\n      let data = Object.assign({}, this.props.data);\r\n      data.users.forEach((user) => (user.courses = []));\r\n      this.props.onUpdateData(data);\r\n    }\r\n  };\r\n\r\n  onChangeFile(event) {\r\n    const fileObj = event.target.files[0];\r\n    const reader = new FileReader();\r\n    const rABS = !!reader.readAsBinaryString;\r\n\r\n    reader.onload = (e) => {\r\n      const wb = XLSX.read(e.target.result, {\r\n        type: rABS ? \"binary\" : \"array\",\r\n        bookVBA: true,\r\n      });\r\n      const data = XLSX.utils\r\n        .sheet_to_json(wb.Sheets[wb.SheetNames[0]])\r\n        .map((user) => ({\r\n          fname: user[\"Preferred Name\"].split(/[\\s, ]+/)[1],\r\n          lname: user[\"Preferred Name\"].split(/[\\s, ]+/)[0],\r\n          courses: [],\r\n          uid:\r\n            \"0\".repeat(8 - user[\"ID\"].toString().length) +\r\n            user[\"ID\"].toString(),\r\n          email:\r\n            user[\"Preferred Name\"].split(/[\\s, ]+/)[1] +\r\n            \"_\" +\r\n            user[\"Preferred Name\"].split(/[\\s, ]+/)[0],\r\n          creationDate: new Date().getTime(),\r\n        }))\r\n        .map((nuser) => {\r\n          const existingUser = this.props.data.users.find(\r\n            (user) => user.uid === nuser.uid\r\n          );\r\n          if (existingUser === undefined) return nuser;\r\n          this.setState({\r\n            [\"importEmailValid\" +\r\n            existingUser.uid]: /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(\r\n              existingUser.email\r\n            ),\r\n          });\r\n          return existingUser;\r\n        });\r\n\r\n      //TODO: check ids aren't duplicate\r\n\r\n      this.setState({ importedExcelData: data, showImportExcelModal: true });\r\n    };\r\n\r\n    if (rABS) {\r\n      reader.readAsBinaryString(fileObj);\r\n    } else {\r\n      reader.readAsArrayBuffer(fileObj);\r\n    }\r\n  }\r\n\r\n  checkErrorUpdateDataSet = () => {\r\n    if (\r\n      !this.state.firstNameError &&\r\n      !this.state.lastNameError &&\r\n      !this.state.idError &&\r\n      !this.state.emailError\r\n    ) {\r\n      let data = Object.assign({}, this.props.data);\r\n      if (this.state.selectedUserId >= 0) {\r\n        data.users[this.state.selectedUserId] = this.state.selectedUser;\r\n      } else {\r\n        data.users.push(this.state.selectedUser);\r\n      }\r\n      this.props.onUpdateData(data);\r\n      this.close();\r\n    }\r\n  };\r\n\r\n  handleSubmitClick = () => {\r\n    if (this.state.isChangesMadeToModal) {\r\n      this.setState(\r\n        {\r\n          firstNameError: this.state.selectedUser.fname === \"\",\r\n          lastNameError: this.state.selectedUser.lname === \"\",\r\n          idError: this.state.selectedUser.uid === \"\",\r\n          emailError: this.state.selectedUser.email === \"\",\r\n        },\r\n        this.checkErrorUpdateDataSet\r\n      );\r\n    } else {\r\n      this.close();\r\n    }\r\n  };\r\n\r\n  handleSaveImportStudents = () => {\r\n    if (!this.state.isChangesMadeToModal) {\r\n      this.close();\r\n    }\r\n\r\n    if (\r\n      this.state.importedExcelData.every(\r\n        (user) => this.state[\"importEmailValid\" + user.uid]\r\n      )\r\n    ) {\r\n      let newUsers = Array.from(this.state.importedExcelData);\r\n      newUsers.forEach(\r\n        (user) =>\r\n          (user.courses = user.courses.concat(this.state.selectedUser.courses))\r\n      );\r\n      let users = [\r\n        ...newUsers,\r\n        ...this.props.data.users.filter(\r\n          (user) =>\r\n            this.state.importedExcelData.find(\r\n              (nuser) => nuser.uid === user.uid\r\n            ) === undefined\r\n        ),\r\n      ];\r\n\r\n      let data = Object.assign({}, this.props.data);\r\n      data.users = users;\r\n      this.props.onUpdateData(data);\r\n      this.close();\r\n    }\r\n  };\r\n\r\n  handleDropdownChange = (e, { value }) => {\r\n    const val = value;\r\n    this.setState((prevState) => {\r\n      let selectedUser = Object.assign({}, prevState.selectedUser);\r\n      selectedUser.courses = val;\r\n      return { selectedUser, isChangesMadeToModal: true };\r\n    });\r\n  };\r\n\r\n  formatDate = (dateString) => {\r\n    if (!dateString) return \"\";\r\n    const date = new Date(dateString);\r\n    return (\r\n      date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear()\r\n    );\r\n  };\r\n\r\n  formatUserDate = (dateString) => {\r\n    if (!dateString) return \"\";\r\n    const date = new Date(dateString);\r\n    let hours = date.getHours();\r\n    let daynnite = \"\";\r\n    if (hours > 12) {\r\n      hours = hours - 12;\r\n      daynnite = \"PM\";\r\n    } else if (hours === 0) {\r\n      hours = 12;\r\n      daynnite = \"AM\";\r\n    } else if (hours < 12) {\r\n      daynnite = \"AM\";\r\n    }\r\n    return (\r\n      date.getMonth() +\r\n      1 +\r\n      \"/\" +\r\n      date.getDate() +\r\n      \"/\" +\r\n      date.getFullYear() +\r\n      \" \" +\r\n      hours +\r\n      \":\" +\r\n      (date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes()) +\r\n      \":\" +\r\n      (date.getSeconds() < 10 ? \"0\" + date.getSeconds() : date.getSeconds()) +\r\n      \" \" +\r\n      daynnite\r\n    );\r\n  };\r\n\r\n  updateImportEmail = (e, uid) => {\r\n    const val = e.target.value;\r\n    this.setState((prevState) => {\r\n      let importedExcelData = Array.from(prevState.importedExcelData);\r\n      importedExcelData.find((user) => user.uid === uid).email = val;\r\n      return {\r\n        [\"importEmailValid\" +\r\n        uid]: /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(val),\r\n        isChangesMadeToModal: true,\r\n        importedExcelData,\r\n      };\r\n    });\r\n  };\r\n\r\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name });\r\n\r\n  render() {\r\n    const selectedUserId = this.state.selectedUserId;\r\n    const selectedUser = this.state.selectedUser;\r\n    let formTablePanes = [];\r\n    if (this.state.selectedUserId != null && this.state.selectedUserId >= 0) {\r\n      formTablePanes = [\r\n        {\r\n          menuItem: \"Due Items\",\r\n          render: () => (\r\n            <Table\r\n              title={\r\n                this.state.selectedUser.fname +\r\n                \" \" +\r\n                this.state.selectedUser.lname\r\n              }\r\n              columns={[\r\n                { title: \"Item ID\", field: \"iid\" },\r\n                { title: \"Transaction ID\", field: \"tid\" },\r\n                {\r\n                  title: \"Checked Out Date\",\r\n                  field: \"checkedOutDate\",\r\n                  render: (rowData) => this.formatDate(rowData.checkedOutDate),\r\n                },\r\n                {\r\n                  title: \"Due Date\",\r\n                  field: \"dueDate\",\r\n                  render: (rowData) => this.formatDate(rowData.dueDate),\r\n                },\r\n              ]}\r\n              data={Array.from(\r\n                this.state.selectedUser.transactions.filter(\r\n                  (name) => name.checkedInDate === \"\"\r\n                )\r\n              )}\r\n            ></Table>\r\n          ),\r\n        },\r\n        {\r\n          menuItem: \"Completed Transactions\",\r\n          render: () => (\r\n            <Table\r\n              title={\r\n                this.state.selectedUser.fname +\r\n                \" \" +\r\n                this.state.selectedUser.lname\r\n              }\r\n              columns={[\r\n                { title: \"Item ID\", field: \"iid\" },\r\n                { title: \"Transaction ID\", field: \"tid\" },\r\n                {\r\n                  title: \"Checked Out Date\",\r\n                  field: \"checkedOutDate\",\r\n                  render: (rowData) => this.formatDate(rowData.checkedOutDate),\r\n                },\r\n                {\r\n                  title: \"Checked In Date\",\r\n                  field: \"checkedInDate\",\r\n                  render: (rowData) => this.formatDate(rowData.checkedInDate),\r\n                },\r\n              ]}\r\n              data={Array.from(\r\n                this.state.selectedUser.transactions.filter(\r\n                  (name) => !(name.checkedInDate === \"\")\r\n                )\r\n              )}\r\n            ></Table>\r\n          ),\r\n        },\r\n      ];\r\n    }\r\n\r\n    const courseOptions = Array.from(\r\n      new Set(\r\n        [].concat.apply(\r\n          [],\r\n          [\r\n            this.state.selectedUser,\r\n            ...this.props.data.items,\r\n            ...this.props.data.users,\r\n          ]\r\n            .filter((item) => item.courses)\r\n            .map((item) => item.courses)\r\n        )\r\n      )\r\n    )\r\n      .sort()\r\n      .map((item) => ({ text: item, value: item }));\r\n\r\n    const importColumns = [\r\n      { title: \"Last Name\", field: \"lname\", defaultSort: \"asc\" },\r\n      { title: \"First Name\", field: \"fname\" },\r\n      { title: \"Student ID\", field: \"uid\" },\r\n      {\r\n        title: \"Email\",\r\n        field: \"email\",\r\n        render: (rowData) => (\r\n          <TextField\r\n            defaultValue={rowData.email}\r\n            error={!this.state[\"importEmailValid\" + rowData.uid]}\r\n            helperText={\r\n              !this.state[\"importEmailValid\" + rowData.uid]\r\n                ? \"Enter a valid email.\"\r\n                : \"\"\r\n            }\r\n            onChange={(e) => {\r\n              this.updateImportEmail(e, rowData.uid);\r\n            }}\r\n          />\r\n        ),\r\n      },\r\n    ];\r\n\r\n    return (\r\n      <Col className=\"stretch-h flex-col\">\r\n        <div className=\"top-bar\">\r\n          <Button\r\n            style={{ backgroundColor: \"#46C88C\", color: \"white\" }}\r\n            onClick={this.handleAddUserClick}\r\n          >\r\n            Create New User\r\n          </Button>\r\n          <Button basic onClick={this.handleImportSpreadsheetClick}>\r\n            Import from Excel\r\n          </Button>\r\n          <input\r\n            type=\"file\"\r\n            ref=\"fileUploader\"\r\n            style={{ display: \"none\" }}\r\n            onChange={this.onChangeFile.bind(this)}\r\n          />\r\n          <Button basic onClick={this.handleClearAllCoursesClick}>\r\n            Clear All Courses\r\n          </Button>\r\n          <Divider clearing />\r\n        </div>\r\n        <div className=\"page-content stretch-h\">\r\n          <Col className=\"stretch-h flex-col\">\r\n            <Table\r\n              data={Array.from(this.props.data.users)}\r\n              columns={this.state.columnSet}\r\n              title={<h2>Users</h2>}\r\n              onRowClick={(event, rowData) =>\r\n                this.handleUserSelectClick(event, rowData)\r\n              }\r\n            />\r\n            <Modal\r\n              centered\r\n              size={\"xl\"}\r\n              show={this.state.showImportExcelModal}\r\n              onHide={this.close}\r\n            >\r\n              <Modal.Header closeButton bsPrefix=\"modal-header\">\r\n                <Modal.Title>Import from Excel file</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <Row>\r\n                  <Col>\r\n                    <Table\r\n                      data={this.state.importedExcelData}\r\n                      columns={importColumns}\r\n                    />\r\n                    <Form>\r\n                      <Form.Field>\r\n                        <label>Courses:</label>\r\n                        <Dropdown\r\n                          placeholder=\"Courses\"\r\n                          name=\"courses\"\r\n                          fluid\r\n                          multiple\r\n                          search\r\n                          selection\r\n                          allowAdditions\r\n                          options={courseOptions}\r\n                          value={selectedUser.courses}\r\n                          onChange={this.handleDropdownChange}\r\n                        />\r\n                      </Form.Field>\r\n                    </Form>\r\n                  </Col>\r\n                  {/* {table} */}\r\n                </Row>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <Button\r\n                  id=\"add-icon-handler\"\r\n                  variant=\"primary\"\r\n                  onClick={this.handleSaveImportStudents}\r\n                >\r\n                  {this.state.isChangesMadeToModal ? (\r\n                    <Icon name=\"save\"></Icon>\r\n                  ) : null}\r\n                  {this.state.isChangesMadeToModal ? \"Save\" : \"Cancel\"}\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n            <Modal\r\n              centered\r\n              size={selectedUserId >= 0 ? \"xl\" : \"lg\"}\r\n              dialogClassName=\"modal-30w\"\r\n              show={selectedUserId != null}\r\n              onHide={this.close}\r\n            >\r\n              <Modal.Header bsPrefix=\"modal-header\">\r\n                <Modal.Title>User</Modal.Title>\r\n                <IconButton onClick={this.close} size=\"small\" color=\"inherit\">\r\n                  <ClearIcon />\r\n                </IconButton>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                {this.state.activeItem == \"user\" &&\r\n                  this.state.selectedUser !== null && (\r\n                    <Form>\r\n                      <Form.Group widths={2}>\r\n                        <Form.Field>\r\n                          <label>\r\n                            First Name:\r\n                            {this.state.firstNameError && (\r\n                              <span className=\"error-text modal-label-error-text\">\r\n                                Error: Field cannot be empty.\r\n                              </span>\r\n                            )}\r\n                          </label>\r\n                          <Form.Input\r\n                            error={this.state.firstNameError}\r\n                            name=\"fname\"\r\n                            placeholder=\"First Name\"\r\n                            defaultValue={selectedUser.fname}\r\n                            onChange={(e) => {\r\n                              this.handleChange(e, \"fname\");\r\n                            }}\r\n                            readOnly={this.state.editable}\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                          <label>\r\n                            Last Name:\r\n                            {this.state.lastNameError && (\r\n                              <span className=\"error-text modal-label-error-text\">\r\n                                Error: Field cannot be empty.\r\n                              </span>\r\n                            )}\r\n                          </label>\r\n                          <Form.Input\r\n                            error={this.state.lastNameError}\r\n                            name=\"lname\"\r\n                            placeholder=\"Last Name\"\r\n                            defaultValue={selectedUser.lname}\r\n                            onChange={(e) => {\r\n                              this.handleChange(e, \"lname\");\r\n                            }}\r\n                            readOnly={this.state.editable}\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                      </Form.Group>\r\n                      <Form.Field>\r\n                        <label>Courses:</label>\r\n                        <Dropdown\r\n                          placeholder=\"Courses\"\r\n                          name=\"courses\"\r\n                          fluid\r\n                          multiple\r\n                          search\r\n                          selection\r\n                          allowAdditions\r\n                          options={courseOptions}\r\n                          value={selectedUser.courses}\r\n                          onChange={this.handleDropdownChange}\r\n                          disabled={this.state.editable}\r\n                        />\r\n                      </Form.Field>\r\n                      <Form.Field>\r\n                        <label>\r\n                          UML ID:\r\n                          {this.state.idError && (\r\n                            <span className=\"error-text modal-label-error-text\">\r\n                              Error: Field cannot be empty.\r\n                            </span>\r\n                          )}\r\n                        </label>\r\n                        <Form.Input\r\n                          name=\"id\"\r\n                          error={this.state.idError}\r\n                          placeholder=\"UML ID\"\r\n                          defaultValue={selectedUser.uid}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"uid\");\r\n                          }}\r\n                          readOnly={this.state.editable}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      <Form.Group widths={2}>\r\n                        <Form.Field>\r\n                          <label>\r\n                            Email:\r\n                            {this.state.emailError && (\r\n                              <span className=\"error-text modal-label-error-text\">\r\n                                Error: Field cannot be empty.\r\n                              </span>\r\n                            )}\r\n                          </label>\r\n                          <Form.Input\r\n                            name=\"email\"\r\n                            error={this.state.emailError}\r\n                            placeholder=\"Email\"\r\n                            defaultValue={selectedUser.email}\r\n                            onChange={(e) => {\r\n                              this.handleChange(e, \"email\");\r\n                            }}\r\n                            readOnly={this.state.editable}\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                          <label>Phone Number:</label>\r\n                          <Form.Input\r\n                            name=\"phone\"\r\n                            placeholder=\"Phone Number\"\r\n                            defaultValue={selectedUser.phone}\r\n                            onChange={(e) => {\r\n                              this.handleChange(e, \"phone\");\r\n                            }}\r\n                            readOnly={this.state.editable}\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                      </Form.Group>\r\n                      <Form.Field>\r\n                        <label>Notes:</label>\r\n                        <Form.Input\r\n                          name=\"notes\"\r\n                          placeholder=\"Notes\"\r\n                          defaultValue={selectedUser.notes}\r\n                          onChange={(e) => {\r\n                            this.handleChange(e, \"notes\");\r\n                          }}\r\n                          readOnly={this.state.editable}\r\n                        ></Form.Input>\r\n                      </Form.Field>\r\n                      {selectedUserId >= 0 ? (\r\n                        <Form.Field>\r\n                          <label>Date Created:</label>\r\n                          <Form.Input\r\n                            name=\"creationDate\"\r\n                            placeholder=\"creationDate\"\r\n                            defaultValue={this.formatUserDate(\r\n                              selectedUser.creationDate\r\n                            )}\r\n                            readOnly\r\n                          ></Form.Input>\r\n                        </Form.Field>\r\n                      ) : null}\r\n                    </Form>\r\n                  )}\r\n                {this.state.activeItem === \"table\" &&\r\n                  this.state.selectedUserId >= 0 && (\r\n                    <Tab\r\n                      panes={formTablePanes}\r\n                      className=\"stretch-h flex-col\"\r\n                    />\r\n                  )}\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                {this.state.selectedUserId >= 0 ? (\r\n                  <Button\r\n                    className=\"btn btn-primary mr-auto\"\r\n                    toggle\r\n                    active={!this.state.editable}\r\n                    onClick={this.handleUserEditClick}\r\n                  >\r\n                    <Icon name=\"pencil\" />\r\n                    Edit\r\n                  </Button>\r\n                ) : null}\r\n                {this.state.selectedUserId >= 0 && (\r\n                  <Menu compact className=\"mr-auto\">\r\n                    <Menu.Item\r\n                      name=\"user\"\r\n                      active={this.state.activeItem === \"user\"}\r\n                      onClick={this.handleItemClick}\r\n                    >\r\n                      <Icon name=\"clipboard list\" />\r\n                      User Form\r\n                    </Menu.Item>\r\n                    <Menu.Item\r\n                      name=\"table\"\r\n                      active={this.state.activeItem === \"table\"}\r\n                      onClick={this.handleItemClick}\r\n                    >\r\n                      <Icon name=\"book\" />\r\n                      Transactions\r\n                    </Menu.Item>\r\n                  </Menu>\r\n                )}\r\n                <Button\r\n                  id=\"add-icon-handler\"\r\n                  variant=\"primary\"\r\n                  onClick={this.handleSubmitClick}\r\n                >\r\n                  {this.state.isChangesMadeToModal ? (\r\n                    <Icon name=\"save\"></Icon>\r\n                  ) : null}\r\n                  {this.state.isChangesMadeToModal ? \"Save\" : \"Close\"}\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n          </Col>\r\n        </div>\r\n      </Col>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Users;\r\n","import React, { Component } from \"react\";\nimport {\n  Divider,\n  Button,\n  Form,\n  Dropdown,\n  Icon,\n  Tab,\n  Menu,\n} from \"semantic-ui-react\";\nimport { Col, Modal } from \"react-bootstrap\";\nimport Table from \"../common/Table\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\n\nclass Inventory extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    const headerStyleGrey = {\n      backgroundColor: \"#E2E2E2\",\n      color: \"black\",\n      fontSize: \"24\",\n    };\n    this.state = {\n      columnSet: [\n        {\n          title: \"Item Name\",\n          field: \"name\",\n          headerStyle: headerStyleGrey,\n        },\n        {\n          title: \"Brand\",\n          field: \"brand\",\n          headerStyle: headerStyleGrey,\n        },\n        {\n          title: \"Category\",\n          field: \"category\",\n          headerStyle: headerStyleGrey,\n        },\n        {\n          title: \"Item ID\",\n          field: \"iid\",\n          defaultSort: \"asc\",\n          headerStyle: headerStyleGrey,\n        },\n        {\n          title: \"Serial\",\n          field: \"serial\",\n          headerStyle: headerStyleGrey,\n        },\n        {\n          title: \"Notes\",\n          field: \"notes\",\n          headerStyle: headerStyleGrey,\n          render: (rowData) => {\n            return rowData.notes ? (\n              <Icon\n                size=\"large\"\n                name=\"check circle\"\n                className=\"notes-icon\"\n              ></Icon>\n            ) : null;\n          },\n        },\n        {\n          title: \"Courses\",\n          field: \"courses\",\n          headerStyle: headerStyleGrey,\n          render: (rowData) => {\n            return rowData.courses.length > 0\n              ? rowData.courses.reduce((result, item) => (\n                  <>\n                    {result}\n                    {\", \"}\n                    {item}\n                  </>\n                ))\n              : \"\";\n          },\n        },\n        {\n          title: \"Expected Return Date\",\n          field: \"expected\",\n          headerStyle: headerStyleGrey,\n          render: (rowData) =>\n            rowData.expected ? this.formatDate(rowData.expected) : \"Available\",\n          customFilterAndSearch: (term, rowData) =>\n            this.formatDateForSearchBar(rowData.expected).indexOf(term) !==\n              -1 || this.formatDate(rowData.expected).indexOf(term) !== -1,\n        },\n      ],\n\n      activeItem: \"item\",\n      open: false,\n\n      nameError: false,\n      categoryError: false,\n      iidError: false,\n      serialError: false,\n      editable: true,\n      isChangesMadeToModal: false,\n      isItemIdUnavailable: false,\n\n      selectedItemId: null,\n      selectedItem: {\n        name: \"\",\n        iid: \"\",\n        serial: \"\",\n        category: \"\",\n        notes: \"\",\n        atid: \"\",\n        courses: [],\n        expected: \"\",\n        creationDate: \"\",\n        transactions: [],\n      },\n    };\n  }\n\n  close = () =>\n    this.setState({\n      selectedItemId: null,\n      nameError: false,\n      categoryError: false,\n      serialError: false,\n      editable: true,\n      submitName: \"Close\",\n      submitIcon: null,\n      isChangesMadeToModal: false,\n      isItemIdUnavailable: false,\n    });\n\n  handleChange = (e, userProp) => {\n    let val = e.target.value;\n    if (userProp === \"iid\") {\n      val = this.handleItemIdVerify(val);\n    }\n    this.setState((prevState) => {\n      let selectedItem = Object.assign({}, prevState.selectedItem);\n      selectedItem[userProp] = val;\n      return { selectedItem, isChangesMadeToModal: true };\n    });\n  };\n\n  handleItemSelectClick = (e, rowData) => {\n    let selectedItemId = rowData.iid;\n    let selectedItem = Object.assign(\n      {},\n      this.props.data.items.find((item) => item.iid === selectedItemId)\n    );\n    let transactions = Array.from(\n      this.props.data.transactions.filter(\n        (transaction) => transaction.iid === selectedItem.iid\n      )\n    );\n    transactions.forEach((transaction) => {\n      transaction.backgroundColor =\n        !transaction.checkedInDate &&\n        new Date(transaction.dueDate).getTime() < new Date().getTime()\n          ? \"mistyrose\"\n          : \"\";\n    });\n    selectedItem[\"transactions\"] = transactions;\n    this.setState({\n      selectedItemId,\n      selectedItem,\n    });\n  };\n\n  handleItemAddClick = () => {\n    this.setState({\n      selectedItemId: -1,\n      selectedItem: {\n        name: \"\",\n        iid: this.generateInitialNextItemId(),\n        serial: \"\",\n        category: \"\",\n        notes: \"\",\n        atid: \"\",\n        courses: [],\n        creationDate: new Date().getTime(),\n        expected: \"\",\n        transactions: [],\n      },\n      editable: false,\n      isChangesMadeToModal: false,\n    });\n  };\n\n  handleItemEditClick = () => {\n    this.setState({\n      editable: !this.state.editable,\n    });\n  };\n\n  checkErrorUpdateDataSet = () => {\n    if (\n      !this.state.nameError &&\n      !this.state.categoryError &&\n      !this.state.serialError &&\n      !this.state.isItemIdUnavailable &&\n      !this.state.iidError\n    ) {\n      let data = Object.assign({}, this.props.data);\n      if (this.state.selectedItemId >= 0) {\n        data.items[this.state.selectedItemId] = this.state.selectedItem;\n      } else {\n        data.items.push(this.state.selectedItem);\n      }\n      this.props.onUpdateData(data);\n      this.close();\n    }\n  };\n\n  handleSubmitClick = () => {\n    if (!this.state.isChangesMadeToModal) {\n      this.close();\n      return;\n    }\n    this.setState(\n      {\n        nameError: this.state.selectedItem.name === \"\",\n        categoryError: this.state.selectedItem.category === \"\",\n        iidError: this.state.selectedItem.iid === \"\",\n        serialError: this.state.selectedItem.serial === \"\",\n      },\n      this.checkErrorUpdateDataSet\n    );\n  };\n\n  formatDate = (dateString) => {\n    if (!dateString) return \"\";\n    const date = new Date(dateString);\n    return (\n      date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear()\n    );\n  };\n\n  formatDateForSearchBar = (dateString) => {\n    let monthNames = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    if (!dateString) return \"\";\n    const date = new Date(dateString);\n    return (\n      monthNames[date.getMonth()] +\n      \" \" +\n      date.getDate() +\n      \" \" +\n      date.getFullYear()\n    );\n  };\n\n  formatItemDate = (dateString) => {\n    if (!dateString) return \"\";\n    const date = new Date(dateString);\n    return date.toLocaleDateString(\n      [],\n      (\"en-US\",\n      {\n        month: \"short\",\n        day: \"numeric\",\n        year: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        hour12: true,\n      })\n    );\n  };\n\n  handleCourseDropdownChange = (e, { value }) => {\n    const val = value;\n    this.setState((prevState) => {\n      let selectedItem = Object.assign({}, prevState.selectedItem);\n      selectedItem.courses = val;\n      return { selectedItem, isChangesMadeToModal: true };\n    });\n  };\n\n  handleBrandDropdownChange = (e, { value }) => {\n    const val = value;\n    this.setState((prevState) => {\n      let selectedItem = Object.assign({}, prevState.selectedItem);\n      selectedItem.brand = val;\n      return { selectedItem, isChangesMadeToModal: true };\n    });\n  };\n\n  handleCategoryDropdownChange = (e, { value }) => {\n    const val = value;\n    this.setState((prevState) => {\n      let selectedItem = Object.assign({}, prevState.selectedItem);\n      selectedItem.category = val;\n      return { selectedItem, isChangesMadeToModal: true };\n    });\n  };\n\n  handleItemIdVerify = (iid) => {\n    if (iid === \"\") return \"\";\n    if (isNaN(iid)) {\n      this.setState({ isItemIdUnavailable: true });\n      return iid;\n    }\n    let fullID = \"0\".repeat(4 - iid.length) + iid;\n    this.setState({\n      isItemIdUnavailable: this.props.data.items.some(\n        (item, i) => item.iid === fullID && this.state.selectedItemId !== i\n      ),\n    });\n    return fullID;\n  };\n\n  generateInitialNextItemId = () => {\n    if (this.props.data.items.length === 0) return \"0001\";\n    const ids = this.props.data.items\n      .map((item) => parseInt(item.iid))\n      .sort((a, b) => a - b);\n    const newId = (ids.find((id) => !ids.includes(id + 1)) + 1).toString();\n    return \"0\".repeat(4 - newId.length) + newId;\n  };\n\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name });\n\n  render() {\n    const selectedItemId = this.state.selectedItemId;\n    const selectedItem = this.state.selectedItem;\n    let formTablePanes = [];\n\n    let items = Array.from(this.props.data.items);\n    items.forEach((items) => {\n      let result = this.props.data.transactions.filter(\n        (transaction) => items.atid === transaction.tid\n      );\n      items.expected = !(items.atid === \"\") ? result[0].dueDate : \"\";\n      items.backgroundColor = !(items.atid === \"\") ? \"mistyrose\" : \"\";\n    });\n\n    if (this.state.selectedItem != null && this.state.selectedItemId >= 0) {\n      formTablePanes = [\n        {\n          menuItem: \"Active\",\n          render: () => (\n            <Table\n              title={<h5>{this.state.selectedItem.name}</h5>}\n              columns={[\n                { title: \"User ID\", field: \"uid\" },\n                { title: \"Transaction ID\", field: \"tid\" },\n                {\n                  title: \"Checked Out Date\",\n                  field: \"checkedOutDate\",\n                  render: (rowData) => this.formatDate(rowData.checkedOutDate),\n                },\n                {\n                  title: \"Due Date\",\n                  field: \"dueDate\",\n                  render: (rowData) => this.formatDate(rowData.dueDate),\n                },\n              ]}\n              data={Array.from(\n                this.state.selectedItem.transactions.filter(\n                  (name) => name.checkedInDate === \"\"\n                )\n              )}\n            ></Table>\n          ),\n        },\n        {\n          menuItem: \"Completed\",\n          render: () => (\n            <Table\n              title={<h5>{this.state.selectedItem.name}</h5>}\n              columns={[\n                { title: \"User ID\", field: \"uid\" },\n                { title: \"Transaction ID\", field: \"tid\" },\n                {\n                  title: \"Checked Out Date\",\n                  field: \"checkedOutDate\",\n                  render: (rowData) => this.formatDate(rowData.checkedOutDate),\n                },\n                {\n                  title: \"Checked In Date\",\n                  field: \"checkedInDate\",\n                  render: (rowData) => this.formatDate(rowData.checkedInDate),\n                },\n              ]}\n              data={Array.from(\n                this.state.selectedItem.transactions.filter(\n                  (name) => !(name.checkedInDate === \"\")\n                )\n              )}\n            ></Table>\n          ),\n        },\n      ];\n    }\n    const inventoryTablePanes = [\n      {\n        menuItem: \"All\",\n        render: () => (\n          <Table\n            data={Array.from(this.props.data.items)}\n            columns={this.state.columnSet}\n            title={<h2>Inventory</h2>}\n            onRowClick={(event, rowData) =>\n              this.handleItemSelectClick(event, rowData)\n            }\n          />\n        ),\n      },\n      {\n        menuItem: \"Available\",\n        render: () => (\n          <Table\n            data={Array.from(\n              this.props.data.items.filter(\n                (name) => name.backgroundColor !== \"mistyrose\"\n              )\n            )}\n            columns={this.state.columnSet}\n            title={<h2>Inventory</h2>}\n            onRowClick={(event, rowData) =>\n              this.handleItemSelectClick(event, rowData)\n            }\n          />\n        ),\n      },\n      {\n        menuItem: \"Unavailable\",\n        render: () => (\n          <Table\n            data={Array.from(\n              this.props.data.items.filter(\n                (name) => name.backgroundColor === \"mistyrose\"\n              )\n            )}\n            columns={this.state.columnSet}\n            title={<h2>Inventory</h2>}\n            onRowClick={(event, rowData) =>\n              this.handleItemSelectClick(event, rowData)\n            }\n          />\n        ),\n      },\n    ];\n\n    const courseOptions = Array.from(\n      new Set(\n        [].concat.apply(\n          [],\n          [\n            this.state.selectedItem,\n            ...this.props.data.items,\n            ...this.props.data.users,\n          ]\n            .filter((item) => item.courses)\n            .map((item) => item.courses)\n        )\n      )\n    )\n      .sort()\n      .map((item) => ({ text: item, value: item }));\n    const brandOptions = Array.from(\n      new Set(\n        [this.state.selectedItem, ...this.props.data.items]\n          .filter((item) => item.brand)\n          .map((item) => item.brand)\n      )\n    )\n      .sort()\n      .map((item) => ({ text: item, value: item }));\n    const categoryOptions = Array.from(\n      new Set(\n        [this.state.selectedItem, ...this.props.data.items]\n          .filter((item) => item.category)\n          .map((item) => item.category)\n      )\n    )\n      .sort()\n      .map((item) => ({ text: item, value: item }));\n\n    return (\n      <Col className=\"stretch-h flex-col\">\n        <div className=\"top-bar\">\n          <Button\n            style={{ backgroundColor: \"#46C88C\", color: \"white\" }}\n            onClick={this.handleItemAddClick}\n          >\n            Create New Item\n          </Button>\n          <Divider clearing />\n        </div>\n        <div className=\"page-content stretch-h\">\n          <Col className=\"stretch-h flex-col\">\n            <Tab panes={inventoryTablePanes} className=\"stretch-h flex-col\" />\n            <Modal centered show={selectedItemId != null} onHide={this.close}>\n              <Modal.Header bsPrefix=\"modal-header\">\n                <Modal.Title>Item</Modal.Title>\n                <IconButton onClick={this.close} size=\"small\" color=\"inherit\">\n                  <ClearIcon />\n                </IconButton>\n              </Modal.Header>\n              <Modal.Body>\n                {this.state.activeItem === \"item\" && (\n                  <Form>\n                    <Form.Field>\n                      <label>\n                        Name:\n                        {this.state.nameError && (\n                          <span className=\"error-text modal-label-error-text\">\n                            Error: Field cannot be empty.\n                          </span>\n                        )}\n                      </label>\n                      <Form.Input\n                        error={this.state.nameError}\n                        name=\"name\"\n                        placeholder=\"Name\"\n                        defaultValue={selectedItem.name}\n                        onChange={(e) => {\n                          this.handleChange(e, \"name\");\n                        }}\n                        readOnly={this.state.editable}\n                      ></Form.Input>\n                    </Form.Field>\n                    <Form.Group widths=\"equal\">\n                      <Form.Field>\n                        <label>\n                          Item ID:\n                          {(this.state.iidError && (\n                            <span className=\"error-text modal-label-error-text\">\n                              Error: Field cannot be empty.\n                            </span>\n                          )) ||\n                            (this.state.isItemIdUnavailable && (\n                              <span className=\"error-text modal-label-error-text\">\n                                Error: Item ID is Taken or Incorrect\n                              </span>\n                            ))}\n                          {}\n                        </label>\n                        <Form.Input\n                          name=\"iid\"\n                          error={\n                            this.state.iidError ||\n                            this.state.isItemIdUnavailable\n                          }\n                          maxLength=\"4\"\n                          placeholder=\"Item ID\"\n                          defaultValue={selectedItem.iid}\n                          onChange={(e) => {\n                            this.handleChange(e, \"iid\");\n                          }}\n                          readOnly={this.state.editable}\n                        ></Form.Input>\n                      </Form.Field>\n                      <Form.Field>\n                        <label>\n                          Serial ID:\n                          {this.state.serialError && (\n                            <span className=\"error-text modal-label-error-text\">\n                              Error: Field cannot be empty.\n                            </span>\n                          )}\n                        </label>\n                        <Form.Input\n                          name=\"serial\"\n                          error={this.state.serialError}\n                          placeholder=\"Serial\"\n                          defaultValue={selectedItem.serial}\n                          onChange={(e) => {\n                            this.handleChange(e, \"serial\");\n                          }}\n                          readOnly={this.state.editable}\n                        ></Form.Input>\n                      </Form.Field>\n                    </Form.Group>\n                    <Form.Group widths=\"equal\">\n                      <Form.Field>\n                        <label>Brand:</label>\n                        <Dropdown\n                          placeholder=\"Brand\"\n                          name=\"brand\"\n                          fluid\n                          search\n                          selection\n                          allowAdditions\n                          clearable\n                          options={brandOptions}\n                          value={selectedItem.brand}\n                          onChange={this.handleBrandDropdownChange}\n                          disabled={this.state.editable}\n                        />\n                      </Form.Field>\n                      <Form.Field>\n                        <label>\n                          Category:\n                          {this.state.categoryError && (\n                            <span className=\"error-text modal-label-error-text\">\n                              Error: Field cannot be empty.\n                            </span>\n                          )}\n                        </label>\n                        <Dropdown\n                          placeholder=\"Category\"\n                          name=\"category\"\n                          fluid\n                          error={this.state.categoryError}\n                          search\n                          selection\n                          allowAdditions\n                          options={categoryOptions}\n                          value={selectedItem.category}\n                          onChange={this.handleCategoryDropdownChange}\n                          disabled={this.state.editable}\n                        />\n                      </Form.Field>\n                    </Form.Group>\n                    <Form.Field>\n                      <label>Courses:</label>\n                      <Dropdown\n                        placeholder=\"Courses\"\n                        name=\"courses\"\n                        fluid\n                        multiple\n                        search\n                        selection\n                        allowAdditions\n                        options={courseOptions}\n                        value={selectedItem.courses}\n                        onChange={this.handleCourseDropdownChange}\n                        disabled={this.state.editable}\n                      />\n                    </Form.Field>\n                    <Form.Field>\n                      <label>Notes:</label>\n                      <Form.Input\n                        name=\"notes\"\n                        error={this.state.notesError}\n                        placeholder=\"Notes\"\n                        defaultValue={selectedItem.notes}\n                        onChange={(e) => {\n                          this.handleChange(e, \"notes\");\n                        }}\n                        readOnly={this.state.editable}\n                      ></Form.Input>\n                    </Form.Field>\n                    <Form.Group widths=\"equal\">\n                      {this.state.selectedItemId >= 0 ? (\n                        <Form.Field>\n                          <label>Date Created:</label>\n                          <Form.Input\n                            name=\"creationDate\"\n                            placeholder=\"creationDate\"\n                            defaultValue={this.formatItemDate(\n                              selectedItem.creationDate\n                            )}\n                            readOnly\n                          ></Form.Input>\n                        </Form.Field>\n                      ) : null}\n                      {this.state.selectedItem.expected && (\n                        <Form.Field>\n                          <label>Expected Return Date:</label>\n                          <Form.Input\n                            name=\"expected\"\n                            placeholder=\"Expected\"\n                            defaultValue={this.formatDate(\n                              selectedItem.expected\n                            )}\n                            readOnly\n                          ></Form.Input>\n                        </Form.Field>\n                      )}\n                    </Form.Group>\n                  </Form>\n                )}\n                {this.state.activeItem === \"table\" &&\n                  this.state.selectedItemId >= 0 && (\n                    <Tab\n                      panes={formTablePanes}\n                      className=\"stretch-h flex-col\"\n                    />\n                  )}\n              </Modal.Body>\n              <Modal.Footer>\n                {this.state.selectedItemId >= 0 ? (\n                  <Button\n                    className=\"btn btn-primary mr-auto\"\n                    toggle\n                    active={!this.state.editable}\n                    onClick={this.handleItemEditClick}\n                  >\n                    <Icon name=\"pencil\" />\n                    Edit\n                  </Button>\n                ) : null}\n                {this.state.selectedItemId >= 0 && (\n                  <Menu compact className=\"mr-auto\">\n                    <Menu.Item\n                      name=\"item\"\n                      active={this.state.activeItem === \"item\"}\n                      onClick={this.handleItemClick}\n                    >\n                      <Icon name=\"clipboard list\" />\n                      Item Form\n                    </Menu.Item>\n                    <Menu.Item\n                      name=\"table\"\n                      active={this.state.activeItem === \"table\"}\n                      onClick={this.handleItemClick}\n                    >\n                      <Icon name=\"book\" />\n                      Transactions\n                    </Menu.Item>\n                  </Menu>\n                )}\n                <Button\n                  id=\"add-icon-handler ml-auto\"\n                  variant=\"primary\"\n                  onClick={this.handleSubmitClick}\n                >\n                  {this.state.isChangesMadeToModal ? (\n                    <Icon name=\"save\"></Icon>\n                  ) : null}\n                  {this.state.isChangesMadeToModal ? \"Save\" : \"Close\"}\n                </Button>\n              </Modal.Footer>\n            </Modal>\n          </Col>\n        </div>\n      </Col>\n    );\n  }\n}\n\nexport default Inventory;\n","import React, { Component } from \"react\";\nimport { Divider, Button, Form, Dropdown } from \"semantic-ui-react\";\nimport { Col, Row, Modal } from \"react-bootstrap\";\nimport Table from \"../common/Table\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\n\nclass Staff extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      dataSet: [\n        {\n          fname: \"Seamus\",\n          lname: \"Rioux\",\n          courses: [\"Photography I\", \"Photography II\"],\n          roles: [\"Admin\", \"Staff\"],\n          id: \"54321\",\n          email: \"seamus.rioux3@gmail.com\",\n          phone: \"123-456-7890\",\n        },\n        {\n          fname: \"Greg\",\n          lname: \"Smelkov\",\n          courses: [\"Photography I\"],\n          roles: [\"Admin\"],\n          id: \"12345\",\n          email: \"greg@gmail.com\",\n          phone: \"123-456-7890\",\n        },\n      ],\n      columnSet: [\n        { title: \"First Name\", field: \"fname\" },\n        { title: \"Last Name\", field: \"lname\" },\n        {\n          title: \"Courses\",\n          field: \"courses\",\n          render: (rowData) => {\n            return rowData.courses.length > 0\n              ? rowData.courses.reduce((result, item) => (\n                  <>\n                    {result}\n                    {\", \"}\n                    {item}\n                  </>\n                ))\n              : \"\";\n          },\n        },\n        {\n          title: \"Roles\",\n          field: \"roles\",\n          render: (rowData) => {\n            return rowData.roles.length > 0\n              ? rowData.roles.reduce((result, item) => (\n                  <>\n                    {result}\n                    {\", \"}\n                    {item}\n                  </>\n                ))\n              : \"\";\n          },\n        },\n      ],\n      open: false,\n\n      firstNameError: false,\n      lastNameError: false,\n      idError: false,\n      emailError: false,\n\n      selectedUserId: null,\n      selectedUser: {\n        fname: \"\",\n        lname: \"\",\n        courses: [],\n        roles: [],\n        id: \"\",\n        email: \"\",\n        phone: \"\",\n      },\n      courseOptions: [\n        { text: \"Photography I\", value: \"Photography I\" },\n        { text: \"Photography II\", value: \"Photography II\" },\n        { text: \"Documentary Image\", value: \"Documentary Image\" },\n      ],\n      roleOptions: [\n        { text: \"Admin\", value: \"Admin\" },\n        { text: \"Staff\", value: \"Staff\" },\n      ],\n    };\n  }\n\n  close = () =>\n    this.setState({\n      selectedUserId: null,\n      firstNameError: false,\n      lastNameError: false,\n      idError: false,\n      emailError: false,\n    });\n\n  handleChange = (e, userProp) => {\n    const val = e.target.value;\n    this.setState((prevState) => {\n      let selectedUser = Object.assign({}, prevState.selectedUser);\n      selectedUser[userProp] = val;\n      return { selectedUser };\n    });\n  };\n\n  handleUserSelectClick = (e, rowData) => {\n    this.setState({\n      selectedUserId: rowData.tableData.id,\n      selectedUser: this.state.dataSet[rowData.tableData.id],\n    });\n  };\n\n  handleAddUserClick = () => {\n    this.setState({\n      selectedUserId: -1,\n      selectedUser: {\n        fname: \"\",\n        lname: \"\",\n        courses: [],\n        roles: [],\n        id: \"\",\n        email: \"\",\n        phone: \"\",\n      },\n    });\n  };\n\n  checkErrorUpdateDataSet = () => {\n    if (\n      !this.state.firstNameError &&\n      !this.state.lastNameError &&\n      !this.state.idError &&\n      !this.state.emailError\n    ) {\n      this.setState((prevState) => {\n        let dataSet = Array.from(prevState.dataSet);\n        if (this.state.selectedUserId >= 0) {\n          dataSet[this.state.selectedUserId] = this.state.selectedUser;\n        } else {\n          dataSet.push(this.state.selectedUser);\n        }\n        return { dataSet };\n      }, this.close);\n    }\n  };\n\n  handleSubmitClick = () => {\n    this.setState(\n      {\n        firstNameError: this.state.selectedUser.fname === \"\",\n        lastNameError: this.state.selectedUser.lname === \"\",\n        idError: this.state.selectedUser.id === \"\",\n        emailError: this.state.selectedUser.email === \"\",\n      },\n      this.checkErrorUpdateDataSet\n    );\n  };\n\n  handleDropdownAdditionRoles = (e, { value }) => {\n    this.setState((prevState) => ({\n      roleOptions: [{ text: value, value }, ...prevState.roleOptions],\n    }));\n  };\n\n  handleDropdownAdditionCourses = (e, { value }) => {\n    this.setState((prevState) => ({\n      courseOptions: [{ text: value, value }, ...prevState.courseOptions],\n    }));\n  };\n\n  handleDropdownChangeCourses = (e, { value }) => {\n    const val = value;\n    this.setState((prevState) => {\n      let selectedUser = Object.assign({}, prevState.selectedUser);\n      selectedUser.courses = val;\n      return { selectedUser };\n    });\n  };\n\n  handleDropdownChangeRoles = (e, { value }) => {\n    const val = value;\n    this.setState((prevState) => {\n      let selectedUser = Object.assign({}, prevState.selectedUser);\n      selectedUser.roles = val;\n      return { selectedUser };\n    });\n  };\n\n  render() {\n    const selectedUserId = this.state.selectedUserId;\n    const selectedUser = this.state.selectedUser;\n    const courseOptions = this.state.courseOptions;\n    const roleOptions = this.state.roleOptions;\n    return (\n      <Col className=\"stretch-h flex-col\">\n        <div className=\"top-bar\">\n          <Button basic onClick={this.handleAddUserClick}>\n            Create New Staff\n          </Button>\n          <Divider clearing />\n        </div>\n        <div className=\"page-content stretch-h\">\n          <Col className=\"stretch-h flex-col\">\n            <Table\n              data={Array.from(this.state.dataSet)}\n              columns={this.state.columnSet}\n              title={<h2>Staff</h2>}\n              onRowClick={(event, rowData) =>\n                this.handleUserSelectClick(event, rowData)\n              }\n            />\n            <Modal\n              centered\n              size={\"lg\"}\n              show={selectedUserId != null}\n              onHide={this.close}\n            >\n              <Modal.Header bsPrefix=\"modal-header\">\n                <Modal.Title>Staff</Modal.Title>\n                <IconButton onClick={this.close} size=\"small\" color=\"inherit\">\n                  <ClearIcon />\n                </IconButton>\n              </Modal.Header>\n              <Modal.Body>\n                <Row>\n                  <Col>\n                    <Form>\n                      <Form.Field>\n                        <label>\n                          First Name:\n                          {this.state.firstNameError && (\n                            <span className=\"error-text modal-label-error-text\">\n                              Error: Field cannot be empty.\n                            </span>\n                          )}\n                        </label>\n                        <Form.Input\n                          error={this.state.firstNameError}\n                          name=\"fname\"\n                          placeholder=\"First Name\"\n                          defaultValue={selectedUser.fname}\n                          onChange={(e) => {\n                            this.handleChange(e, \"fname\");\n                          }}\n                        ></Form.Input>\n                      </Form.Field>\n                      <Form.Field>\n                        <label>\n                          Last Name:\n                          {this.state.lastNameError && (\n                            <span className=\"error-text modal-label-error-text\">\n                              Error: Field cannot be empty.\n                            </span>\n                          )}\n                        </label>\n                        <Form.Input\n                          error={this.state.lastNameError}\n                          name=\"lname\"\n                          placeholder=\"Last Name\"\n                          defaultValue={selectedUser.lname}\n                          onChange={(e) => {\n                            this.handleChange(e, \"lname\");\n                          }}\n                        ></Form.Input>\n                      </Form.Field>\n                      <Form.Field>\n                        <label>Courses:</label>\n                        <Dropdown\n                          placeholder=\"Courses\"\n                          name=\"courses\"\n                          fluid\n                          multiple\n                          search\n                          selection\n                          allowAdditions\n                          options={courseOptions}\n                          value={selectedUser.courses}\n                          onAddItem={this.handleDropdownAdditionCourses}\n                          onChange={this.handleDropdownChangeCourses}\n                        />\n                      </Form.Field>\n                      <Form.Field>\n                        <label>Roles:</label>\n                        <Dropdown\n                          placeholder=\"Roles\"\n                          name=\"roles\"\n                          fluid\n                          multiple\n                          search\n                          selection\n                          allowAdditions\n                          options={roleOptions}\n                          value={selectedUser.roles}\n                          onAddItem={this.handleDropdownAdditionRoles}\n                          onChange={this.handleDropdownChangeRoles}\n                        />\n                      </Form.Field>\n                      <Form.Field>\n                        <label>\n                          UML ID:\n                          {this.state.idError && (\n                            <span className=\"error-text modal-label-error-text\">\n                              Error: Field cannot be empty.\n                            </span>\n                          )}\n                        </label>\n                        <Form.Input\n                          name=\"id\"\n                          error={this.state.idError}\n                          placeholder=\"UML ID\"\n                          defaultValue={selectedUser.id}\n                          onChange={(e) => {\n                            this.handleChange(e, \"id\");\n                          }}\n                        ></Form.Input>\n                      </Form.Field>\n                      <Form.Field>\n                        <label>\n                          Email:\n                          {this.state.emailError && (\n                            <span className=\"error-text modal-label-error-text\">\n                              Error: Field cannot be empty.\n                            </span>\n                          )}\n                        </label>\n                        <Form.Input\n                          name=\"email\"\n                          error={this.state.emailError}\n                          placeholder=\"Email\"\n                          defaultValue={selectedUser.email}\n                          onChange={(e) => {\n                            this.handleChange(e, \"email\");\n                          }}\n                        ></Form.Input>\n                      </Form.Field>\n                      <Form.Field>\n                        <label>Phone Number:</label>\n                        <Form.Input\n                          type=\"phone\"\n                          placeholder=\"Phone Number\"\n                          defaultValue={selectedUser.phone}\n                          onChange={(e) => {\n                            this.handleChange(e, \"phone\");\n                          }}\n                        ></Form.Input>\n                      </Form.Field>\n                    </Form>\n                  </Col>\n                </Row>\n              </Modal.Body>\n              <Modal.Footer>\n                <Button\n                  id=\"add-icon-handler\"\n                  variant=\"primary\"\n                  onClick={this.handleSubmitClick}\n                >\n                  Submit\n                </Button>\n              </Modal.Footer>\n            </Modal>\n          </Col>\n        </div>\n      </Col>\n    );\n  }\n}\n\nexport default Staff;\n","import React, { Component } from \"react\";\nimport { Form, Divider, Button, Icon } from \"semantic-ui-react\";\nimport { Col, Row, Modal } from \"react-bootstrap\";\nimport Table from \"../common/Table\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\n\nclass Transactions extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    const headerStyleGrey = {\n      backgroundColor: \"#E2E2E2\",\n      color: \"black\",\n      fontSize: \"24\",\n    };\n    this.state = {\n      columnSet: [\n        { title: \"First Name\", field: \"fname\", headerStyle: headerStyleGrey },\n        { title: \"Last Name\", field: \"lname\", headerStyle: headerStyleGrey },\n        { title: \"Item Name\", field: \"name\", headerStyle: headerStyleGrey },\n        { title: \"Item ID\", field: \"iid\", headerStyle: headerStyleGrey },\n        { title: \"Category\", field: \"category\", headerStyle: headerStyleGrey },\n        {\n          title: \"Notes\",\n          field: \"notes\",\n          headerStyle: headerStyleGrey,\n          render: (rowData) => {\n            return (\n              rowData.notes && (\n                <Icon size=\"large\" className=\"notes-icon\" name=\"check circle\" />\n              )\n            );\n          },\n        },\n        {\n          title: \"Checked Out\",\n          field: \"checkedOutDate\",\n          headerStyle: headerStyleGrey,\n          render: (rowData) => this.formatDate(rowData.checkedOutDate),\n          customFilterAndSearch: (term, rowData) =>\n            this.formatDateForSearchBar(rowData.checkedOutDate).indexOf(\n              term\n            ) !== -1 ||\n            this.formatDate(rowData.checkedOutDate).indexOf(term) !== -1,\n        },\n        {\n          title: \"Due Date\",\n          field: \"dueDate\",\n          headerStyle: headerStyleGrey,\n          render: (rowData) => this.formatDate(rowData.dueDate),\n          customFilterAndSearch: (term, rowData) =>\n            this.formatDateForSearchBar(rowData.dueDate).indexOf(term) !== -1 ||\n            this.formatDate(rowData.dueDate).indexOf(term) !== -1,\n        },\n        {\n          title: \"Checked In\",\n          field: \"checkedInDate\",\n          headerStyle: headerStyleGrey,\n          render: (rowData) => this.formatDate(rowData.checkedInDate),\n          defaultSort: \"dec\",\n          customFilterAndSearch: (term, rowData) =>\n            this.formatDateForSearchBar(rowData.checkedInDate).indexOf(term) !==\n              -1 || this.formatDate(rowData.checkedInDate).indexOf(term) !== -1,\n        },\n      ],\n      selectedItemId: null,\n      selectedItem: {\n        fname: \"\",\n        lname: \"\",\n        name: \"\",\n        iid: \"\",\n        category: \"\",\n        notes: \"\",\n        checkedOutDate: \"\",\n        checkedInDate: \"\",\n        dueDate: \"\",\n      },\n    };\n  }\n\n  close = () =>\n    this.setState({\n      selectedItemId: null,\n    });\n\n  handleChange = (e, userProp) => {\n    const val = e.target.value;\n    this.setState((prevState) => {\n      let selectedItem = Object.assign({}, prevState.selectedItem);\n      selectedItem[userProp] = val;\n      return { selectedItem };\n    });\n  };\n\n  handleUserSelectClick = (e, rowData) => {\n    this.setState({\n      selectedItemId: rowData.tid,\n      selectedItem: rowData,\n    });\n  };\n\n  handleDropdownAddition = (e, { value }) => {\n    this.setState((prevState) => ({\n      courseOptions: [{ text: value, value }, ...prevState.courseOptions],\n    }));\n  };\n\n  handleDropdownChange = (e, { value }) => {\n    const val = value;\n    this.setState((prevState) => {\n      let selectedItem = Object.assign({}, prevState.selectedItem);\n      selectedItem.courses = val;\n      return { selectedItem };\n    });\n  };\n\n  formatDate = (dateString) => {\n    if (!dateString) return \"\";\n    const date = new Date(dateString);\n    return (\n      date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear()\n    );\n  };\n\n  formatDateForSearchBar = (dateString) => {\n    let monthNames = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    if (!dateString) return \"\";\n    const date = new Date(dateString);\n    console.log(date.getMonth());\n    return (\n      monthNames[date.getMonth()] +\n      \" \" +\n      date.getDate() +\n      \" \" +\n      date.getFullYear()\n    );\n  };\n\n  render() {\n    const selectedItemId = this.state.selectedItemId;\n    const selectedItem = this.state.selectedItem;\n\n    let transactions = Array.from(this.props.data.transactions);\n    transactions.forEach((transaction) => {\n      let result = this.props.data.users.filter(\n        (user) => transaction.uid === user.uid\n      );\n      transaction.fname = result[0] ? result[0].fname : \"\";\n      transaction.lname = result[0] ? result[0].lname : \"\";\n      result = this.props.data.items.filter(\n        (item) => transaction.iid === item.iid\n      );\n      transaction.name = result[0] ? result[0].name : \"\";\n      transaction.iid = result[0] ? result[0].iid : \"\";\n      transaction.category = result[0] ? result[0].category : \"\";\n\n      transaction.backgroundColor =\n        !transaction.checkedInDate &&\n        new Date(transaction.dueDate).getTime() < new Date().getTime()\n          ? \"mistyrose\"\n          : \"\";\n    });\n\n    return (\n      <Col className=\"stretch-h flex-col\">\n        <div className=\"top-bar\">\n          <Button\n            style={{ backgroundColor: \"#46C88C\", color: \"white\" }}\n            href=\"#/\"\n          >\n            Create New Transaction\n          </Button>\n          <Divider clearing />\n        </div>\n        <div className=\"page-content stretch-h\">\n          <Col className=\"stretch-h flex-col\">\n            <Table\n              data={transactions}\n              columns={this.state.columnSet}\n              title={<h2>Transaction History</h2>}\n              onRowClick={(event, rowData) =>\n                this.handleUserSelectClick(event, rowData)\n              }\n            />\n            <Modal centered show={selectedItemId != null} onHide={this.close}>\n              <Modal.Header bsPrefix=\"modal-header\">\n                <Modal.Title>Transaction</Modal.Title>\n                <IconButton onClick={this.close} size=\"small\" color=\"inherit\">\n                  <ClearIcon />\n                </IconButton>\n              </Modal.Header>\n              <Modal.Body>\n                <Row>\n                  <Col>\n                    <Form>\n                      <Form.Group widths=\"equal\">\n                        <Form.Field>\n                          <label>Item Name:</label>\n                          <Form.Input\n                            name=\"name\"\n                            placeholder=\"name\"\n                            defaultValue={selectedItem.name}\n                            readOnly\n                          ></Form.Input>\n                        </Form.Field>\n                        <Form.Field>\n                          <label>Category:</label>\n                          <Form.Input\n                            name=\"category\"\n                            placeholder=\"Category\"\n                            defaultValue={selectedItem.category}\n                            readOnly\n                          ></Form.Input>\n                        </Form.Field>\n                      </Form.Group>\n                      <Form.Field>\n                        <label>Rented by:</label>\n                        <Form.Group widths=\"equal\">\n                          <Form.Input\n                            name=\"fname\"\n                            placeholder=\"First Name\"\n                            defaultValue={selectedItem.fname}\n                            readOnly\n                          ></Form.Input>\n                          <Form.Input\n                            name=\"lname\"\n                            placeholder=\"Last Name\"\n                            defaultValue={selectedItem.lname}\n                            readOnly\n                          ></Form.Input>\n                        </Form.Group>\n                      </Form.Field>\n                      <Form.Field>\n                        <label>Item ID:</label>\n                        <Form.Input\n                          name=\"iid\"\n                          placeholder=\"Item ID\"\n                          defaultValue={selectedItem.iid}\n                          readOnly\n                        ></Form.Input>\n                      </Form.Field>\n                      <Form.Field>\n                        <label>Notes:</label>\n                        <Form.Input\n                          name=\"notes\"\n                          placeholder=\"Notes\"\n                          defaultValue={selectedItem.notes}\n                          readOnly\n                        ></Form.Input>\n                      </Form.Field>\n                      <Form.Group\n                        widths={this.state.selectedItem.checkedInDate ? 3 : 2}\n                      >\n                        <Form.Field>\n                          <label>Checked Out:</label>\n                          <Form.Input\n                            name=\"checkedOut\"\n                            placeholder=\"Checked Out\"\n                            defaultValue={this.formatDate(\n                              selectedItem.checkedOutDate\n                            )}\n                            readOnly\n                          ></Form.Input>\n                        </Form.Field>\n                        {this.state.selectedItem.checkedInDate && (\n                          <Form.Field>\n                            <label>Checked In:</label>\n                            <Form.Input\n                              name=\"checkedIn\"\n                              placeholder=\"Checked In\"\n                              error={!selectedItem.checkedInDate}\n                              defaultValue={this.formatDate(\n                                selectedItem.checkedInDate\n                              )}\n                              readOnly\n                            ></Form.Input>\n                          </Form.Field>\n                        )}\n                        <Form.Field>\n                          <label>Due Date:</label>\n                          <Form.Input\n                            name=\"due\"\n                            placeholder=\"Due Date\"\n                            defaultValue={this.formatDate(selectedItem.dueDate)}\n                            readOnly\n                          ></Form.Input>\n                        </Form.Field>\n                      </Form.Group>\n                    </Form>\n                  </Col>\n                </Row>\n              </Modal.Body>\n            </Modal>\n          </Col>\n        </div>\n      </Col>\n    );\n  }\n}\n\nexport default Transactions;\n","import React, { Component } from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nimport Header from \"./common/Header\";\r\nimport Sidebar from \"./common/Sidebar\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport \"./App.scss\";\r\nimport CheckInOut from \"./pages/CheckInOut\";\r\nimport Users from \"./pages/Users\";\r\nimport Inventory from \"./pages/Inventory\";\r\nimport Staff from \"./pages/Staff\";\r\nimport Transactions from \"./pages/Transactions\";\r\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleDataUpdate = this.handleDataUpdate.bind(this);\r\n    this.state = {\r\n      data: {\r\n        users: [\r\n          {\r\n            fname: \"User\",\r\n            lname: \"AWhoExists\",\r\n            uid: \"11111111\",\r\n            email: \"existing@email.com\",\r\n            phone: \"123-456-7891\",\r\n            notes: \"Optional notes for Seamus\",\r\n            creationDate: new Date().getTime(),\r\n            courses: [\"PreviousCourse\"],\r\n          },\r\n          {\r\n            fname: \"Seamus\",\r\n            lname: \"Rioux\",\r\n            uid: \"54321\",\r\n            email: \"srioux@email.com\",\r\n            phone: \"123-456-7891\",\r\n            notes: \"Optional notes for Seamus\",\r\n            creationDate: new Date().getTime(),\r\n            courses: [\"Photography I\"],\r\n          },\r\n          {\r\n            fname: \"Greg\",\r\n            lname: \"Smelkov\",\r\n            uid: \"12345\",\r\n            email: \"greg@email.com\",\r\n            phone: \"123-456-7891\",\r\n            notes: \"Optional notes for Greg\",\r\n            creationDate: new Date().getTime(),\r\n            courses: [\"Photography I\", \"Photography II\"],\r\n          },\r\n        ],\r\n        items: [\r\n          {\r\n            name: \"Canon 5D Mk II\",\r\n            iid: \"0001\",\r\n            brand: \"Canon\",\r\n            serial: \"123456\",\r\n            category: \"Camera\",\r\n            notes: \"\",\r\n            atid: \"3\",\r\n            courses: [\"Photography II\"],\r\n            creationDate: new Date().getTime(),\r\n          },\r\n          {\r\n            name: \"Canon 18-55 F4.0\",\r\n            iid: \"0002\",\r\n            brand: \"Canon\",\r\n            serial: \"223456\",\r\n            category: \"Lens\",\r\n            notes: \"Missing lens cap\",\r\n            atid: \"4\",\r\n            courses: [\"Photography I\", \"Photography II\"],\r\n            creationDate: new Date().getTime(),\r\n          },\r\n          {\r\n            name: \"Mavic Drone\",\r\n            iid: \"0003\",\r\n            brand: \"Mavic\",\r\n            serial: \"323456\",\r\n            category: \"Other\",\r\n            notes: \"Goes whirrr\",\r\n            atid: \"\",\r\n            courses: [\"Photography I\", \"Photography II\"],\r\n            creationDate: new Date().getTime(),\r\n          },\r\n          {\r\n            name: \"Canon 5D Mk II\",\r\n            iid: \"0004\",\r\n            brand: \"Canon\",\r\n            serial: \"423456\",\r\n            category: \"Camera\",\r\n            notes: \"\",\r\n            atid: \"\",\r\n            courses: [\"Photography II\"],\r\n            creationDate: new Date().getTime(),\r\n          },\r\n          {\r\n            name: \"Canon 18-55 F4.0\",\r\n            iid: \"0005\",\r\n            brand: \"Canon\",\r\n            serial: \"523456\",\r\n            category: \"Lens\",\r\n            notes: \"Missing lens cap\",\r\n            atid: \"\",\r\n            courses: [\"Photography I\", \"Photography II\"],\r\n            creationDate: new Date().getTime(),\r\n          },\r\n        ],\r\n        transactions: [\r\n          {\r\n            tid: \"1\",\r\n            uid: \"54321\",\r\n            iid: \"0001\",\r\n            checkedOutDate: new Date(\"7/22/2020\").getTime(),\r\n            dueDate: new Date(\"7/26/2020\").getTime(),\r\n            checkedInDate: new Date(\"7/24/2020\").getTime(),\r\n            notes: \"Example of transaction notes\",\r\n          },\r\n          {\r\n            tid: \"2\",\r\n            uid: \"54321\",\r\n            iid: \"0002\",\r\n            checkedOutDate: new Date(\"7/22/2020\").getTime(),\r\n            dueDate: new Date(\"7/26/2020\").getTime(),\r\n            checkedInDate: new Date(\"7/24/2020\").getTime(),\r\n            notes: \"Example of transaction notes\",\r\n          },\r\n          {\r\n            tid: \"3\",\r\n            uid: \"12345\",\r\n            iid: \"0001\",\r\n            checkedOutDate: new Date(\"7/25/2020\").getTime(),\r\n            dueDate: new Date(\"7/28/2020\").getTime(),\r\n            checkedInDate: \"\",\r\n            notes: \"Example of transaction notes\",\r\n          },\r\n          {\r\n            tid: \"4\",\r\n            uid: \"12345\",\r\n            iid: \"0002\",\r\n            checkedOutDate: new Date(\"7/25/2020\").getTime(),\r\n            dueDate: new Date(\"7/27/2020\").getTime(),\r\n            checkedInDate: \"\",\r\n            notes: \"Example of transaction notes\",\r\n          },\r\n        ],\r\n      },\r\n    };\r\n  }\r\n\r\n  handleDataUpdate(data) {\r\n    this.setState({ data });\r\n    // console.log(\"Data Updated\", data);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n        <Router>\r\n          <Container fluid className=\"no-gutters flex-col stretch-hw\">\r\n            <Header />\r\n            <Row className=\"flex-grow no-gutters\">\r\n              <Col md=\"auto\" className=\"no-gutters\">\r\n                <Sidebar />\r\n              </Col>\r\n              <Col className=\"no-gutters\">\r\n                <Switch>\r\n                  <Route exact path=\"/\">\r\n                    <CheckInOut\r\n                      data={this.state.data}\r\n                      onUpdateData={this.handleDataUpdate}\r\n                    />\r\n                  </Route>\r\n                  {/* <Route path=\"/checkinout\">\r\n                    <CheckInOut\r\n                      data={this.state.data}\r\n                      onUpdateData={this.handleDataUpdate}\r\n                    /> */}\r\n\r\n                  <Route path=\"/users\">\r\n                    <Users\r\n                      data={this.state.data}\r\n                      onUpdateData={this.handleDataUpdate}\r\n                    />\r\n                  </Route>\r\n                  <Route path=\"/inventory\">\r\n                    <Inventory\r\n                      data={this.state.data}\r\n                      onUpdateData={this.handleDataUpdate}\r\n                    />\r\n                  </Route>\r\n                  <Route path=\"/staff\">\r\n                    <Staff onUpdateData={this.handleDataUpdate} />\r\n                  </Route>\r\n                  <Route path=\"/transactions\">\r\n                    <Transactions\r\n                      data={this.state.data}\r\n                      onUpdateData={this.handleDataUpdate}\r\n                    />\r\n                  </Route>\r\n                </Switch>\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Router>\r\n      </MuiPickersUtilsProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}